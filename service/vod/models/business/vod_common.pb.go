// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: vod/business/vod_common.proto

package business

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VodPlayInfoModelVersion int32

const (
	VodPlayInfoModelVersion_UndefinedVodPlayInfoModelVersion  VodPlayInfoModelVersion = 0 // 未定义的数据版本
	VodPlayInfoModelVersion_InternalV1VodPlayInfoModelVersion VodPlayInfoModelVersion = 1
	VodPlayInfoModelVersion_InternalV2VodPlayInfoModelVersion VodPlayInfoModelVersion = 2
	VodPlayInfoModelVersion_InternalV3VodPlayInfoModelVersion VodPlayInfoModelVersion = 3
	VodPlayInfoModelVersion_ToBV1VodPlayInfoModelVersion      VodPlayInfoModelVersion = 4 // ToB第一版
)

// Enum value maps for VodPlayInfoModelVersion.
var (
	VodPlayInfoModelVersion_name = map[int32]string{
		0: "UndefinedVodPlayInfoModelVersion",
		1: "InternalV1VodPlayInfoModelVersion",
		2: "InternalV2VodPlayInfoModelVersion",
		3: "InternalV3VodPlayInfoModelVersion",
		4: "ToBV1VodPlayInfoModelVersion",
	}
	VodPlayInfoModelVersion_value = map[string]int32{
		"UndefinedVodPlayInfoModelVersion":  0,
		"InternalV1VodPlayInfoModelVersion": 1,
		"InternalV2VodPlayInfoModelVersion": 2,
		"InternalV3VodPlayInfoModelVersion": 3,
		"ToBV1VodPlayInfoModelVersion":      4,
	}
)

func (x VodPlayInfoModelVersion) Enum() *VodPlayInfoModelVersion {
	p := new(VodPlayInfoModelVersion)
	*p = x
	return p
}

func (x VodPlayInfoModelVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VodPlayInfoModelVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_vod_business_vod_common_proto_enumTypes[0].Descriptor()
}

func (VodPlayInfoModelVersion) Type() protoreflect.EnumType {
	return &file_vod_business_vod_common_proto_enumTypes[0]
}

func (x VodPlayInfoModelVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VodPlayInfoModelVersion.Descriptor instead.
func (VodPlayInfoModelVersion) EnumDescriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{0}
}

type VodSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId          string              `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`                    //文件ID
	Md5             string              `protobuf:"bytes,2,opt,name=Md5,proto3" json:"Md5,omitempty"`                          // hash值
	FileType        string              `protobuf:"bytes,3,opt,name=FileType,proto3" json:"FileType,omitempty"`                //文件类型 video/audio
	Codec           string              `protobuf:"bytes,4,opt,name=Codec,proto3" json:"Codec,omitempty"`                      //编码格式
	Height          int32               `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`                   //视频高度
	Width           int32               `protobuf:"varint,6,opt,name=Width,proto3" json:"Width,omitempty"`                     //视频宽度
	Format          string              `protobuf:"bytes,7,opt,name=Format,proto3" json:"Format,omitempty"`                    //文件格式
	Duration        float32             `protobuf:"fixed32,8,opt,name=Duration,proto3" json:"Duration,omitempty"`              //时长
	Size            float64             `protobuf:"fixed64,9,opt,name=Size,proto3" json:"Size,omitempty"`                      //文件大小
	StoreUri        string              `protobuf:"bytes,10,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`               //对象地址
	Definition      string              `protobuf:"bytes,11,opt,name=Definition,proto3" json:"Definition,omitempty"`           //视频分辨率
	Bitrate         int32               `protobuf:"varint,12,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`                //码率(Kbps)
	Fps             float32             `protobuf:"fixed32,13,opt,name=Fps,proto3" json:"Fps,omitempty"`                       //帧率
	CreateTime      string              `protobuf:"bytes,14,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`           //创建时间
	Quality         string              `protobuf:"bytes,15,opt,name=Quality,proto3" json:"Quality,omitempty"`                 //音频质量
	DynamicRange    string              `protobuf:"bytes,16,opt,name=DynamicRange,proto3" json:"DynamicRange,omitempty"`       //动态范围，"HDR" or "SDR"
	VideoStreamMeta *VodVideoStreamMeta `protobuf:"bytes,17,opt,name=VideoStreamMeta,proto3" json:"VideoStreamMeta,omitempty"` //视频流信息
	AudioStreamMeta *VodAudioStreamMeta `protobuf:"bytes,18,opt,name=AudioStreamMeta,proto3" json:"AudioStreamMeta,omitempty"` //音频流信息
	TosStorageClass string              `protobuf:"bytes,19,opt,name=TosStorageClass,proto3" json:"TosStorageClass,omitempty"` //存储类型，STANDARD or ARCHIVE
	FileName        string              `protobuf:"bytes,20,opt,name=FileName,proto3" json:"FileName,omitempty"`               //文件名
}

func (x *VodSourceInfo) Reset() {
	*x = VodSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSourceInfo) ProtoMessage() {}

func (x *VodSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSourceInfo.ProtoReflect.Descriptor instead.
func (*VodSourceInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{0}
}

func (x *VodSourceInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VodSourceInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *VodSourceInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodSourceInfo) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodSourceInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodSourceInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodSourceInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodSourceInfo) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodSourceInfo) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VodSourceInfo) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodSourceInfo) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodSourceInfo) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VodSourceInfo) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VodSourceInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodSourceInfo) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *VodSourceInfo) GetDynamicRange() string {
	if x != nil {
		return x.DynamicRange
	}
	return ""
}

func (x *VodSourceInfo) GetVideoStreamMeta() *VodVideoStreamMeta {
	if x != nil {
		return x.VideoStreamMeta
	}
	return nil
}

func (x *VodSourceInfo) GetAudioStreamMeta() *VodAudioStreamMeta {
	if x != nil {
		return x.AudioStreamMeta
	}
	return nil
}

func (x *VodSourceInfo) GetTosStorageClass() string {
	if x != nil {
		return x.TosStorageClass
	}
	return ""
}

func (x *VodSourceInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type VodAudioStreamMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec      string  `protobuf:"bytes,1,opt,name=Codec,proto3" json:"Codec,omitempty"`            //音频编码格式
	Duration   float32 `protobuf:"fixed32,2,opt,name=Duration,proto3" json:"Duration,omitempty"`    //音频时长
	SampleRate int32   `protobuf:"varint,3,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"` //音频采样率
	Bitrate    int32   `protobuf:"varint,4,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`       //音频码率(Kbps)
	Quality    string  `protobuf:"bytes,5,opt,name=Quality,proto3" json:"Quality,omitempty"`        //音频质量
}

func (x *VodAudioStreamMeta) Reset() {
	*x = VodAudioStreamMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAudioStreamMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAudioStreamMeta) ProtoMessage() {}

func (x *VodAudioStreamMeta) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAudioStreamMeta.ProtoReflect.Descriptor instead.
func (*VodAudioStreamMeta) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{1}
}

func (x *VodAudioStreamMeta) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodAudioStreamMeta) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodAudioStreamMeta) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *VodAudioStreamMeta) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VodAudioStreamMeta) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

type VodVideoStreamMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec      string  `protobuf:"bytes,1,opt,name=Codec,proto3" json:"Codec,omitempty"`           //视频编码格式
	Height     int32   `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`        //视频高度
	Width      int32   `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`          //视频宽度
	Duration   float32 `protobuf:"fixed32,4,opt,name=Duration,proto3" json:"Duration,omitempty"`   //视频时长
	Definition string  `protobuf:"bytes,5,opt,name=Definition,proto3" json:"Definition,omitempty"` //视频清晰度
	Bitrate    int32   `protobuf:"varint,6,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`      //视频码率(Kbps)
	Fps        float32 `protobuf:"fixed32,7,opt,name=Fps,proto3" json:"Fps,omitempty"`             //帧率
}

func (x *VodVideoStreamMeta) Reset() {
	*x = VodVideoStreamMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodVideoStreamMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodVideoStreamMeta) ProtoMessage() {}

func (x *VodVideoStreamMeta) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodVideoStreamMeta.ProtoReflect.Descriptor instead.
func (*VodVideoStreamMeta) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{2}
}

func (x *VodVideoStreamMeta) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodVideoStreamMeta) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodVideoStreamMeta) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodVideoStreamMeta) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodVideoStreamMeta) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodVideoStreamMeta) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VodVideoStreamMeta) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

type VodTranscodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId          string              `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`                    //文件ID
	Md5             string              `protobuf:"bytes,2,opt,name=Md5,proto3" json:"Md5,omitempty"`                          // hash值
	FileType        string              `protobuf:"bytes,3,opt,name=FileType,proto3" json:"FileType,omitempty"`                //文件类型 video/audio
	LogoType        string              `protobuf:"bytes,4,opt,name=LogoType,proto3" json:"LogoType,omitempty"`                // logo类型
	Encrypt         bool                `protobuf:"varint,5,opt,name=Encrypt,proto3" json:"Encrypt,omitempty"`                 //是否加密
	Format          string              `protobuf:"bytes,6,opt,name=Format,proto3" json:"Format,omitempty"`                    //文件格式
	Duration        float32             `protobuf:"fixed32,7,opt,name=Duration,proto3" json:"Duration,omitempty"`              //时长
	Size            float64             `protobuf:"fixed64,8,opt,name=Size,proto3" json:"Size,omitempty"`                      //文件大小
	StoreUri        string              `protobuf:"bytes,9,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`                //对象地址
	VideoStreamMeta *VodVideoStreamMeta `protobuf:"bytes,10,opt,name=VideoStreamMeta,proto3" json:"VideoStreamMeta,omitempty"` //视频流信息
	AudioStreamMeta *VodAudioStreamMeta `protobuf:"bytes,11,opt,name=AudioStreamMeta,proto3" json:"AudioStreamMeta,omitempty"` //音频流信息
	CreateTime      string              `protobuf:"bytes,12,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`           //创建时间
	DynamicRange    string              `protobuf:"bytes,13,opt,name=DynamicRange,proto3" json:"DynamicRange,omitempty"`       //动态范围，"HDR" or "SDR"
	TosStorageClass string              `protobuf:"bytes,14,opt,name=TosStorageClass,proto3" json:"TosStorageClass,omitempty"` // Tos存储类型:STANDARD, ARCHIVE
}

func (x *VodTranscodeInfo) Reset() {
	*x = VodTranscodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodTranscodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodTranscodeInfo) ProtoMessage() {}

func (x *VodTranscodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodTranscodeInfo.ProtoReflect.Descriptor instead.
func (*VodTranscodeInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{3}
}

func (x *VodTranscodeInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VodTranscodeInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *VodTranscodeInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodTranscodeInfo) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodTranscodeInfo) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *VodTranscodeInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodTranscodeInfo) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodTranscodeInfo) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VodTranscodeInfo) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodTranscodeInfo) GetVideoStreamMeta() *VodVideoStreamMeta {
	if x != nil {
		return x.VideoStreamMeta
	}
	return nil
}

func (x *VodTranscodeInfo) GetAudioStreamMeta() *VodAudioStreamMeta {
	if x != nil {
		return x.AudioStreamMeta
	}
	return nil
}

func (x *VodTranscodeInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodTranscodeInfo) GetDynamicRange() string {
	if x != nil {
		return x.DynamicRange
	}
	return ""
}

func (x *VodTranscodeInfo) GetTosStorageClass() string {
	if x != nil {
		return x.TosStorageClass
	}
	return ""
}

type VodAdaptiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainPlayUrl   string `protobuf:"bytes,1,opt,name=MainPlayUrl,proto3" json:"MainPlayUrl,omitempty"`     // mpd主链接
	BackupPlayUrl string `protobuf:"bytes,2,opt,name=BackupPlayUrl,proto3" json:"BackupPlayUrl,omitempty"` // mpd备用链接
	AdaptiveType  string `protobuf:"bytes,3,opt,name=AdaptiveType,proto3" json:"AdaptiveType,omitempty"`   // 动态类型segment_base-mpd,segment_template-dash
}

func (x *VodAdaptiveInfo) Reset() {
	*x = VodAdaptiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAdaptiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAdaptiveInfo) ProtoMessage() {}

func (x *VodAdaptiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAdaptiveInfo.ProtoReflect.Descriptor instead.
func (*VodAdaptiveInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{4}
}

func (x *VodAdaptiveInfo) GetMainPlayUrl() string {
	if x != nil {
		return x.MainPlayUrl
	}
	return ""
}

func (x *VodAdaptiveInfo) GetBackupPlayUrl() string {
	if x != nil {
		return x.BackupPlayUrl
	}
	return ""
}

func (x *VodAdaptiveInfo) GetAdaptiveType() string {
	if x != nil {
		return x.AdaptiveType
	}
	return ""
}

type VodPlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId            string         `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`                        //文件ID
	Md5               string         `protobuf:"bytes,2,opt,name=Md5,proto3" json:"Md5,omitempty"`                              // hash值
	FileType          string         `protobuf:"bytes,3,opt,name=FileType,proto3" json:"FileType,omitempty"`                    // 文件类型 video/audio
	Format            string         `protobuf:"bytes,4,opt,name=Format,proto3" json:"Format,omitempty"`                        //视频格式
	Codec             string         `protobuf:"bytes,5,opt,name=Codec,proto3" json:"Codec,omitempty"`                          //编码类型
	Definition        string         `protobuf:"bytes,6,opt,name=Definition,proto3" json:"Definition,omitempty"`                //视频分辨率
	MainPlayUrl       string         `protobuf:"bytes,7,opt,name=MainPlayUrl,proto3" json:"MainPlayUrl,omitempty"`              //主播放地址
	BackupPlayUrl     string         `protobuf:"bytes,8,opt,name=BackupPlayUrl,proto3" json:"BackupPlayUrl,omitempty"`          //备用播放地址
	Bitrate           int32          `protobuf:"varint,9,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`                     //码率(Kbps)
	Width             int32          `protobuf:"varint,10,opt,name=Width,proto3" json:"Width,omitempty"`                        //视频高度
	Height            int32          `protobuf:"varint,11,opt,name=Height,proto3" json:"Height,omitempty"`                      //视频宽度
	Size              float64        `protobuf:"fixed64,12,opt,name=Size,proto3" json:"Size,omitempty"`                         //文件大小
	CheckInfo         string         `protobuf:"bytes,13,opt,name=CheckInfo,proto3" json:"CheckInfo,omitempty"`                 //劫持校验信息
	IndexRange        string         `protobuf:"bytes,14,opt,name=IndexRange,proto3" json:"IndexRange,omitempty"`               // dash segment_base 分片信息
	InitRange         string         `protobuf:"bytes,15,opt,name=InitRange,proto3" json:"InitRange,omitempty"`                 // dash segment_base 分片信息
	PlayAuth          string         `protobuf:"bytes,16,opt,name=PlayAuth,proto3" json:"PlayAuth,omitempty"`                   //加密过的秘钥
	PlayAuthId        string         `protobuf:"bytes,17,opt,name=PlayAuthId,proto3" json:"PlayAuthId,omitempty"`               //密钥keyID
	LogoType          string         `protobuf:"bytes,18,opt,name=LogoType,proto3" json:"LogoType,omitempty"`                   //水印类型
	Quality           string         `protobuf:"bytes,19,opt,name=Quality,proto3" json:"Quality,omitempty"`                     //音频质量
	BarrageMaskOffset string         `protobuf:"bytes,20,opt,name=BarrageMaskOffset,proto3" json:"BarrageMaskOffset,omitempty"` // 弹幕蒙版偏移量
	Duration          float32        `protobuf:"fixed32,21,opt,name=Duration,proto3" json:"Duration,omitempty"`                 //时长
	KeyFrameAlignment string         `protobuf:"bytes,22,opt,name=KeyFrameAlignment,proto3" json:"KeyFrameAlignment,omitempty"` // 在转对齐,使用的帧对齐转码版本
	Volume            *VodVolumeInfo `protobuf:"bytes,23,opt,name=Volume,proto3" json:"Volume,omitempty"`                       //响度信息
}

func (x *VodPlayInfo) Reset() {
	*x = VodPlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPlayInfo) ProtoMessage() {}

func (x *VodPlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPlayInfo.ProtoReflect.Descriptor instead.
func (*VodPlayInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{5}
}

func (x *VodPlayInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VodPlayInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *VodPlayInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodPlayInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodPlayInfo) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodPlayInfo) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodPlayInfo) GetMainPlayUrl() string {
	if x != nil {
		return x.MainPlayUrl
	}
	return ""
}

func (x *VodPlayInfo) GetBackupPlayUrl() string {
	if x != nil {
		return x.BackupPlayUrl
	}
	return ""
}

func (x *VodPlayInfo) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VodPlayInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodPlayInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodPlayInfo) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VodPlayInfo) GetCheckInfo() string {
	if x != nil {
		return x.CheckInfo
	}
	return ""
}

func (x *VodPlayInfo) GetIndexRange() string {
	if x != nil {
		return x.IndexRange
	}
	return ""
}

func (x *VodPlayInfo) GetInitRange() string {
	if x != nil {
		return x.InitRange
	}
	return ""
}

func (x *VodPlayInfo) GetPlayAuth() string {
	if x != nil {
		return x.PlayAuth
	}
	return ""
}

func (x *VodPlayInfo) GetPlayAuthId() string {
	if x != nil {
		return x.PlayAuthId
	}
	return ""
}

func (x *VodPlayInfo) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodPlayInfo) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *VodPlayInfo) GetBarrageMaskOffset() string {
	if x != nil {
		return x.BarrageMaskOffset
	}
	return ""
}

func (x *VodPlayInfo) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodPlayInfo) GetKeyFrameAlignment() string {
	if x != nil {
		return x.KeyFrameAlignment
	}
	return ""
}

func (x *VodPlayInfo) GetVolume() *VodVolumeInfo {
	if x != nil {
		return x.Volume
	}
	return nil
}

type VodVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loudness float64 `protobuf:"fixed64,1,opt,name=Loudness,proto3" json:"Loudness,omitempty"` //响度
	Peak     float64 `protobuf:"fixed64,2,opt,name=Peak,proto3" json:"Peak,omitempty"`         //峰值
}

func (x *VodVolumeInfo) Reset() {
	*x = VodVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodVolumeInfo) ProtoMessage() {}

func (x *VodVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodVolumeInfo.ProtoReflect.Descriptor instead.
func (*VodVolumeInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{6}
}

func (x *VodVolumeInfo) GetLoudness() float64 {
	if x != nil {
		return x.Loudness
	}
	return 0
}

func (x *VodVolumeInfo) GetPeak() float64 {
	if x != nil {
		return x.Peak
	}
	return 0
}

type VodThumbInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureNum int32    `protobuf:"varint,1,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"` // 包含的截图总数
	StoreUrls  []string `protobuf:"bytes,2,rep,name=StoreUrls,proto3" json:"StoreUrls,omitempty"`    // 雪碧图URL
	CellWidth  int32    `protobuf:"varint,3,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`   // 小图宽
	CellHeight int32    `protobuf:"varint,4,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"` // 小图高
	ImgXLen    int32    `protobuf:"varint,5,opt,name=ImgXLen,proto3" json:"ImgXLen,omitempty"`       // 雪碧图每行包含的小图数量
	ImgYLen    int32    `protobuf:"varint,6,opt,name=ImgYLen,proto3" json:"ImgYLen,omitempty"`       // 雪碧图每列包含的小图数量
	Interval   float64  `protobuf:"fixed64,7,opt,name=Interval,proto3" json:"Interval,omitempty"`    // 显示图片时间周期
	Format     string   `protobuf:"bytes,8,opt,name=Format,proto3" json:"Format,omitempty"`          // 图片格式：例：jpg
}

func (x *VodThumbInfo) Reset() {
	*x = VodThumbInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodThumbInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodThumbInfo) ProtoMessage() {}

func (x *VodThumbInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodThumbInfo.ProtoReflect.Descriptor instead.
func (*VodThumbInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{7}
}

func (x *VodThumbInfo) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *VodThumbInfo) GetStoreUrls() []string {
	if x != nil {
		return x.StoreUrls
	}
	return nil
}

func (x *VodThumbInfo) GetCellWidth() int32 {
	if x != nil {
		return x.CellWidth
	}
	return 0
}

func (x *VodThumbInfo) GetCellHeight() int32 {
	if x != nil {
		return x.CellHeight
	}
	return 0
}

func (x *VodThumbInfo) GetImgXLen() int32 {
	if x != nil {
		return x.ImgXLen
	}
	return 0
}

func (x *VodThumbInfo) GetImgYLen() int32 {
	if x != nil {
		return x.ImgYLen
	}
	return 0
}

func (x *VodThumbInfo) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *VodThumbInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type VodSubtitleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid         string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                  //视频ID
	FileId      string `protobuf:"bytes,2,opt,name=FileId,proto3" json:"FileId,omitempty"`            //文件ID
	Language    string `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`        //字幕语言
	LanguageId  int32  `protobuf:"varint,4,opt,name=LanguageId,proto3" json:"LanguageId,omitempty"`   //字幕语言ID
	Format      string `protobuf:"bytes,5,opt,name=Format,proto3" json:"Format,omitempty"`            //字幕格式
	SubtitleId  string `protobuf:"bytes,6,opt,name=SubtitleId,proto3" json:"SubtitleId,omitempty"`    //字幕ID
	Title       string `protobuf:"bytes,7,opt,name=Title,proto3" json:"Title,omitempty"`              //字幕标题
	Tag         string `protobuf:"bytes,8,opt,name=Tag,proto3" json:"Tag,omitempty"`                  //字幕标签
	Status      string `protobuf:"bytes,9,opt,name=Status,proto3" json:"Status,omitempty"`            //字幕状态
	Source      string `protobuf:"bytes,10,opt,name=Source,proto3" json:"Source,omitempty"`           //字幕来源
	StoreUri    string `protobuf:"bytes,11,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`       //字幕uri
	SubtitleUrl string `protobuf:"bytes,12,opt,name=SubtitleUrl,proto3" json:"SubtitleUrl,omitempty"` //字幕url
	CreateTime  string `protobuf:"bytes,13,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`   //创建时间
	Version     string `protobuf:"bytes,14,opt,name=Version,proto3" json:"Version,omitempty"`         //字幕版本
}

func (x *VodSubtitleInfo) Reset() {
	*x = VodSubtitleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSubtitleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSubtitleInfo) ProtoMessage() {}

func (x *VodSubtitleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSubtitleInfo.ProtoReflect.Descriptor instead.
func (*VodSubtitleInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{8}
}

func (x *VodSubtitleInfo) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodSubtitleInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VodSubtitleInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *VodSubtitleInfo) GetLanguageId() int32 {
	if x != nil {
		return x.LanguageId
	}
	return 0
}

func (x *VodSubtitleInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodSubtitleInfo) GetSubtitleId() string {
	if x != nil {
		return x.SubtitleId
	}
	return ""
}

func (x *VodSubtitleInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VodSubtitleInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VodSubtitleInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodSubtitleInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *VodSubtitleInfo) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodSubtitleInfo) GetSubtitleUrl() string {
	if x != nil {
		return x.SubtitleUrl
	}
	return ""
}

func (x *VodSubtitleInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodSubtitleInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VodCommonConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=Module,proto3" json:"Module,omitempty"` // 配置模块类型
	Key    string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`       // 配置Key
	Value  string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`   // 配置Value
}

func (x *VodCommonConfigInfo) Reset() {
	*x = VodCommonConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCommonConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCommonConfigInfo) ProtoMessage() {}

func (x *VodCommonConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCommonConfigInfo.ProtoReflect.Descriptor instead.
func (*VodCommonConfigInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{9}
}

func (x *VodCommonConfigInfo) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *VodCommonConfigInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VodCommonConfigInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VodPlayInfoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          VodPlayInfoModelVersion `protobuf:"varint,10,opt,name=Version,proto3,enum=Volcengine.Vod.Models.Business.VodPlayInfoModelVersion" json:"Version,omitempty"` // 数据版本
	Vid              string                  `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                                                                       // 唯一ID
	Status           int32                   `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`                                                                // 状态
	PosterUrl        string                  `protobuf:"bytes,3,opt,name=PosterUrl,proto3" json:"PosterUrl,omitempty"`                                                           // 封面地址
	Duration         float32                 `protobuf:"fixed32,4,opt,name=Duration,proto3" json:"Duration,omitempty"`                                                           // 播放时长(单位：s)
	FileType         string                  `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`                                                             // 媒体类型
	EnableAdaptive   bool                    `protobuf:"varint,6,opt,name=EnableAdaptive,proto3" json:"EnableAdaptive,omitempty"`                                                // 是否关键针对齐
	TotalCount       int32                   `protobuf:"varint,7,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                                                        // 播放列表数量
	AdaptiveInfo     *VodAdaptiveInfo        `protobuf:"bytes,8,opt,name=AdaptiveInfo,proto3" json:"AdaptiveInfo,omitempty"`                                                     // dash播放信息
	PlayInfoList     []*VodPlayInfo          `protobuf:"bytes,9,rep,name=PlayInfoList,proto3" json:"PlayInfoList,omitempty"`                                                     // 播放列表
	ThumbInfoList    []*VodThumbInfo         `protobuf:"bytes,11,rep,name=ThumbInfoList,proto3" json:"ThumbInfoList,omitempty"`                                                  // 雪碧图列表
	BarrageMaskUrl   string                  `protobuf:"bytes,12,opt,name=BarrageMaskUrl,proto3" json:"BarrageMaskUrl,omitempty"`                                                // 弹幕蒙版url
	SubtitleInfoList []*VodSubtitleInfo      `protobuf:"bytes,13,rep,name=SubtitleInfoList,proto3" json:"SubtitleInfoList,omitempty"`                                            // 字幕信息列表
}

func (x *VodPlayInfoModel) Reset() {
	*x = VodPlayInfoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPlayInfoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPlayInfoModel) ProtoMessage() {}

func (x *VodPlayInfoModel) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPlayInfoModel.ProtoReflect.Descriptor instead.
func (*VodPlayInfoModel) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{10}
}

func (x *VodPlayInfoModel) GetVersion() VodPlayInfoModelVersion {
	if x != nil {
		return x.Version
	}
	return VodPlayInfoModelVersion_UndefinedVodPlayInfoModelVersion
}

func (x *VodPlayInfoModel) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodPlayInfoModel) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VodPlayInfoModel) GetPosterUrl() string {
	if x != nil {
		return x.PosterUrl
	}
	return ""
}

func (x *VodPlayInfoModel) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodPlayInfoModel) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodPlayInfoModel) GetEnableAdaptive() bool {
	if x != nil {
		return x.EnableAdaptive
	}
	return false
}

func (x *VodPlayInfoModel) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodPlayInfoModel) GetAdaptiveInfo() *VodAdaptiveInfo {
	if x != nil {
		return x.AdaptiveInfo
	}
	return nil
}

func (x *VodPlayInfoModel) GetPlayInfoList() []*VodPlayInfo {
	if x != nil {
		return x.PlayInfoList
	}
	return nil
}

func (x *VodPlayInfoModel) GetThumbInfoList() []*VodThumbInfo {
	if x != nil {
		return x.ThumbInfoList
	}
	return nil
}

func (x *VodPlayInfoModel) GetBarrageMaskUrl() string {
	if x != nil {
		return x.BarrageMaskUrl
	}
	return ""
}

func (x *VodPlayInfoModel) GetSubtitleInfoList() []*VodSubtitleInfo {
	if x != nil {
		return x.SubtitleInfoList
	}
	return nil
}

type VodPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp float64 `protobuf:"fixed64,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` // 时间戳
	Value     float64 `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`         // 数值
}

func (x *VodPoint) Reset() {
	*x = VodPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPoint) ProtoMessage() {}

func (x *VodPoint) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPoint.ProtoReflect.Descriptor instead.
func (*VodPoint) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{11}
}

func (x *VodPoint) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VodPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type VodAllPlayInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VodAllPlayInfoModelList []*VodAllPlayInfoModel `protobuf:"bytes,1,rep,name=VodAllPlayInfoModelList,proto3" json:"VodAllPlayInfoModelList,omitempty"`
	TotalCount              int32                  `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`    // 查到多少个vid
	NotFoundVids            []string               `protobuf:"bytes,3,rep,name=NotFoundVids,proto3" json:"NotFoundVids,omitempty"` // 没有查询到任何信息的vid
}

func (x *VodAllPlayInfoResult) Reset() {
	*x = VodAllPlayInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAllPlayInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAllPlayInfoResult) ProtoMessage() {}

func (x *VodAllPlayInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAllPlayInfoResult.ProtoReflect.Descriptor instead.
func (*VodAllPlayInfoResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{12}
}

func (x *VodAllPlayInfoResult) GetVodAllPlayInfoModelList() []*VodAllPlayInfoModel {
	if x != nil {
		return x.VodAllPlayInfoModelList
	}
	return nil
}

func (x *VodAllPlayInfoResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodAllPlayInfoResult) GetNotFoundVids() []string {
	if x != nil {
		return x.NotFoundVids
	}
	return nil
}

type VodAllPlayInfoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid                  string                  `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                                                                      // 唯一ID
	Status               int32                   `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`                                                               // 状态
	PosterUrl            string                  `protobuf:"bytes,3,opt,name=PosterUrl,proto3" json:"PosterUrl,omitempty"`                                                          // 封面地址
	TotalCount           int32                   `protobuf:"varint,4,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                                                       // 播放列表数量
	EnableAdaptive       bool                    `protobuf:"varint,5,opt,name=EnableAdaptive,proto3" json:"EnableAdaptive,omitempty"`                                               // 是否关键针对齐
	VodTranscodePlayInfo []*VodPlayInfo          `protobuf:"bytes,6,rep,name=VodTranscodePlayInfo,proto3" json:"VodTranscodePlayInfo,omitempty"`                                    // 转码流
	VodSourcePlayInfo    *VodPlayInfo            `protobuf:"bytes,7,opt,name=VodSourcePlayInfo,proto3" json:"VodSourcePlayInfo,omitempty"`                                          // 原片流
	Version              VodPlayInfoModelVersion `protobuf:"varint,8,opt,name=Version,proto3,enum=Volcengine.Vod.Models.Business.VodPlayInfoModelVersion" json:"Version,omitempty"` // 数据版本
	ThumbInfoList        []*VodThumbInfo         `protobuf:"bytes,9,rep,name=ThumbInfoList,proto3" json:"ThumbInfoList,omitempty"`                                                  // 雪碧图列表
	BarrageMaskUrl       string                  `protobuf:"bytes,10,opt,name=BarrageMaskUrl,proto3" json:"BarrageMaskUrl,omitempty"`                                               // 弹幕蒙版url
	SubtitleInfoList     []*VodSubtitleInfo      `protobuf:"bytes,11,rep,name=SubtitleInfoList,proto3" json:"SubtitleInfoList,omitempty"`                                           // 字幕信息列表
}

func (x *VodAllPlayInfoModel) Reset() {
	*x = VodAllPlayInfoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAllPlayInfoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAllPlayInfoModel) ProtoMessage() {}

func (x *VodAllPlayInfoModel) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAllPlayInfoModel.ProtoReflect.Descriptor instead.
func (*VodAllPlayInfoModel) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_common_proto_rawDescGZIP(), []int{13}
}

func (x *VodAllPlayInfoModel) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodAllPlayInfoModel) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VodAllPlayInfoModel) GetPosterUrl() string {
	if x != nil {
		return x.PosterUrl
	}
	return ""
}

func (x *VodAllPlayInfoModel) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodAllPlayInfoModel) GetEnableAdaptive() bool {
	if x != nil {
		return x.EnableAdaptive
	}
	return false
}

func (x *VodAllPlayInfoModel) GetVodTranscodePlayInfo() []*VodPlayInfo {
	if x != nil {
		return x.VodTranscodePlayInfo
	}
	return nil
}

func (x *VodAllPlayInfoModel) GetVodSourcePlayInfo() *VodPlayInfo {
	if x != nil {
		return x.VodSourcePlayInfo
	}
	return nil
}

func (x *VodAllPlayInfoModel) GetVersion() VodPlayInfoModelVersion {
	if x != nil {
		return x.Version
	}
	return VodPlayInfoModelVersion_UndefinedVodPlayInfoModelVersion
}

func (x *VodAllPlayInfoModel) GetThumbInfoList() []*VodThumbInfo {
	if x != nil {
		return x.ThumbInfoList
	}
	return nil
}

func (x *VodAllPlayInfoModel) GetBarrageMaskUrl() string {
	if x != nil {
		return x.BarrageMaskUrl
	}
	return ""
}

func (x *VodAllPlayInfoModel) GetSubtitleInfoList() []*VodSubtitleInfo {
	if x != nil {
		return x.SubtitleInfoList
	}
	return nil
}

var File_vod_business_vod_common_proto protoreflect.FileDescriptor

var file_vod_business_vod_common_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22,
	0xa9, 0x05, 0x0a, 0x0d, 0x56, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64, 0x35,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x70, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x12,
	0x56, 0x6f, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x56, 0x6f, 0x64,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x70, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x10,
	0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64, 0x35, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x5c, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5c,
	0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x0f, 0x56, 0x6f,
	0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x05, 0x0a, 0x0b, 0x56, 0x6f,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x65, 0x79,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x65, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3f,
	0x0a, 0x0d, 0x56, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x4c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x50, 0x65, 0x61, 0x6b, 0x22,
	0xf2, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6d, 0x67, 0x58, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49,
	0x6d, 0x67, 0x58, 0x4c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x13, 0x56, 0x6f, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x05,
	0x0a, 0x10, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x51, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a,
	0x0c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c,
	0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x12,
	0x5b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x08,
	0x56, 0x6f, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x14, 0x56, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x17, 0x56, 0x6f, 0x64,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x56, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x73, 0x22, 0x8d, 0x05, 0x0a, 0x13, 0x56, 0x6f, 0x64,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x5f, 0x0a, 0x14, 0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x56, 0x6f, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x59, 0x0a, 0x11, 0x56, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x56, 0x6f, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x5b, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0xd6, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x31, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x01, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x32, 0x56,
	0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x56, 0x33, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x6f, 0x42, 0x56, 0x31, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x42, 0xcd, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x6f, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x09, 0x56, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x6f, 0x64, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xa0,
	0x01, 0x01, 0xd8, 0x01, 0x01, 0xc2, 0x02, 0x00, 0xca, 0x02, 0x20, 0x56, 0x6f, 0x6c, 0x63, 0x5c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x5c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe2, 0x02, 0x23, 0x56, 0x6f,
	0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vod_business_vod_common_proto_rawDescOnce sync.Once
	file_vod_business_vod_common_proto_rawDescData = file_vod_business_vod_common_proto_rawDesc
)

func file_vod_business_vod_common_proto_rawDescGZIP() []byte {
	file_vod_business_vod_common_proto_rawDescOnce.Do(func() {
		file_vod_business_vod_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_vod_business_vod_common_proto_rawDescData)
	})
	return file_vod_business_vod_common_proto_rawDescData
}

var file_vod_business_vod_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vod_business_vod_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_vod_business_vod_common_proto_goTypes = []interface{}{
	(VodPlayInfoModelVersion)(0), // 0: Volcengine.Vod.Models.Business.VodPlayInfoModelVersion
	(*VodSourceInfo)(nil),        // 1: Volcengine.Vod.Models.Business.VodSourceInfo
	(*VodAudioStreamMeta)(nil),   // 2: Volcengine.Vod.Models.Business.VodAudioStreamMeta
	(*VodVideoStreamMeta)(nil),   // 3: Volcengine.Vod.Models.Business.VodVideoStreamMeta
	(*VodTranscodeInfo)(nil),     // 4: Volcengine.Vod.Models.Business.VodTranscodeInfo
	(*VodAdaptiveInfo)(nil),      // 5: Volcengine.Vod.Models.Business.VodAdaptiveInfo
	(*VodPlayInfo)(nil),          // 6: Volcengine.Vod.Models.Business.VodPlayInfo
	(*VodVolumeInfo)(nil),        // 7: Volcengine.Vod.Models.Business.VodVolumeInfo
	(*VodThumbInfo)(nil),         // 8: Volcengine.Vod.Models.Business.VodThumbInfo
	(*VodSubtitleInfo)(nil),      // 9: Volcengine.Vod.Models.Business.VodSubtitleInfo
	(*VodCommonConfigInfo)(nil),  // 10: Volcengine.Vod.Models.Business.VodCommonConfigInfo
	(*VodPlayInfoModel)(nil),     // 11: Volcengine.Vod.Models.Business.VodPlayInfoModel
	(*VodPoint)(nil),             // 12: Volcengine.Vod.Models.Business.VodPoint
	(*VodAllPlayInfoResult)(nil), // 13: Volcengine.Vod.Models.Business.VodAllPlayInfoResult
	(*VodAllPlayInfoModel)(nil),  // 14: Volcengine.Vod.Models.Business.VodAllPlayInfoModel
}
var file_vod_business_vod_common_proto_depIdxs = []int32{
	3,  // 0: Volcengine.Vod.Models.Business.VodSourceInfo.VideoStreamMeta:type_name -> Volcengine.Vod.Models.Business.VodVideoStreamMeta
	2,  // 1: Volcengine.Vod.Models.Business.VodSourceInfo.AudioStreamMeta:type_name -> Volcengine.Vod.Models.Business.VodAudioStreamMeta
	3,  // 2: Volcengine.Vod.Models.Business.VodTranscodeInfo.VideoStreamMeta:type_name -> Volcengine.Vod.Models.Business.VodVideoStreamMeta
	2,  // 3: Volcengine.Vod.Models.Business.VodTranscodeInfo.AudioStreamMeta:type_name -> Volcengine.Vod.Models.Business.VodAudioStreamMeta
	7,  // 4: Volcengine.Vod.Models.Business.VodPlayInfo.Volume:type_name -> Volcengine.Vod.Models.Business.VodVolumeInfo
	0,  // 5: Volcengine.Vod.Models.Business.VodPlayInfoModel.Version:type_name -> Volcengine.Vod.Models.Business.VodPlayInfoModelVersion
	5,  // 6: Volcengine.Vod.Models.Business.VodPlayInfoModel.AdaptiveInfo:type_name -> Volcengine.Vod.Models.Business.VodAdaptiveInfo
	6,  // 7: Volcengine.Vod.Models.Business.VodPlayInfoModel.PlayInfoList:type_name -> Volcengine.Vod.Models.Business.VodPlayInfo
	8,  // 8: Volcengine.Vod.Models.Business.VodPlayInfoModel.ThumbInfoList:type_name -> Volcengine.Vod.Models.Business.VodThumbInfo
	9,  // 9: Volcengine.Vod.Models.Business.VodPlayInfoModel.SubtitleInfoList:type_name -> Volcengine.Vod.Models.Business.VodSubtitleInfo
	14, // 10: Volcengine.Vod.Models.Business.VodAllPlayInfoResult.VodAllPlayInfoModelList:type_name -> Volcengine.Vod.Models.Business.VodAllPlayInfoModel
	6,  // 11: Volcengine.Vod.Models.Business.VodAllPlayInfoModel.VodTranscodePlayInfo:type_name -> Volcengine.Vod.Models.Business.VodPlayInfo
	6,  // 12: Volcengine.Vod.Models.Business.VodAllPlayInfoModel.VodSourcePlayInfo:type_name -> Volcengine.Vod.Models.Business.VodPlayInfo
	0,  // 13: Volcengine.Vod.Models.Business.VodAllPlayInfoModel.Version:type_name -> Volcengine.Vod.Models.Business.VodPlayInfoModelVersion
	8,  // 14: Volcengine.Vod.Models.Business.VodAllPlayInfoModel.ThumbInfoList:type_name -> Volcengine.Vod.Models.Business.VodThumbInfo
	9,  // 15: Volcengine.Vod.Models.Business.VodAllPlayInfoModel.SubtitleInfoList:type_name -> Volcengine.Vod.Models.Business.VodSubtitleInfo
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_vod_business_vod_common_proto_init() }
func file_vod_business_vod_common_proto_init() {
	if File_vod_business_vod_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vod_business_vod_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAudioStreamMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodVideoStreamMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodTranscodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAdaptiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodThumbInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSubtitleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCommonConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPlayInfoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAllPlayInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAllPlayInfoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vod_business_vod_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vod_business_vod_common_proto_goTypes,
		DependencyIndexes: file_vod_business_vod_common_proto_depIdxs,
		EnumInfos:         file_vod_business_vod_common_proto_enumTypes,
		MessageInfos:      file_vod_business_vod_common_proto_msgTypes,
	}.Build()
	File_vod_business_vod_common_proto = out.File
	file_vod_business_vod_common_proto_rawDesc = nil
	file_vod_business_vod_common_proto_goTypes = nil
	file_vod_business_vod_common_proto_depIdxs = nil
}
