// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: vod/business/vod_media.proto

package business

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 模型帧 抽帧选项
type VodFrameExtractingOptionForAudit int32

const (
	VodFrameExtractingOptionForAudit_UndefinedVodFrameExtractingOptionForAudit              VodFrameExtractingOptionForAudit = 0 // 未定义的
	VodFrameExtractingOptionForAudit_FpsVodFrameExtractingOptionForAudit                    VodFrameExtractingOptionForAudit = 1 // 根据帧率取帧
	VodFrameExtractingOptionForAudit_NumberOfFramesVodFrameExtractingOptionForAudit         VodFrameExtractingOptionForAudit = 2 // 根据帧数取帧
	VodFrameExtractingOptionForAudit_CutTimesVodFrameExtractingOptionForAudit               VodFrameExtractingOptionForAudit = 3 // 根据时间戳取帧
	VodFrameExtractingOptionForAudit_FpsLimitNumberOfFramesVodFrameExtractingOptionForAudit VodFrameExtractingOptionForAudit = 4 // 根据Fps抽帧，并限制最大或最小帧数
	VodFrameExtractingOptionForAudit_OnlyFirstLastFrameVodFrameExtractingOptionForAudit     VodFrameExtractingOptionForAudit = 5 // 只取首帧或尾帧
)

// Enum value maps for VodFrameExtractingOptionForAudit.
var (
	VodFrameExtractingOptionForAudit_name = map[int32]string{
		0: "UndefinedVodFrameExtractingOptionForAudit",
		1: "FpsVodFrameExtractingOptionForAudit",
		2: "NumberOfFramesVodFrameExtractingOptionForAudit",
		3: "CutTimesVodFrameExtractingOptionForAudit",
		4: "FpsLimitNumberOfFramesVodFrameExtractingOptionForAudit",
		5: "OnlyFirstLastFrameVodFrameExtractingOptionForAudit",
	}
	VodFrameExtractingOptionForAudit_value = map[string]int32{
		"UndefinedVodFrameExtractingOptionForAudit":              0,
		"FpsVodFrameExtractingOptionForAudit":                    1,
		"NumberOfFramesVodFrameExtractingOptionForAudit":         2,
		"CutTimesVodFrameExtractingOptionForAudit":               3,
		"FpsLimitNumberOfFramesVodFrameExtractingOptionForAudit": 4,
		"OnlyFirstLastFrameVodFrameExtractingOptionForAudit":     5,
	}
)

func (x VodFrameExtractingOptionForAudit) Enum() *VodFrameExtractingOptionForAudit {
	p := new(VodFrameExtractingOptionForAudit)
	*p = x
	return p
}

func (x VodFrameExtractingOptionForAudit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VodFrameExtractingOptionForAudit) Descriptor() protoreflect.EnumDescriptor {
	return file_vod_business_vod_media_proto_enumTypes[0].Descriptor()
}

func (VodFrameExtractingOptionForAudit) Type() protoreflect.EnumType {
	return &file_vod_business_vod_media_proto_enumTypes[0]
}

func (x VodFrameExtractingOptionForAudit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VodFrameExtractingOptionForAudit.Descriptor instead.
func (VodFrameExtractingOptionForAudit) EnumDescriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{0}
}

type VodMediaBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName       string             `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`              //空间名
	Vid             string             `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                          //视频ID
	Title           string             `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`                      //视频名称
	Description     string             `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`          //视频描述
	PosterUri       string             `protobuf:"bytes,5,opt,name=PosterUri,proto3" json:"PosterUri,omitempty"`              //封面图对象地址
	PublishStatus   string             `protobuf:"bytes,6,opt,name=PublishStatus,proto3" json:"PublishStatus,omitempty"`      //发布状态
	Tags            []string           `protobuf:"bytes,7,rep,name=Tags,proto3" json:"Tags,omitempty"`                        //标签列表
	CreateTime      string             `protobuf:"bytes,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`            //创建时间
	Classification  *VodClassification `protobuf:"bytes,9,opt,name=Classification,proto3" json:"Classification,omitempty"`    //分类串
	TosStorageClass string             `protobuf:"bytes,10,opt,name=TosStorageClass,proto3" json:"TosStorageClass,omitempty"` // Tos存储类型:STANDARD, ARCHIVE
}

func (x *VodMediaBasicInfo) Reset() {
	*x = VodMediaBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodMediaBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodMediaBasicInfo) ProtoMessage() {}

func (x *VodMediaBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodMediaBasicInfo.ProtoReflect.Descriptor instead.
func (*VodMediaBasicInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{0}
}

func (x *VodMediaBasicInfo) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodMediaBasicInfo) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodMediaBasicInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VodMediaBasicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VodMediaBasicInfo) GetPosterUri() string {
	if x != nil {
		return x.PosterUri
	}
	return ""
}

func (x *VodMediaBasicInfo) GetPublishStatus() string {
	if x != nil {
		return x.PublishStatus
	}
	return ""
}

func (x *VodMediaBasicInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VodMediaBasicInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodMediaBasicInfo) GetClassification() *VodClassification {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *VodMediaBasicInfo) GetTosStorageClass() string {
	if x != nil {
		return x.TosStorageClass
	}
	return ""
}

type VodMediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo      *VodMediaBasicInfo  `protobuf:"bytes,1,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`           //视频基础信息
	SourceInfo     *VodSourceInfo      `protobuf:"bytes,2,opt,name=SourceInfo,proto3" json:"SourceInfo,omitempty"`         //原视频信息
	TranscodeInfos []*VodTranscodeInfo `protobuf:"bytes,3,rep,name=TranscodeInfos,proto3" json:"TranscodeInfos,omitempty"` //转码视频信息列表
}

func (x *VodMediaInfo) Reset() {
	*x = VodMediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodMediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodMediaInfo) ProtoMessage() {}

func (x *VodMediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodMediaInfo.ProtoReflect.Descriptor instead.
func (*VodMediaInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{1}
}

func (x *VodMediaInfo) GetBasicInfo() *VodMediaBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *VodMediaInfo) GetSourceInfo() *VodSourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

func (x *VodMediaInfo) GetTranscodeInfos() []*VodTranscodeInfo {
	if x != nil {
		return x.TranscodeInfos
	}
	return nil
}

type VodGetMediaInfosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaInfoList []*VodMediaInfo `protobuf:"bytes,1,rep,name=MediaInfoList,proto3" json:"MediaInfoList,omitempty"` //视频信息列表
	NotExistVids  []string        `protobuf:"bytes,2,rep,name=NotExistVids,proto3" json:"NotExistVids,omitempty"`   //不存在的视频VID列表
}

func (x *VodGetMediaInfosData) Reset() {
	*x = VodGetMediaInfosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetMediaInfosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetMediaInfosData) ProtoMessage() {}

func (x *VodGetMediaInfosData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetMediaInfosData.ProtoReflect.Descriptor instead.
func (*VodGetMediaInfosData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{2}
}

func (x *VodGetMediaInfosData) GetMediaInfoList() []*VodMediaInfo {
	if x != nil {
		return x.MediaInfoList
	}
	return nil
}

func (x *VodGetMediaInfosData) GetNotExistVids() []string {
	if x != nil {
		return x.NotExistVids
	}
	return nil
}

type VodStoreUriGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       string   `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`             //视频ID
	StoreUris []string `protobuf:"bytes,2,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"` //封面图对象地址列表
}

func (x *VodStoreUriGroup) Reset() {
	*x = VodStoreUriGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStoreUriGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStoreUriGroup) ProtoMessage() {}

func (x *VodStoreUriGroup) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStoreUriGroup.ProtoReflect.Descriptor instead.
func (*VodStoreUriGroup) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{3}
}

func (x *VodStoreUriGroup) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodStoreUriGroup) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

type VodGetRecPosterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreUriGroups []*VodStoreUriGroup `protobuf:"bytes,1,rep,name=StoreUriGroups,proto3" json:"StoreUriGroups,omitempty"` //封面图信息
	NotExistVids   []string            `protobuf:"bytes,2,rep,name=NotExistVids,proto3" json:"NotExistVids,omitempty"`     //不存在的视频VID列表
}

func (x *VodGetRecPosterData) Reset() {
	*x = VodGetRecPosterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetRecPosterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetRecPosterData) ProtoMessage() {}

func (x *VodGetRecPosterData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetRecPosterData.ProtoReflect.Descriptor instead.
func (*VodGetRecPosterData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{4}
}

func (x *VodGetRecPosterData) GetStoreUriGroups() []*VodStoreUriGroup {
	if x != nil {
		return x.StoreUriGroups
	}
	return nil
}

func (x *VodGetRecPosterData) GetNotExistVids() []string {
	if x != nil {
		return x.NotExistVids
	}
	return nil
}

type VodDeleteMediaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotExistVids []string `protobuf:"bytes,1,rep,name=NotExistVids,proto3" json:"NotExistVids,omitempty"` //不存在的视频VID列表
}

func (x *VodDeleteMediaData) Reset() {
	*x = VodDeleteMediaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteMediaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteMediaData) ProtoMessage() {}

func (x *VodDeleteMediaData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteMediaData.ProtoReflect.Descriptor instead.
func (*VodDeleteMediaData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{5}
}

func (x *VodDeleteMediaData) GetNotExistVids() []string {
	if x != nil {
		return x.NotExistVids
	}
	return nil
}

type VodDeleteTranscodesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotExistFileIds []string `protobuf:"bytes,1,rep,name=NotExistFileIds,proto3" json:"NotExistFileIds,omitempty"` //不存在的转码FileID列表
}

func (x *VodDeleteTranscodesData) Reset() {
	*x = VodDeleteTranscodesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteTranscodesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteTranscodesData) ProtoMessage() {}

func (x *VodDeleteTranscodesData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteTranscodesData.ProtoReflect.Descriptor instead.
func (*VodDeleteTranscodesData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{6}
}

func (x *VodDeleteTranscodesData) GetNotExistFileIds() []string {
	if x != nil {
		return x.NotExistFileIds
	}
	return nil
}

type VodGetMediaListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName     string          `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`         //空间名
	MediaInfoList []*VodMediaInfo `protobuf:"bytes,2,rep,name=MediaInfoList,proto3" json:"MediaInfoList,omitempty"` //视频信息列表
	TotalCount    int32           `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`      //符合条件的结果总数
	Offset        int32           `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`              //数据偏移量
	PageSize      int32           `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`          //分页大小
}

func (x *VodGetMediaListData) Reset() {
	*x = VodGetMediaListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetMediaListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetMediaListData) ProtoMessage() {}

func (x *VodGetMediaListData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetMediaListData.ProtoReflect.Descriptor instead.
func (*VodGetMediaListData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{7}
}

func (x *VodGetMediaListData) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetMediaListData) GetMediaInfoList() []*VodMediaInfo {
	if x != nil {
		return x.MediaInfoList
	}
	return nil
}

func (x *VodGetMediaListData) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodGetMediaListData) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodGetMediaListData) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type VodUpdateSubtitleStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotExistFileIds []string `protobuf:"bytes,1,rep,name=NotExistFileIds,proto3" json:"NotExistFileIds,omitempty"` //不存在的转码FileID列表
}

func (x *VodUpdateSubtitleStatusData) Reset() {
	*x = VodUpdateSubtitleStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateSubtitleStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateSubtitleStatusData) ProtoMessage() {}

func (x *VodUpdateSubtitleStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateSubtitleStatusData.ProtoReflect.Descriptor instead.
func (*VodUpdateSubtitleStatusData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{8}
}

func (x *VodUpdateSubtitleStatusData) GetNotExistFileIds() []string {
	if x != nil {
		return x.NotExistFileIds
	}
	return nil
}

type VodFileSubtitleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId           string             `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`                     //文件ID
	SubtitleInfoList []*VodSubtitleInfo `protobuf:"bytes,2,rep,name=SubtitleInfoList,proto3" json:"SubtitleInfoList,omitempty"` //字幕列表
}

func (x *VodFileSubtitleInfo) Reset() {
	*x = VodFileSubtitleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodFileSubtitleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodFileSubtitleInfo) ProtoMessage() {}

func (x *VodFileSubtitleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodFileSubtitleInfo.ProtoReflect.Descriptor instead.
func (*VodFileSubtitleInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{9}
}

func (x *VodFileSubtitleInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VodFileSubtitleInfo) GetSubtitleInfoList() []*VodSubtitleInfo {
	if x != nil {
		return x.SubtitleInfoList
	}
	return nil
}

type VodGetSubtitleInfoListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid                  string                 `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                                   //视频ID
	FileSubtitleInfoList []*VodFileSubtitleInfo `protobuf:"bytes,2,rep,name=FileSubtitleInfoList,proto3" json:"FileSubtitleInfoList,omitempty"` //字幕列表
	NotExistFileIds      []string               `protobuf:"bytes,3,rep,name=NotExistFileIds,proto3" json:"NotExistFileIds,omitempty"`           //不存在的转码FileID列表
	TotalCount           int32                  `protobuf:"varint,4,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                    //符合条件的结果总数
	Offset               int32                  `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`                            //数据偏移量
	PageSize             int32                  `protobuf:"varint,6,opt,name=PageSize,proto3" json:"PageSize,omitempty"`                        //分页大小
}

func (x *VodGetSubtitleInfoListData) Reset() {
	*x = VodGetSubtitleInfoListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetSubtitleInfoListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetSubtitleInfoListData) ProtoMessage() {}

func (x *VodGetSubtitleInfoListData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetSubtitleInfoListData.ProtoReflect.Descriptor instead.
func (*VodGetSubtitleInfoListData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{10}
}

func (x *VodGetSubtitleInfoListData) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetSubtitleInfoListData) GetFileSubtitleInfoList() []*VodFileSubtitleInfo {
	if x != nil {
		return x.FileSubtitleInfoList
	}
	return nil
}

func (x *VodGetSubtitleInfoListData) GetNotExistFileIds() []string {
	if x != nil {
		return x.NotExistFileIds
	}
	return nil
}

func (x *VodGetSubtitleInfoListData) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodGetSubtitleInfoListData) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodGetSubtitleInfoListData) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type VodFrameDataForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreUri    string  `protobuf:"bytes,1,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`         // URI of frame store
	FrameNumber int32   `protobuf:"varint,2,opt,name=FrameNumber,proto3" json:"FrameNumber,omitempty"`  //帧号
	CutTimeMill float64 `protobuf:"fixed64,3,opt,name=CutTimeMill,proto3" json:"CutTimeMill,omitempty"` //帧对应时间（ms）
	Width       int32   `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`              //图片宽度
	Height      int32   `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`            //图片高度
}

func (x *VodFrameDataForAudit) Reset() {
	*x = VodFrameDataForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodFrameDataForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodFrameDataForAudit) ProtoMessage() {}

func (x *VodFrameDataForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodFrameDataForAudit.ProtoReflect.Descriptor instead.
func (*VodFrameDataForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{11}
}

func (x *VodFrameDataForAudit) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodFrameDataForAudit) GetFrameNumber() int32 {
	if x != nil {
		return x.FrameNumber
	}
	return 0
}

func (x *VodFrameDataForAudit) GetCutTimeMill() float64 {
	if x != nil {
		return x.CutTimeMill
	}
	return 0
}

func (x *VodFrameDataForAudit) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodFrameDataForAudit) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type VodGetFramesForAuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames []*VodFrameDataForAudit `protobuf:"bytes,1,rep,name=Frames,proto3" json:"Frames,omitempty"` // 帧列表
}

func (x *VodGetFramesForAuditResult) Reset() {
	*x = VodGetFramesForAuditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetFramesForAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetFramesForAuditResult) ProtoMessage() {}

func (x *VodGetFramesForAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetFramesForAuditResult.ProtoReflect.Descriptor instead.
func (*VodGetFramesForAuditResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{12}
}

func (x *VodGetFramesForAuditResult) GetFrames() []*VodFrameDataForAudit {
	if x != nil {
		return x.Frames
	}
	return nil
}

type VodBetterFrameDataForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreUri    string    `protobuf:"bytes,1,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`                // Frame URI
	FrameNumber int32     `protobuf:"varint,2,opt,name=FrameNumber,proto3" json:"FrameNumber,omitempty"`         // 帧号
	CutTimeMill float64   `protobuf:"fixed64,3,opt,name=CutTimeMill,proto3" json:"CutTimeMill,omitempty"`        // 帧的时间戳，单位:ms
	Width       int32     `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`                     //截图的宽度
	Height      int32     `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`                   //截图的高度
	CoverRate   float64   `protobuf:"fixed64,6,opt,name=CoverRate,proto3" json:"CoverRate,omitempty"`            // Cover Rate
	LBPHashCode []float64 `protobuf:"fixed64,7,rep,packed,name=LBPHashCode,proto3" json:"LBPHashCode,omitempty"` // Hash Code
}

func (x *VodBetterFrameDataForAudit) Reset() {
	*x = VodBetterFrameDataForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodBetterFrameDataForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodBetterFrameDataForAudit) ProtoMessage() {}

func (x *VodBetterFrameDataForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodBetterFrameDataForAudit.ProtoReflect.Descriptor instead.
func (*VodBetterFrameDataForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{13}
}

func (x *VodBetterFrameDataForAudit) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodBetterFrameDataForAudit) GetFrameNumber() int32 {
	if x != nil {
		return x.FrameNumber
	}
	return 0
}

func (x *VodBetterFrameDataForAudit) GetCutTimeMill() float64 {
	if x != nil {
		return x.CutTimeMill
	}
	return 0
}

func (x *VodBetterFrameDataForAudit) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodBetterFrameDataForAudit) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodBetterFrameDataForAudit) GetCoverRate() float64 {
	if x != nil {
		return x.CoverRate
	}
	return 0
}

func (x *VodBetterFrameDataForAudit) GetLBPHashCode() []float64 {
	if x != nil {
		return x.LBPHashCode
	}
	return nil
}

type VodGetBetterFramesForAuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames []*VodBetterFrameDataForAudit `protobuf:"bytes,1,rep,name=Frames,proto3" json:"Frames,omitempty"` // frame data
}

func (x *VodGetBetterFramesForAuditResult) Reset() {
	*x = VodGetBetterFramesForAuditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetBetterFramesForAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetBetterFramesForAuditResult) ProtoMessage() {}

func (x *VodGetBetterFramesForAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetBetterFramesForAuditResult.ProtoReflect.Descriptor instead.
func (*VodGetBetterFramesForAuditResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{14}
}

func (x *VodGetBetterFramesForAuditResult) GetFrames() []*VodBetterFrameDataForAudit {
	if x != nil {
		return x.Frames
	}
	return nil
}

type VodAudioInfoForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreUri string  `protobuf:"bytes,1,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`   //审核音频存储的URI
	Duration float64 `protobuf:"fixed64,2,opt,name=Duration,proto3" json:"Duration,omitempty"` //音频时长(ms)
	Format   string  `protobuf:"bytes,3,opt,name=Format,proto3" json:"Format,omitempty"`       //格式:wav
}

func (x *VodAudioInfoForAudit) Reset() {
	*x = VodAudioInfoForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAudioInfoForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAudioInfoForAudit) ProtoMessage() {}

func (x *VodAudioInfoForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAudioInfoForAudit.ProtoReflect.Descriptor instead.
func (*VodAudioInfoForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{15}
}

func (x *VodAudioInfoForAudit) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodAudioInfoForAudit) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodAudioInfoForAudit) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type VodGetAudioInfoForAuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioInfo *VodAudioInfoForAudit `protobuf:"bytes,1,opt,name=AudioInfo,proto3" json:"AudioInfo,omitempty"`
}

func (x *VodGetAudioInfoForAuditResult) Reset() {
	*x = VodGetAudioInfoForAuditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAudioInfoForAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAudioInfoForAuditResult) ProtoMessage() {}

func (x *VodGetAudioInfoForAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAudioInfoForAuditResult.ProtoReflect.Descriptor instead.
func (*VodGetAudioInfoForAuditResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{16}
}

func (x *VodGetAudioInfoForAuditResult) GetAudioInfo() *VodAudioInfoForAudit {
	if x != nil {
		return x.AudioInfo
	}
	return nil
}

type VodASRUtteranceWordForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text          string  `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`                     // 分段文本
	StartTimeMill float64 `protobuf:"fixed64,2,opt,name=StartTimeMill,proto3" json:"StartTimeMill,omitempty"` // 起始时间(毫秒)
	EndTimeMill   float64 `protobuf:"fixed64,3,opt,name=EndTimeMill,proto3" json:"EndTimeMill,omitempty"`     // 结束时间(毫秒)
	BlankDuration float64 `protobuf:"fixed64,4,opt,name=BlankDuration,proto3" json:"BlankDuration,omitempty"` // 空白时长(毫秒)
}

func (x *VodASRUtteranceWordForAudit) Reset() {
	*x = VodASRUtteranceWordForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodASRUtteranceWordForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodASRUtteranceWordForAudit) ProtoMessage() {}

func (x *VodASRUtteranceWordForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodASRUtteranceWordForAudit.ProtoReflect.Descriptor instead.
func (*VodASRUtteranceWordForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{17}
}

func (x *VodASRUtteranceWordForAudit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VodASRUtteranceWordForAudit) GetStartTimeMill() float64 {
	if x != nil {
		return x.StartTimeMill
	}
	return 0
}

func (x *VodASRUtteranceWordForAudit) GetEndTimeMill() float64 {
	if x != nil {
		return x.EndTimeMill
	}
	return 0
}

func (x *VodASRUtteranceWordForAudit) GetBlankDuration() float64 {
	if x != nil {
		return x.BlankDuration
	}
	return 0
}

type VodASRUtteranceForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text          string                         `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`                     // 分段文本
	StartTimeMill float64                        `protobuf:"fixed64,2,opt,name=StartTimeMill,proto3" json:"StartTimeMill,omitempty"` // 起始时间(毫秒)
	EndTimeMill   float64                        `protobuf:"fixed64,3,opt,name=EndTimeMill,proto3" json:"EndTimeMill,omitempty"`     // 结束时间(毫秒)
	Words         []*VodASRUtteranceWordForAudit `protobuf:"bytes,4,rep,name=Words,proto3" json:"Words,omitempty"`                   // 分词
	Language      string                         `protobuf:"bytes,5,opt,name=Language,proto3" json:"Language,omitempty"`             // 分句的被识别成的语言
	SpeechRate    float64                        `protobuf:"fixed64,6,opt,name=SpeechRate,proto3" json:"SpeechRate,omitempty"`       // 语速，即一秒钟几个字
}

func (x *VodASRUtteranceForAudit) Reset() {
	*x = VodASRUtteranceForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodASRUtteranceForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodASRUtteranceForAudit) ProtoMessage() {}

func (x *VodASRUtteranceForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodASRUtteranceForAudit.ProtoReflect.Descriptor instead.
func (*VodASRUtteranceForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{18}
}

func (x *VodASRUtteranceForAudit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VodASRUtteranceForAudit) GetStartTimeMill() float64 {
	if x != nil {
		return x.StartTimeMill
	}
	return 0
}

func (x *VodASRUtteranceForAudit) GetEndTimeMill() float64 {
	if x != nil {
		return x.EndTimeMill
	}
	return 0
}

func (x *VodASRUtteranceForAudit) GetWords() []*VodASRUtteranceWordForAudit {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *VodASRUtteranceForAudit) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *VodASRUtteranceForAudit) GetSpeechRate() float64 {
	if x != nil {
		return x.SpeechRate
	}
	return 0
}

type VodASRLanguageDetailForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prob     float64 `protobuf:"fixed64,1,opt,name=Prob,proto3" json:"Prob,omitempty"`       // 识别为此语言的概率
	Language string  `protobuf:"bytes,2,opt,name=Language,proto3" json:"Language,omitempty"` //语言类型，形式形如`<mand>`=普通话，`<sc>`=四川话，`<cant>`=粤语
}

func (x *VodASRLanguageDetailForAudit) Reset() {
	*x = VodASRLanguageDetailForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodASRLanguageDetailForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodASRLanguageDetailForAudit) ProtoMessage() {}

func (x *VodASRLanguageDetailForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodASRLanguageDetailForAudit.ProtoReflect.Descriptor instead.
func (*VodASRLanguageDetailForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{19}
}

func (x *VodASRLanguageDetailForAudit) GetProb() float64 {
	if x != nil {
		return x.Prob
	}
	return 0
}

func (x *VodASRLanguageDetailForAudit) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type VodASRInfoForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text            string                          `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`                       // 识别的语音文本
	Utterances      []*VodASRUtteranceForAudit      `protobuf:"bytes,3,rep,name=Utterances,proto3" json:"Utterances,omitempty"`           // 识别结果语音分句信息
	Language        string                          `protobuf:"bytes,4,opt,name=Language,proto3" json:"Language,omitempty"`               // 整个音频对应的语言
	LanguageDetails []*VodASRLanguageDetailForAudit `protobuf:"bytes,5,rep,name=LanguageDetails,proto3" json:"LanguageDetails,omitempty"` // 语言的详情，描述每个语言的概率
	SpeechRate      float64                         `protobuf:"fixed64,6,opt,name=SpeechRate,proto3" json:"SpeechRate,omitempty"`         //语速，即一秒钟几个字
	Volume          float64                         `protobuf:"fixed64,7,opt,name=Volume,proto3" json:"Volume,omitempty"`                 //音量
}

func (x *VodASRInfoForAudit) Reset() {
	*x = VodASRInfoForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodASRInfoForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodASRInfoForAudit) ProtoMessage() {}

func (x *VodASRInfoForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodASRInfoForAudit.ProtoReflect.Descriptor instead.
func (*VodASRInfoForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{20}
}

func (x *VodASRInfoForAudit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VodASRInfoForAudit) GetUtterances() []*VodASRUtteranceForAudit {
	if x != nil {
		return x.Utterances
	}
	return nil
}

func (x *VodASRInfoForAudit) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *VodASRInfoForAudit) GetLanguageDetails() []*VodASRLanguageDetailForAudit {
	if x != nil {
		return x.LanguageDetails
	}
	return nil
}

func (x *VodASRInfoForAudit) GetSpeechRate() float64 {
	if x != nil {
		return x.SpeechRate
	}
	return 0
}

func (x *VodASRInfoForAudit) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type VodGetAutomaticSpeechRecognitionForAuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VodASRInfoForAudit `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VodGetAutomaticSpeechRecognitionForAuditResult) Reset() {
	*x = VodGetAutomaticSpeechRecognitionForAuditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAutomaticSpeechRecognitionForAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAutomaticSpeechRecognitionForAuditResult) ProtoMessage() {}

func (x *VodGetAutomaticSpeechRecognitionForAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAutomaticSpeechRecognitionForAuditResult.ProtoReflect.Descriptor instead.
func (*VodGetAutomaticSpeechRecognitionForAuditResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{21}
}

func (x *VodGetAutomaticSpeechRecognitionForAuditResult) GetInfo() *VodASRInfoForAudit {
	if x != nil {
		return x.Info
	}
	return nil
}

type VodAEDTimeRangeForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeMill float64 `protobuf:"fixed64,1,opt,name=StartTimeMill,proto3" json:"StartTimeMill,omitempty"` //事件识别区间的起点(ms)
	EndTimeMill   float64 `protobuf:"fixed64,2,opt,name=EndTimeMill,proto3" json:"EndTimeMill,omitempty"`     //事件识别区间的终点(ms)
	Prob          float64 `protobuf:"fixed64,3,opt,name=Prob,proto3" json:"Prob,omitempty"`                   //事件区间对应的事件概率
}

func (x *VodAEDTimeRangeForAudit) Reset() {
	*x = VodAEDTimeRangeForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAEDTimeRangeForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAEDTimeRangeForAudit) ProtoMessage() {}

func (x *VodAEDTimeRangeForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAEDTimeRangeForAudit.ProtoReflect.Descriptor instead.
func (*VodAEDTimeRangeForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{22}
}

func (x *VodAEDTimeRangeForAudit) GetStartTimeMill() float64 {
	if x != nil {
		return x.StartTimeMill
	}
	return 0
}

func (x *VodAEDTimeRangeForAudit) GetEndTimeMill() float64 {
	if x != nil {
		return x.EndTimeMill
	}
	return 0
}

func (x *VodAEDTimeRangeForAudit) GetProb() float64 {
	if x != nil {
		return x.Prob
	}
	return 0
}

type VodAEDEventItemForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      string                     `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`           //事件名，仅当识别成功时填写
	UttProb    float64                    `protobuf:"fixed64,2,opt,name=UttProb,proto3" json:"UttProb,omitempty"`     //整条音频对应的事件概率，仅当识别成功时填写
	TimeRanges []*VodAEDTimeRangeForAudit `protobuf:"bytes,3,rep,name=TimeRanges,proto3" json:"TimeRanges,omitempty"` //事件识别区间，仅当识别成功时填写
}

func (x *VodAEDEventItemForAudit) Reset() {
	*x = VodAEDEventItemForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAEDEventItemForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAEDEventItemForAudit) ProtoMessage() {}

func (x *VodAEDEventItemForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAEDEventItemForAudit.ProtoReflect.Descriptor instead.
func (*VodAEDEventItemForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{23}
}

func (x *VodAEDEventItemForAudit) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *VodAEDEventItemForAudit) GetUttProb() float64 {
	if x != nil {
		return x.UttProb
	}
	return 0
}

func (x *VodAEDEventItemForAudit) GetTimeRanges() []*VodAEDTimeRangeForAudit {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

type VodAEDInfoForAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventItems []*VodAEDEventItemForAudit `protobuf:"bytes,1,rep,name=EventItems,proto3" json:"EventItems,omitempty"` // 识别出来的音频事件信息
}

func (x *VodAEDInfoForAudit) Reset() {
	*x = VodAEDInfoForAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAEDInfoForAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAEDInfoForAudit) ProtoMessage() {}

func (x *VodAEDInfoForAudit) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAEDInfoForAudit.ProtoReflect.Descriptor instead.
func (*VodAEDInfoForAudit) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{24}
}

func (x *VodAEDInfoForAudit) GetEventItems() []*VodAEDEventItemForAudit {
	if x != nil {
		return x.EventItems
	}
	return nil
}

type VodGetAudioEventDetectionForAuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VodAEDInfoForAudit `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VodGetAudioEventDetectionForAuditResult) Reset() {
	*x = VodGetAudioEventDetectionForAuditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAudioEventDetectionForAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAudioEventDetectionForAuditResult) ProtoMessage() {}

func (x *VodGetAudioEventDetectionForAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAudioEventDetectionForAuditResult.ProtoReflect.Descriptor instead.
func (*VodGetAudioEventDetectionForAuditResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{25}
}

func (x *VodGetAudioEventDetectionForAuditResult) GetInfo() *VodAEDInfoForAudit {
	if x != nil {
		return x.Info
	}
	return nil
}

type VodCreateVideoClassificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassificationId int64 `protobuf:"varint,1,opt,name=ClassificationId,proto3" json:"ClassificationId,omitempty"`
}

func (x *VodCreateVideoClassificationData) Reset() {
	*x = VodCreateVideoClassificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateVideoClassificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateVideoClassificationData) ProtoMessage() {}

func (x *VodCreateVideoClassificationData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateVideoClassificationData.ProtoReflect.Descriptor instead.
func (*VodCreateVideoClassificationData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{26}
}

func (x *VodCreateVideoClassificationData) GetClassificationId() int64 {
	if x != nil {
		return x.ClassificationId
	}
	return 0
}

type VodClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName              string               `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	ClassificationId       int64                `protobuf:"varint,2,opt,name=ClassificationId,proto3" json:"ClassificationId,omitempty"`
	Level                  int32                `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Classification         string               `protobuf:"bytes,4,opt,name=Classification,proto3" json:"Classification,omitempty"`
	ParentClassificationId int64                `protobuf:"varint,5,opt,name=ParentClassificationId,proto3" json:"ParentClassificationId,omitempty"`
	SubClassification      *VodClassification   `protobuf:"bytes,6,opt,name=SubClassification,proto3" json:"SubClassification,omitempty"`
	SubClassificationTrees []*VodClassification `protobuf:"bytes,7,rep,name=SubClassificationTrees,proto3" json:"SubClassificationTrees,omitempty"`
	CreatedAt              string               `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *VodClassification) Reset() {
	*x = VodClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodClassification) ProtoMessage() {}

func (x *VodClassification) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodClassification.ProtoReflect.Descriptor instead.
func (*VodClassification) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{27}
}

func (x *VodClassification) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodClassification) GetClassificationId() int64 {
	if x != nil {
		return x.ClassificationId
	}
	return 0
}

func (x *VodClassification) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *VodClassification) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *VodClassification) GetParentClassificationId() int64 {
	if x != nil {
		return x.ParentClassificationId
	}
	return 0
}

func (x *VodClassification) GetSubClassification() *VodClassification {
	if x != nil {
		return x.SubClassification
	}
	return nil
}

func (x *VodClassification) GetSubClassificationTrees() []*VodClassification {
	if x != nil {
		return x.SubClassificationTrees
	}
	return nil
}

func (x *VodClassification) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type VodVideoClassificationsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassificationTrees []*VodClassification `protobuf:"bytes,1,rep,name=ClassificationTrees,proto3" json:"ClassificationTrees,omitempty"`
}

func (x *VodVideoClassificationsData) Reset() {
	*x = VodVideoClassificationsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodVideoClassificationsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodVideoClassificationsData) ProtoMessage() {}

func (x *VodVideoClassificationsData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodVideoClassificationsData.ProtoReflect.Descriptor instead.
func (*VodVideoClassificationsData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{28}
}

func (x *VodVideoClassificationsData) GetClassificationTrees() []*VodClassification {
	if x != nil {
		return x.ClassificationTrees
	}
	return nil
}

type VodSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`     //格式
	Height   int32  `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`    //高
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`      //宽
	StoreUri string `protobuf:"bytes,4,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"` // Uri
	Url      string `protobuf:"bytes,5,opt,name=Url,proto3" json:"Url,omitempty"`           //图片地址
}

func (x *VodSnapshot) Reset() {
	*x = VodSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSnapshot) ProtoMessage() {}

func (x *VodSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSnapshot.ProtoReflect.Descriptor instead.
func (*VodSnapshot) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{29}
}

func (x *VodSnapshot) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodSnapshot) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodSnapshot) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodSnapshot) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *VodSnapshot) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type VodSpriteSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string   `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`          //格式
	ImgXLen    int32    `protobuf:"varint,2,opt,name=ImgXLen,proto3" json:"ImgXLen,omitempty"`       //多图中横向数量
	ImgYLen    int32    `protobuf:"varint,3,opt,name=ImgYLen,proto3" json:"ImgYLen,omitempty"`       //多图中纵向数量
	CellWidth  int32    `protobuf:"varint,4,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`   //小图宽
	CellHeight int32    `protobuf:"varint,5,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"` //小图高
	Interval   float32  `protobuf:"fixed32,6,opt,name=Interval,proto3" json:"Interval,omitempty"`    //截图间隔
	CaptureNum int32    `protobuf:"varint,7,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"` //截图总数限制
	StoreUris  []string `protobuf:"bytes,8,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"`    // Uri列表
	Urls       []string `protobuf:"bytes,9,rep,name=Urls,proto3" json:"Urls,omitempty"`              //图片地址列表
}

func (x *VodSpriteSnapshot) Reset() {
	*x = VodSpriteSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSpriteSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSpriteSnapshot) ProtoMessage() {}

func (x *VodSpriteSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSpriteSnapshot.ProtoReflect.Descriptor instead.
func (*VodSpriteSnapshot) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{30}
}

func (x *VodSpriteSnapshot) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodSpriteSnapshot) GetImgXLen() int32 {
	if x != nil {
		return x.ImgXLen
	}
	return 0
}

func (x *VodSpriteSnapshot) GetImgYLen() int32 {
	if x != nil {
		return x.ImgYLen
	}
	return 0
}

func (x *VodSpriteSnapshot) GetCellWidth() int32 {
	if x != nil {
		return x.CellWidth
	}
	return 0
}

func (x *VodSpriteSnapshot) GetCellHeight() int32 {
	if x != nil {
		return x.CellHeight
	}
	return 0
}

func (x *VodSpriteSnapshot) GetInterval() float32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *VodSpriteSnapshot) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *VodSpriteSnapshot) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

func (x *VodSpriteSnapshot) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type VodSamplePosterSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreUris  []string `protobuf:"bytes,1,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"`    //多张雪碧图地址，item为string
	ImgNum     int32    `protobuf:"varint,2,opt,name=ImgNum,proto3" json:"ImgNum,omitempty"`         //小图数量
	CellWidth  int32    `protobuf:"varint,3,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`   //小图宽
	CellHeight int32    `protobuf:"varint,4,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"` //小图高
	Interval   float32  `protobuf:"fixed32,5,opt,name=Interval,proto3" json:"Interval,omitempty"`    //截图间隔
	Format     string   `protobuf:"bytes,6,opt,name=Format,proto3" json:"Format,omitempty"`          //格式，目前默认 'jpg'
	Duration   float32  `protobuf:"fixed32,7,opt,name=Duration,proto3" json:"Duration,omitempty"`    //视频时长
	Urls       []string `protobuf:"bytes,8,rep,name=Urls,proto3" json:"Urls,omitempty"`              //图片地址列表
}

func (x *VodSamplePosterSnapshot) Reset() {
	*x = VodSamplePosterSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSamplePosterSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSamplePosterSnapshot) ProtoMessage() {}

func (x *VodSamplePosterSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSamplePosterSnapshot.ProtoReflect.Descriptor instead.
func (*VodSamplePosterSnapshot) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{31}
}

func (x *VodSamplePosterSnapshot) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

func (x *VodSamplePosterSnapshot) GetImgNum() int32 {
	if x != nil {
		return x.ImgNum
	}
	return 0
}

func (x *VodSamplePosterSnapshot) GetCellWidth() int32 {
	if x != nil {
		return x.CellWidth
	}
	return 0
}

func (x *VodSamplePosterSnapshot) GetCellHeight() int32 {
	if x != nil {
		return x.CellHeight
	}
	return 0
}

func (x *VodSamplePosterSnapshot) GetInterval() float32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *VodSamplePosterSnapshot) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodSamplePosterSnapshot) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodSamplePosterSnapshot) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type VodSnapshotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName               string                     `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`                             //空间名
	Vid                     string                     `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                                         //视频ID
	PosterSnapshots         []*VodSnapshot             `protobuf:"bytes,3,rep,name=PosterSnapshots,proto3" json:"PosterSnapshots,omitempty"`                 //单张静图
	DynpostSnapshots        []*VodSnapshot             `protobuf:"bytes,4,rep,name=DynpostSnapshots,proto3" json:"DynpostSnapshots,omitempty"`               //普通动图
	AnimatedPosterSnapshots []*VodSnapshot             `protobuf:"bytes,5,rep,name=AnimatedPosterSnapshots,proto3" json:"AnimatedPosterSnapshots,omitempty"` //循环动图
	AiDynpostSnapshots      []*VodSnapshot             `protobuf:"bytes,6,rep,name=AiDynpostSnapshots,proto3" json:"AiDynpostSnapshots,omitempty"`           // Ai动图
	SpriteSnapshots         []*VodSpriteSnapshot       `protobuf:"bytes,7,rep,name=SpriteSnapshots,proto3" json:"SpriteSnapshots,omitempty"`                 //雪碧图
	VSamplePosterSnapshots  []*VodSamplePosterSnapshot `protobuf:"bytes,8,rep,name=VSamplePosterSnapshots,proto3" json:"VSamplePosterSnapshots,omitempty"`   //视频采样截图
}

func (x *VodSnapshotData) Reset() {
	*x = VodSnapshotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSnapshotData) ProtoMessage() {}

func (x *VodSnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSnapshotData.ProtoReflect.Descriptor instead.
func (*VodSnapshotData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{32}
}

func (x *VodSnapshotData) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSnapshotData) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodSnapshotData) GetPosterSnapshots() []*VodSnapshot {
	if x != nil {
		return x.PosterSnapshots
	}
	return nil
}

func (x *VodSnapshotData) GetDynpostSnapshots() []*VodSnapshot {
	if x != nil {
		return x.DynpostSnapshots
	}
	return nil
}

func (x *VodSnapshotData) GetAnimatedPosterSnapshots() []*VodSnapshot {
	if x != nil {
		return x.AnimatedPosterSnapshots
	}
	return nil
}

func (x *VodSnapshotData) GetAiDynpostSnapshots() []*VodSnapshot {
	if x != nil {
		return x.AiDynpostSnapshots
	}
	return nil
}

func (x *VodSnapshotData) GetSpriteSnapshots() []*VodSpriteSnapshot {
	if x != nil {
		return x.SpriteSnapshots
	}
	return nil
}

func (x *VodSnapshotData) GetVSamplePosterSnapshots() []*VodSamplePosterSnapshot {
	if x != nil {
		return x.VSamplePosterSnapshots
	}
	return nil
}

type VodGetFileListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTruncated    bool             `protobuf:"varint,1,opt,name=IsTruncated,proto3" json:"IsTruncated,omitempty"`      //返回的结果是否已被截断
	CommonPrefixes []string         `protobuf:"bytes,2,rep,name=CommonPrefixes,proto3" json:"CommonPrefixes,omitempty"` //文件夹项（当前目录下的一级文件夹）
	FileSum        int64            `protobuf:"varint,3,opt,name=FileSum,proto3" json:"FileSum,omitempty"`              //对象数
	NextStarter    string           `protobuf:"bytes,4,opt,name=NextStarter,proto3" json:"NextStarter,omitempty"`       //如果有截断的话，下一个列举对象的起始位置
	FileBasicInfos []*FileBasicInfo `protobuf:"bytes,5,rep,name=FileBasicInfos,proto3" json:"FileBasicInfos,omitempty"` //对象列表
}

func (x *VodGetFileListData) Reset() {
	*x = VodGetFileListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetFileListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetFileListData) ProtoMessage() {}

func (x *VodGetFileListData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetFileListData.ProtoReflect.Descriptor instead.
func (*VodGetFileListData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{33}
}

func (x *VodGetFileListData) GetIsTruncated() bool {
	if x != nil {
		return x.IsTruncated
	}
	return false
}

func (x *VodGetFileListData) GetCommonPrefixes() []string {
	if x != nil {
		return x.CommonPrefixes
	}
	return nil
}

func (x *VodGetFileListData) GetFileSum() int64 {
	if x != nil {
		return x.FileSum
	}
	return 0
}

func (x *VodGetFileListData) GetNextStarter() string {
	if x != nil {
		return x.NextStarter
	}
	return ""
}

func (x *VodGetFileListData) GetFileBasicInfos() []*FileBasicInfo {
	if x != nil {
		return x.FileBasicInfos
	}
	return nil
}

type FileBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`         // tos侧的key，即directUrl中的FileName
	Size         int64  `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`                //对象大小
	StorageClass string `protobuf:"bytes,3,opt,name=StorageClass,proto3" json:"StorageClass,omitempty"` //存储类型(STANDARD/ARCHIVE)
	UpdatedTime  string `protobuf:"bytes,4,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`   //最近修改时间
}

func (x *FileBasicInfo) Reset() {
	*x = FileBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBasicInfo) ProtoMessage() {}

func (x *FileBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBasicInfo.ProtoReflect.Descriptor instead.
func (*FileBasicInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{34}
}

func (x *FileBasicInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileBasicInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileBasicInfo) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *FileBasicInfo) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

type VodUpdateMediaStorageClassData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotExistVids []string `protobuf:"bytes,1,rep,name=NotExistVids,proto3" json:"NotExistVids,omitempty"`
}

func (x *VodUpdateMediaStorageClassData) Reset() {
	*x = VodUpdateMediaStorageClassData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateMediaStorageClassData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateMediaStorageClassData) ProtoMessage() {}

func (x *VodUpdateMediaStorageClassData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateMediaStorageClassData.ProtoReflect.Descriptor instead.
func (*VodUpdateMediaStorageClassData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{35}
}

func (x *VodUpdateMediaStorageClassData) GetNotExistVids() []string {
	if x != nil {
		return x.NotExistVids
	}
	return nil
}

var File_vod_business_vod_media_proto protoreflect.FileDescriptor

var file_vod_business_vod_media_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x1d,
	0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x02,
	0x0a, 0x11, 0x56, 0x6f, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x56, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0c, 0x56, 0x6f, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x0e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0d,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x10, 0x56, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x58, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x22, 0x38,
	0x0a, 0x12, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0xdb, 0x01,
	0x0a, 0x13, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c,
	0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x56,
	0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x56, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x95, 0x02, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x69, 0x64, 0x12, 0x67, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x56, 0x6f,
	0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x6a, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c,
	0x0a, 0x06, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x06, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xea, 0x01, 0x0a,
	0x1a, 0x56, 0x6f, 0x64, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x43, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x42, 0x50, 0x48, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x4c, 0x42,
	0x50, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x20, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a,
	0x06, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x06, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x66, 0x0a, 0x14, 0x56, 0x6f, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x73, 0x0a, 0x1d, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f,
	0x01, 0x0a, 0x1b, 0x56, 0x6f, 0x64, 0x41, 0x53, 0x52, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c,
	0x61, 0x6e, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x02, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x41, 0x53, 0x52, 0x55, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x53, 0x52, 0x55,
	0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x56, 0x6f, 0x64, 0x41, 0x53,
	0x52, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46,
	0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x12, 0x56, 0x6f, 0x64, 0x41,
	0x53, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x53, 0x52, 0x55, 0x74,
	0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x0a, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x53, 0x52, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x0f,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x2e, 0x56, 0x6f, 0x64, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x53, 0x52, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x75, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x41, 0x45, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x64,
	0x41, 0x45, 0x44, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6f, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x74,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x55, 0x74, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x12, 0x57, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x45, 0x44,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x6d, 0x0a,
	0x12, 0x56, 0x6f, 0x64, 0x41, 0x45, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x45, 0x44, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x27,
	0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x45, 0x44, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x4e, 0x0a, 0x20, 0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xbd, 0x03, 0x0a, 0x11, 0x56, 0x6f, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x16, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x6f, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x53, 0x75, 0x62, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x82, 0x01, 0x0a, 0x1b, 0x56, 0x6f, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x63, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x65, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x56, 0x6f, 0x64,
	0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x58, 0x4c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x58, 0x4c, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x65,
	0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x65,
	0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72,
	0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x6d, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x65, 0x6c,
	0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x83, 0x05, 0x0a, 0x0f, 0x56,
	0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x55,
	0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x10, 0x44, 0x79,
	0x6e, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x65,
	0x0a, 0x17, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x17, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x41, 0x69, 0x44, 0x79, 0x6e, 0x70, 0x6f,
	0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12,
	0x41, 0x69, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f,
	0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12,
	0x6f, 0x0a, 0x16, 0x56, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x6f, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x16, 0x56, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x22, 0xf1, 0x01, 0x0a, 0x12, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x1e,
	0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x64, 0x73, 0x2a, 0xd0, 0x02, 0x0a, 0x20, 0x56, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x70, 0x73, 0x56, 0x6f, 0x64,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x10, 0x01, 0x12,
	0x32, 0x0a, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x56, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x56,
	0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x10,
	0x03, 0x12, 0x3a, 0x0a, 0x36, 0x46, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x56, 0x6f, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x10, 0x04, 0x12, 0x36, 0x0a,
	0x32, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x56, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x10, 0x05, 0x42, 0xcc, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x6f, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x08, 0x56, 0x6f, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x01, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x6f, 0x64, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0xa0, 0x01, 0x01, 0xd8, 0x01, 0x01, 0xc2, 0x02, 0x00, 0xca, 0x02, 0x20, 0x56, 0x6f,
	0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe2, 0x02,
	0x23, 0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f,
	0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vod_business_vod_media_proto_rawDescOnce sync.Once
	file_vod_business_vod_media_proto_rawDescData = file_vod_business_vod_media_proto_rawDesc
)

func file_vod_business_vod_media_proto_rawDescGZIP() []byte {
	file_vod_business_vod_media_proto_rawDescOnce.Do(func() {
		file_vod_business_vod_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_vod_business_vod_media_proto_rawDescData)
	})
	return file_vod_business_vod_media_proto_rawDescData
}

var file_vod_business_vod_media_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vod_business_vod_media_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_vod_business_vod_media_proto_goTypes = []interface{}{
	(VodFrameExtractingOptionForAudit)(0),                  // 0: Volcengine.Vod.Models.Business.VodFrameExtractingOptionForAudit
	(*VodMediaBasicInfo)(nil),                              // 1: Volcengine.Vod.Models.Business.VodMediaBasicInfo
	(*VodMediaInfo)(nil),                                   // 2: Volcengine.Vod.Models.Business.VodMediaInfo
	(*VodGetMediaInfosData)(nil),                           // 3: Volcengine.Vod.Models.Business.VodGetMediaInfosData
	(*VodStoreUriGroup)(nil),                               // 4: Volcengine.Vod.Models.Business.VodStoreUriGroup
	(*VodGetRecPosterData)(nil),                            // 5: Volcengine.Vod.Models.Business.VodGetRecPosterData
	(*VodDeleteMediaData)(nil),                             // 6: Volcengine.Vod.Models.Business.VodDeleteMediaData
	(*VodDeleteTranscodesData)(nil),                        // 7: Volcengine.Vod.Models.Business.VodDeleteTranscodesData
	(*VodGetMediaListData)(nil),                            // 8: Volcengine.Vod.Models.Business.VodGetMediaListData
	(*VodUpdateSubtitleStatusData)(nil),                    // 9: Volcengine.Vod.Models.Business.VodUpdateSubtitleStatusData
	(*VodFileSubtitleInfo)(nil),                            // 10: Volcengine.Vod.Models.Business.VodFileSubtitleInfo
	(*VodGetSubtitleInfoListData)(nil),                     // 11: Volcengine.Vod.Models.Business.VodGetSubtitleInfoListData
	(*VodFrameDataForAudit)(nil),                           // 12: Volcengine.Vod.Models.Business.VodFrameDataForAudit
	(*VodGetFramesForAuditResult)(nil),                     // 13: Volcengine.Vod.Models.Business.VodGetFramesForAuditResult
	(*VodBetterFrameDataForAudit)(nil),                     // 14: Volcengine.Vod.Models.Business.VodBetterFrameDataForAudit
	(*VodGetBetterFramesForAuditResult)(nil),               // 15: Volcengine.Vod.Models.Business.VodGetBetterFramesForAuditResult
	(*VodAudioInfoForAudit)(nil),                           // 16: Volcengine.Vod.Models.Business.VodAudioInfoForAudit
	(*VodGetAudioInfoForAuditResult)(nil),                  // 17: Volcengine.Vod.Models.Business.VodGetAudioInfoForAuditResult
	(*VodASRUtteranceWordForAudit)(nil),                    // 18: Volcengine.Vod.Models.Business.VodASRUtteranceWordForAudit
	(*VodASRUtteranceForAudit)(nil),                        // 19: Volcengine.Vod.Models.Business.VodASRUtteranceForAudit
	(*VodASRLanguageDetailForAudit)(nil),                   // 20: Volcengine.Vod.Models.Business.VodASRLanguageDetailForAudit
	(*VodASRInfoForAudit)(nil),                             // 21: Volcengine.Vod.Models.Business.VodASRInfoForAudit
	(*VodGetAutomaticSpeechRecognitionForAuditResult)(nil), // 22: Volcengine.Vod.Models.Business.VodGetAutomaticSpeechRecognitionForAuditResult
	(*VodAEDTimeRangeForAudit)(nil),                        // 23: Volcengine.Vod.Models.Business.VodAEDTimeRangeForAudit
	(*VodAEDEventItemForAudit)(nil),                        // 24: Volcengine.Vod.Models.Business.VodAEDEventItemForAudit
	(*VodAEDInfoForAudit)(nil),                             // 25: Volcengine.Vod.Models.Business.VodAEDInfoForAudit
	(*VodGetAudioEventDetectionForAuditResult)(nil),        // 26: Volcengine.Vod.Models.Business.VodGetAudioEventDetectionForAuditResult
	(*VodCreateVideoClassificationData)(nil),               // 27: Volcengine.Vod.Models.Business.VodCreateVideoClassificationData
	(*VodClassification)(nil),                              // 28: Volcengine.Vod.Models.Business.VodClassification
	(*VodVideoClassificationsData)(nil),                    // 29: Volcengine.Vod.Models.Business.VodVideoClassificationsData
	(*VodSnapshot)(nil),                                    // 30: Volcengine.Vod.Models.Business.VodSnapshot
	(*VodSpriteSnapshot)(nil),                              // 31: Volcengine.Vod.Models.Business.VodSpriteSnapshot
	(*VodSamplePosterSnapshot)(nil),                        // 32: Volcengine.Vod.Models.Business.VodSamplePosterSnapshot
	(*VodSnapshotData)(nil),                                // 33: Volcengine.Vod.Models.Business.VodSnapshotData
	(*VodGetFileListData)(nil),                             // 34: Volcengine.Vod.Models.Business.VodGetFileListData
	(*FileBasicInfo)(nil),                                  // 35: Volcengine.Vod.Models.Business.FileBasicInfo
	(*VodUpdateMediaStorageClassData)(nil),                 // 36: Volcengine.Vod.Models.Business.VodUpdateMediaStorageClassData
	(*VodSourceInfo)(nil),                                  // 37: Volcengine.Vod.Models.Business.VodSourceInfo
	(*VodTranscodeInfo)(nil),                               // 38: Volcengine.Vod.Models.Business.VodTranscodeInfo
	(*VodSubtitleInfo)(nil),                                // 39: Volcengine.Vod.Models.Business.VodSubtitleInfo
}
var file_vod_business_vod_media_proto_depIdxs = []int32{
	28, // 0: Volcengine.Vod.Models.Business.VodMediaBasicInfo.Classification:type_name -> Volcengine.Vod.Models.Business.VodClassification
	1,  // 1: Volcengine.Vod.Models.Business.VodMediaInfo.BasicInfo:type_name -> Volcengine.Vod.Models.Business.VodMediaBasicInfo
	37, // 2: Volcengine.Vod.Models.Business.VodMediaInfo.SourceInfo:type_name -> Volcengine.Vod.Models.Business.VodSourceInfo
	38, // 3: Volcengine.Vod.Models.Business.VodMediaInfo.TranscodeInfos:type_name -> Volcengine.Vod.Models.Business.VodTranscodeInfo
	2,  // 4: Volcengine.Vod.Models.Business.VodGetMediaInfosData.MediaInfoList:type_name -> Volcengine.Vod.Models.Business.VodMediaInfo
	4,  // 5: Volcengine.Vod.Models.Business.VodGetRecPosterData.StoreUriGroups:type_name -> Volcengine.Vod.Models.Business.VodStoreUriGroup
	2,  // 6: Volcengine.Vod.Models.Business.VodGetMediaListData.MediaInfoList:type_name -> Volcengine.Vod.Models.Business.VodMediaInfo
	39, // 7: Volcengine.Vod.Models.Business.VodFileSubtitleInfo.SubtitleInfoList:type_name -> Volcengine.Vod.Models.Business.VodSubtitleInfo
	10, // 8: Volcengine.Vod.Models.Business.VodGetSubtitleInfoListData.FileSubtitleInfoList:type_name -> Volcengine.Vod.Models.Business.VodFileSubtitleInfo
	12, // 9: Volcengine.Vod.Models.Business.VodGetFramesForAuditResult.Frames:type_name -> Volcengine.Vod.Models.Business.VodFrameDataForAudit
	14, // 10: Volcengine.Vod.Models.Business.VodGetBetterFramesForAuditResult.Frames:type_name -> Volcengine.Vod.Models.Business.VodBetterFrameDataForAudit
	16, // 11: Volcengine.Vod.Models.Business.VodGetAudioInfoForAuditResult.AudioInfo:type_name -> Volcengine.Vod.Models.Business.VodAudioInfoForAudit
	18, // 12: Volcengine.Vod.Models.Business.VodASRUtteranceForAudit.Words:type_name -> Volcengine.Vod.Models.Business.VodASRUtteranceWordForAudit
	19, // 13: Volcengine.Vod.Models.Business.VodASRInfoForAudit.Utterances:type_name -> Volcengine.Vod.Models.Business.VodASRUtteranceForAudit
	20, // 14: Volcengine.Vod.Models.Business.VodASRInfoForAudit.LanguageDetails:type_name -> Volcengine.Vod.Models.Business.VodASRLanguageDetailForAudit
	21, // 15: Volcengine.Vod.Models.Business.VodGetAutomaticSpeechRecognitionForAuditResult.Info:type_name -> Volcengine.Vod.Models.Business.VodASRInfoForAudit
	23, // 16: Volcengine.Vod.Models.Business.VodAEDEventItemForAudit.TimeRanges:type_name -> Volcengine.Vod.Models.Business.VodAEDTimeRangeForAudit
	24, // 17: Volcengine.Vod.Models.Business.VodAEDInfoForAudit.EventItems:type_name -> Volcengine.Vod.Models.Business.VodAEDEventItemForAudit
	25, // 18: Volcengine.Vod.Models.Business.VodGetAudioEventDetectionForAuditResult.Info:type_name -> Volcengine.Vod.Models.Business.VodAEDInfoForAudit
	28, // 19: Volcengine.Vod.Models.Business.VodClassification.SubClassification:type_name -> Volcengine.Vod.Models.Business.VodClassification
	28, // 20: Volcengine.Vod.Models.Business.VodClassification.SubClassificationTrees:type_name -> Volcengine.Vod.Models.Business.VodClassification
	28, // 21: Volcengine.Vod.Models.Business.VodVideoClassificationsData.ClassificationTrees:type_name -> Volcengine.Vod.Models.Business.VodClassification
	30, // 22: Volcengine.Vod.Models.Business.VodSnapshotData.PosterSnapshots:type_name -> Volcengine.Vod.Models.Business.VodSnapshot
	30, // 23: Volcengine.Vod.Models.Business.VodSnapshotData.DynpostSnapshots:type_name -> Volcengine.Vod.Models.Business.VodSnapshot
	30, // 24: Volcengine.Vod.Models.Business.VodSnapshotData.AnimatedPosterSnapshots:type_name -> Volcengine.Vod.Models.Business.VodSnapshot
	30, // 25: Volcengine.Vod.Models.Business.VodSnapshotData.AiDynpostSnapshots:type_name -> Volcengine.Vod.Models.Business.VodSnapshot
	31, // 26: Volcengine.Vod.Models.Business.VodSnapshotData.SpriteSnapshots:type_name -> Volcengine.Vod.Models.Business.VodSpriteSnapshot
	32, // 27: Volcengine.Vod.Models.Business.VodSnapshotData.VSamplePosterSnapshots:type_name -> Volcengine.Vod.Models.Business.VodSamplePosterSnapshot
	35, // 28: Volcengine.Vod.Models.Business.VodGetFileListData.FileBasicInfos:type_name -> Volcengine.Vod.Models.Business.FileBasicInfo
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_vod_business_vod_media_proto_init() }
func file_vod_business_vod_media_proto_init() {
	if File_vod_business_vod_media_proto != nil {
		return
	}
	file_vod_business_vod_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vod_business_vod_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodMediaBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodMediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetMediaInfosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStoreUriGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetRecPosterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteMediaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteTranscodesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetMediaListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateSubtitleStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodFileSubtitleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetSubtitleInfoListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodFrameDataForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetFramesForAuditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodBetterFrameDataForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetBetterFramesForAuditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAudioInfoForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAudioInfoForAuditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodASRUtteranceWordForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodASRUtteranceForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodASRLanguageDetailForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodASRInfoForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAutomaticSpeechRecognitionForAuditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAEDTimeRangeForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAEDEventItemForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAEDInfoForAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAudioEventDetectionForAuditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateVideoClassificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodVideoClassificationsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSpriteSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSamplePosterSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSnapshotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetFileListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateMediaStorageClassData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vod_business_vod_media_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vod_business_vod_media_proto_goTypes,
		DependencyIndexes: file_vod_business_vod_media_proto_depIdxs,
		EnumInfos:         file_vod_business_vod_media_proto_enumTypes,
		MessageInfos:      file_vod_business_vod_media_proto_msgTypes,
	}.Build()
	File_vod_business_vod_media_proto = out.File
	file_vod_business_vod_media_proto_rawDesc = nil
	file_vod_business_vod_media_proto_goTypes = nil
	file_vod_business_vod_media_proto_depIdxs = nil
}
