// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: vod/business/vod_workflow.proto

package business

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StageStatus int32

const (
	StageStatus_Unknown   StageStatus = 0 // 未知
	StageStatus_Scheduled StageStatus = 1 // 等待调度
	StageStatus_Running   StageStatus = 2 // 执行中
	StageStatus_Canceled  StageStatus = 3 // 取消
	StageStatus_TimedOut  StageStatus = 4 // 超时
	StageStatus_Skipped   StageStatus = 5 // 跳过
	StageStatus_Completed StageStatus = 6 // 完成
	StageStatus_Failed    StageStatus = 7 // 失败
)

// Enum value maps for StageStatus.
var (
	StageStatus_name = map[int32]string{
		0: "Unknown",
		1: "Scheduled",
		2: "Running",
		3: "Canceled",
		4: "TimedOut",
		5: "Skipped",
		6: "Completed",
		7: "Failed",
	}
	StageStatus_value = map[string]int32{
		"Unknown":   0,
		"Scheduled": 1,
		"Running":   2,
		"Canceled":  3,
		"TimedOut":  4,
		"Skipped":   5,
		"Completed": 6,
		"Failed":    7,
	}
)

func (x StageStatus) Enum() *StageStatus {
	p := new(StageStatus)
	*p = x
	return p
}

func (x StageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vod_business_vod_workflow_proto_enumTypes[0].Descriptor()
}

func (StageStatus) Type() protoreflect.EnumType {
	return &file_vod_business_vod_workflow_proto_enumTypes[0]
}

func (x StageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageStatus.Descriptor instead.
func (StageStatus) EnumDescriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{0}
}

type VodStartWorkflowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"` // 工作流执行Id
}

func (x *VodStartWorkflowResult) Reset() {
	*x = VodStartWorkflowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStartWorkflowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStartWorkflowResult) ProtoMessage() {}

func (x *VodStartWorkflowResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStartWorkflowResult.ProtoReflect.Descriptor instead.
func (*VodStartWorkflowResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *VodStartWorkflowResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type DirectUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`     // 文件名
	BucketName string `protobuf:"bytes,2,opt,name=BucketName,proto3" json:"BucketName,omitempty"` // Bucket名称
}

func (x *DirectUrl) Reset() {
	*x = DirectUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectUrl) ProtoMessage() {}

func (x *DirectUrl) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectUrl.ProtoReflect.Descriptor instead.
func (*DirectUrl) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *DirectUrl) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DirectUrl) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type WorkflowParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverrideParams *OverrideParams `protobuf:"bytes,1,opt,name=OverrideParams,proto3" json:"OverrideParams,omitempty"`                                                                                // 覆盖参数
	Condition      map[string]bool `protobuf:"bytes,2,rep,name=Condition,proto3" json:"Condition,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 条件变量
}

func (x *WorkflowParams) Reset() {
	*x = WorkflowParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowParams) ProtoMessage() {}

func (x *WorkflowParams) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowParams.ProtoReflect.Descriptor instead.
func (*WorkflowParams) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowParams) GetOverrideParams() *OverrideParams {
	if x != nil {
		return x.OverrideParams
	}
	return nil
}

func (x *WorkflowParams) GetCondition() map[string]bool {
	if x != nil {
		return x.Condition
	}
	return nil
}

type OverrideParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo           []*LogoOverride           `protobuf:"bytes,1,rep,name=Logo,proto3" json:"Logo,omitempty"`                     // 水印覆盖参数
	TranscodeVideo []*TranscodeVideoOverride `protobuf:"bytes,2,rep,name=TranscodeVideo,proto3" json:"TranscodeVideo,omitempty"` // 视频转码覆盖参数
	TranscodeAudio []*TranscodeAudioOverride `protobuf:"bytes,3,rep,name=TranscodeAudio,proto3" json:"TranscodeAudio,omitempty"` // 音频转码覆盖参数
	Snapshot       []*SnapshotOverride       `protobuf:"bytes,4,rep,name=Snapshot,proto3" json:"Snapshot,omitempty"`             // 截图覆盖参数
}

func (x *OverrideParams) Reset() {
	*x = OverrideParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideParams) ProtoMessage() {}

func (x *OverrideParams) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideParams.ProtoReflect.Descriptor instead.
func (*OverrideParams) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *OverrideParams) GetLogo() []*LogoOverride {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *OverrideParams) GetTranscodeVideo() []*TranscodeVideoOverride {
	if x != nil {
		return x.TranscodeVideo
	}
	return nil
}

func (x *OverrideParams) GetTranscodeAudio() []*TranscodeAudioOverride {
	if x != nil {
		return x.TranscodeAudio
	}
	return nil
}

func (x *OverrideParams) GetSnapshot() []*SnapshotOverride {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type LogoOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string            `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                                                                             // 被覆盖的水印模板Id, 支持ALL
	Vars       map[string]string `protobuf:"bytes,2,rep,name=Vars,proto3" json:"Vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 自定义水印变量
}

func (x *LogoOverride) Reset() {
	*x = LogoOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoOverride) ProtoMessage() {}

func (x *LogoOverride) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoOverride.ProtoReflect.Descriptor instead.
func (*LogoOverride) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *LogoOverride) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *LogoOverride) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

type TranscodeVideoOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId  []string `protobuf:"bytes,1,rep,name=TemplateId,proto3" json:"TemplateId,omitempty"`           // 被覆盖的视频模板Id, 支持ALL
	Clip        *Clip    `protobuf:"bytes,2,opt,name=Clip,proto3" json:"Clip,omitempty"`                       // 裁剪参数
	OutputIndex []int32  `protobuf:"varint,3,rep,packed,name=OutputIndex,proto3" json:"OutputIndex,omitempty"` // 模板组下标，仅对模板组生效
	FileName    string   `protobuf:"bytes,4,opt,name=FileName,proto3" json:"FileName,omitempty"`               // FileName
}

func (x *TranscodeVideoOverride) Reset() {
	*x = TranscodeVideoOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeVideoOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoOverride) ProtoMessage() {}

func (x *TranscodeVideoOverride) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoOverride.ProtoReflect.Descriptor instead.
func (*TranscodeVideoOverride) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *TranscodeVideoOverride) GetTemplateId() []string {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *TranscodeVideoOverride) GetClip() *Clip {
	if x != nil {
		return x.Clip
	}
	return nil
}

func (x *TranscodeVideoOverride) GetOutputIndex() []int32 {
	if x != nil {
		return x.OutputIndex
	}
	return nil
}

func (x *TranscodeVideoOverride) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type Clip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int32 `protobuf:"varint,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 开始时间 ms
	EndTime   int32 `protobuf:"varint,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间 ms
}

func (x *Clip) Reset() {
	*x = Clip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clip) ProtoMessage() {}

func (x *Clip) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clip.ProtoReflect.Descriptor instead.
func (*Clip) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *Clip) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Clip) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TranscodeAudioOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId []string `protobuf:"bytes,1,rep,name=TemplateId,proto3" json:"TemplateId,omitempty"` // 被覆盖的音频模板Id, 支持ALL
	Clip       *Clip    `protobuf:"bytes,2,opt,name=Clip,proto3" json:"Clip,omitempty"`
	FileName   string   `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"` // FileName
}

func (x *TranscodeAudioOverride) Reset() {
	*x = TranscodeAudioOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeAudioOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeAudioOverride) ProtoMessage() {}

func (x *TranscodeAudioOverride) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeAudioOverride.ProtoReflect.Descriptor instead.
func (*TranscodeAudioOverride) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *TranscodeAudioOverride) GetTemplateId() []string {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *TranscodeAudioOverride) GetClip() *Clip {
	if x != nil {
		return x.Clip
	}
	return nil
}

func (x *TranscodeAudioOverride) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type SnapshotOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId     []string `protobuf:"bytes,1,rep,name=TemplateId,proto3" json:"TemplateId,omitempty"`                 // 被覆盖的截图模板Id, 支持ALL
	OffsetTime     int32    `protobuf:"varint,2,opt,name=OffsetTime,proto3" json:"OffsetTime,omitempty"`                // 截图时间, 单位ms, AIDynpost和Sprite类型不支持
	OffsetTimeList []int32  `protobuf:"varint,3,rep,packed,name=OffsetTimeList,proto3" json:"OffsetTimeList,omitempty"` // 多Dynpost类型截取时间，单位ms
}

func (x *SnapshotOverride) Reset() {
	*x = SnapshotOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotOverride) ProtoMessage() {}

func (x *SnapshotOverride) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotOverride.ProtoReflect.Descriptor instead.
func (*SnapshotOverride) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *SnapshotOverride) GetTemplateId() []string {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *SnapshotOverride) GetOffsetTime() int32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *SnapshotOverride) GetOffsetTimeList() []int32 {
	if x != nil {
		return x.OffsetTimeList
	}
	return nil
}

type TranscodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid          string             `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                   //视频id，为请求值
	Inspection   *Inspection        `protobuf:"bytes,2,opt,name=Inspection,proto3" json:"Inspection,omitempty"`     // 片源检测结果
	CategoryTags []*CategoryTagInfo `protobuf:"bytes,3,rep,name=CategoryTags,proto3" json:"CategoryTags,omitempty"` // 视频分类结果
}

func (x *TranscodeResult) Reset() {
	*x = TranscodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeResult) ProtoMessage() {}

func (x *TranscodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeResult.ProtoReflect.Descriptor instead.
func (*TranscodeResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *TranscodeResult) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *TranscodeResult) GetInspection() *Inspection {
	if x != nil {
		return x.Inspection
	}
	return nil
}

func (x *TranscodeResult) GetCategoryTags() []*CategoryTagInfo {
	if x != nil {
		return x.CategoryTags
	}
	return nil
}

type Inspection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality *Quality      `protobuf:"bytes,1,opt,name=Quality,proto3" json:"Quality,omitempty"` // 视频检测质量
	DeLogo  []*DeLogoInfo `protobuf:"bytes,2,rep,name=DeLogo,proto3" json:"DeLogo,omitempty"`   // 水印检测结果
}

func (x *Inspection) Reset() {
	*x = Inspection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inspection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inspection) ProtoMessage() {}

func (x *Inspection) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inspection.ProtoReflect.Descriptor instead.
func (*Inspection) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *Inspection) GetQuality() *Quality {
	if x != nil {
		return x.Quality
	}
	return nil
}

func (x *Inspection) GetDeLogo() []*DeLogoInfo {
	if x != nil {
		return x.DeLogo
	}
	return nil
}

type Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visual     *VisualQuality `protobuf:"bytes,1,opt,name=Visual,proto3" json:"Visual,omitempty"`         // 片源检测参数
	VolumeInfo *VolumeInfo    `protobuf:"bytes,2,opt,name=VolumeInfo,proto3" json:"VolumeInfo,omitempty"` // 音量
}

func (x *Quality) Reset() {
	*x = Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quality) ProtoMessage() {}

func (x *Quality) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quality.ProtoReflect.Descriptor instead.
func (*Quality) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *Quality) GetVisual() *VisualQuality {
	if x != nil {
		return x.Visual
	}
	return nil
}

func (x *Quality) GetVolumeInfo() *VolumeInfo {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

type DeLogoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorWidth  int64 `protobuf:"varint,1,opt,name=AnchorWidth,proto3" json:"AnchorWidth,omitempty"`   // Anchor基准宽度
	AnchorHeight int64 `protobuf:"varint,2,opt,name=AnchorHeight,proto3" json:"AnchorHeight,omitempty"` // Anchor基准宽度
	PosX         int64 `protobuf:"varint,3,opt,name=PosX,proto3" json:"PosX,omitempty"`                 // 水印左上角X坐标
	PosY         int64 `protobuf:"varint,4,opt,name=PosY,proto3" json:"PosY,omitempty"`                 // 水印左上角Y坐标
	SizeX        int64 `protobuf:"varint,5,opt,name=SizeX,proto3" json:"SizeX,omitempty"`               // 水印宽度
	SizeY        int64 `protobuf:"varint,6,opt,name=SizeY,proto3" json:"SizeY,omitempty"`               // 水印高度
}

func (x *DeLogoInfo) Reset() {
	*x = DeLogoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeLogoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeLogoInfo) ProtoMessage() {}

func (x *DeLogoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeLogoInfo.ProtoReflect.Descriptor instead.
func (*DeLogoInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *DeLogoInfo) GetAnchorWidth() int64 {
	if x != nil {
		return x.AnchorWidth
	}
	return 0
}

func (x *DeLogoInfo) GetAnchorHeight() int64 {
	if x != nil {
		return x.AnchorHeight
	}
	return 0
}

func (x *DeLogoInfo) GetPosX() int64 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *DeLogoInfo) GetPosY() int64 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *DeLogoInfo) GetSizeX() int64 {
	if x != nil {
		return x.SizeX
	}
	return 0
}

func (x *DeLogoInfo) GetSizeY() int64 {
	if x != nil {
		return x.SizeY
	}
	return 0
}

type VisualQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VQScore      float64 `protobuf:"fixed64,1,opt,name=VQScore,proto3" json:"VQScore,omitempty"`           // 视频质量评分
	Contrast     float64 `protobuf:"fixed64,2,opt,name=Contrast,proto3" json:"Contrast,omitempty"`         // 对比度
	Colorfulness float64 `protobuf:"fixed64,3,opt,name=Colorfulness,proto3" json:"Colorfulness,omitempty"` // 色彩
	Brightness   float64 `protobuf:"fixed64,4,opt,name=Brightness,proto3" json:"Brightness,omitempty"`     // 亮度
	Texture      float64 `protobuf:"fixed64,5,opt,name=Texture,proto3" json:"Texture,omitempty"`           // 纹理
	Noise        float64 `protobuf:"fixed64,6,opt,name=Noise,proto3" json:"Noise,omitempty"`               // 噪声
}

func (x *VisualQuality) Reset() {
	*x = VisualQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisualQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualQuality) ProtoMessage() {}

func (x *VisualQuality) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualQuality.ProtoReflect.Descriptor instead.
func (*VisualQuality) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *VisualQuality) GetVQScore() float64 {
	if x != nil {
		return x.VQScore
	}
	return 0
}

func (x *VisualQuality) GetContrast() float64 {
	if x != nil {
		return x.Contrast
	}
	return 0
}

func (x *VisualQuality) GetColorfulness() float64 {
	if x != nil {
		return x.Colorfulness
	}
	return 0
}

func (x *VisualQuality) GetBrightness() float64 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *VisualQuality) GetTexture() float64 {
	if x != nil {
		return x.Texture
	}
	return 0
}

func (x *VisualQuality) GetNoise() float64 {
	if x != nil {
		return x.Noise
	}
	return 0
}

type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loudness   float64 `protobuf:"fixed64,1,opt,name=Loudness,proto3" json:"Loudness,omitempty"`     // 响度, 单位：LUFS
	Peak       float64 `protobuf:"fixed64,2,opt,name=Peak,proto3" json:"Peak,omitempty"`             // 峰值，范围：（0, 1.0], 峰值归一化
	MeanVolume float64 `protobuf:"fixed64,3,opt,name=MeanVolume,proto3" json:"MeanVolume,omitempty"` // 均值，单位：dB
	MaxVolume  float64 `protobuf:"fixed64,4,opt,name=MaxVolume,proto3" json:"MaxVolume,omitempty"`   // 最大值，单位：dB
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *VolumeInfo) GetLoudness() float64 {
	if x != nil {
		return x.Loudness
	}
	return 0
}

func (x *VolumeInfo) GetPeak() float64 {
	if x != nil {
		return x.Peak
	}
	return 0
}

func (x *VolumeInfo) GetMeanVolume() float64 {
	if x != nil {
		return x.MeanVolume
	}
	return 0
}

func (x *VolumeInfo) GetMaxVolume() float64 {
	if x != nil {
		return x.MaxVolume
	}
	return 0
}

type CategoryTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId      int64             `protobuf:"varint,1,opt,name=TagId,proto3" json:"TagId,omitempty"`                                                                                                  // 标签id
	Prob       float64           `protobuf:"fixed64,2,opt,name=Prob,proto3" json:"Prob,omitempty"`                                                                                                   // 置信度
	TagName    string            `protobuf:"bytes,3,opt,name=TagName,proto3" json:"TagName,omitempty"`                                                                                               // 标签名称
	Level      int64             `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`                                                                                                  // 等级
	ParentInfo map[string]string `protobuf:"bytes,5,rep,name=ParentInfo,proto3" json:"ParentInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 父节点标签信息
}

func (x *CategoryTagInfo) Reset() {
	*x = CategoryTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTagInfo) ProtoMessage() {}

func (x *CategoryTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTagInfo.ProtoReflect.Descriptor instead.
func (*CategoryTagInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *CategoryTagInfo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CategoryTagInfo) GetProb() float64 {
	if x != nil {
		return x.Prob
	}
	return 0
}

func (x *CategoryTagInfo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CategoryTagInfo) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CategoryTagInfo) GetParentInfo() map[string]string {
	if x != nil {
		return x.ParentInfo
	}
	return nil
}

type VodListWorkflowExecutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*WorkflowExecution `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`              // 工作流记录
	TotalCount int32                `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"` // 符合条件的结果总数
	PageSize   int32                `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`     // 分页大小
	Offset     int32                `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`         // 数据偏移量
}

func (x *VodListWorkflowExecutionResult) Reset() {
	*x = VodListWorkflowExecutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListWorkflowExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListWorkflowExecutionResult) ProtoMessage() {}

func (x *VodListWorkflowExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListWorkflowExecutionResult.ProtoReflect.Descriptor instead.
func (*VodListWorkflowExecutionResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *VodListWorkflowExecutionResult) GetData() []*WorkflowExecution {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VodListWorkflowExecutionResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodListWorkflowExecutionResult) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VodListWorkflowExecutionResult) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type WorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId             string                 `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`                          //工作流执行ID
	Vid               string                 `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                              // 视频ID
	TemplateId        string                 `protobuf:"bytes,3,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                //模板ID，即工作流ID
	TemplateName      string                 `protobuf:"bytes,4,opt,name=TemplateName,proto3" json:"TemplateName,omitempty"`            // 工作流名称
	SpaceName         string                 `protobuf:"bytes,5,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`                  // 空间名
	Status            string                 `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`                        //执行状态
	TaskListId        string                 `protobuf:"bytes,7,opt,name=TaskListId,proto3" json:"TaskListId,omitempty"`                //任务队列ID
	EnableLowPriority bool                   `protobuf:"varint,8,opt,name=EnableLowPriority,proto3" json:"EnableLowPriority,omitempty"` //闲时转码
	JobSource         string                 `protobuf:"bytes,9,opt,name=JobSource,proto3" json:"JobSource,omitempty"`                  //任务来源
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`               //任务创建时间，即触发任务的时间，格式：rfc3339。如果不存在则为空
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                 //任务开始执行时间，即任务被调度到的时间戳，可用于计算执行时间，格式：rfc3339。如果不存在则为空
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                     //任务结束时间，可用于排序，格式：格式：rfc3339。如果不存在则为空
	Input             *WorkflowParams        `protobuf:"bytes,13,opt,name=Input,proto3" json:"Input,omitempty"`                         //工作流输入参数
	Priority          int32                  `protobuf:"varint,14,opt,name=Priority,proto3" json:"Priority,omitempty"`                  //转码记录优先级
	CallbackArgs      string                 `protobuf:"bytes,15,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`           //回调透传参数
	TasksDetail       []*TaskDetail          `protobuf:"bytes,16,rep,name=TasksDetail,proto3" json:"TasksDetail,omitempty"`             // 子任务详情
	DirectUrl         *DirectUrl             `protobuf:"bytes,17,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`
}

func (x *WorkflowExecution) Reset() {
	*x = WorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecution) ProtoMessage() {}

func (x *WorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecution.ProtoReflect.Descriptor instead.
func (*WorkflowExecution) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *WorkflowExecution) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowExecution) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *WorkflowExecution) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *WorkflowExecution) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *WorkflowExecution) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *WorkflowExecution) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowExecution) GetTaskListId() string {
	if x != nil {
		return x.TaskListId
	}
	return ""
}

func (x *WorkflowExecution) GetEnableLowPriority() bool {
	if x != nil {
		return x.EnableLowPriority
	}
	return false
}

func (x *WorkflowExecution) GetJobSource() string {
	if x != nil {
		return x.JobSource
	}
	return ""
}

func (x *WorkflowExecution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WorkflowExecution) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WorkflowExecution) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WorkflowExecution) GetInput() *WorkflowParams {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowExecution) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *WorkflowExecution) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *WorkflowExecution) GetTasksDetail() []*TaskDetail {
	if x != nil {
		return x.TasksDetail
	}
	return nil
}

func (x *WorkflowExecution) GetDirectUrl() *DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

type VodGetWorkflowExecutionDetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId             string                 `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Vid               string                 `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`
	TemplateId        string                 `protobuf:"bytes,3,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	SpaceName         string                 `protobuf:"bytes,4,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Status            string                 `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	TaskListId        string                 `protobuf:"bytes,7,opt,name=TaskListId,proto3" json:"TaskListId,omitempty"`
	EnableLowPriority bool                   `protobuf:"varint,8,opt,name=EnableLowPriority,proto3" json:"EnableLowPriority,omitempty"`
	JobSource         string                 `protobuf:"bytes,9,opt,name=JobSource,proto3" json:"JobSource,omitempty"`
	Stages            []*ExecutionStage      `protobuf:"bytes,10,rep,name=Stages,proto3" json:"Stages,omitempty"` // 执行阶段
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	DirectUrl         *DirectUrl             `protobuf:"bytes,14,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`
}

func (x *VodGetWorkflowExecutionDetailResult) Reset() {
	*x = VodGetWorkflowExecutionDetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetWorkflowExecutionDetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetWorkflowExecutionDetailResult) ProtoMessage() {}

func (x *VodGetWorkflowExecutionDetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetWorkflowExecutionDetailResult.ProtoReflect.Descriptor instead.
func (*VodGetWorkflowExecutionDetailResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *VodGetWorkflowExecutionDetailResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetTaskListId() string {
	if x != nil {
		return x.TaskListId
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetEnableLowPriority() bool {
	if x != nil {
		return x.EnableLowPriority
	}
	return false
}

func (x *VodGetWorkflowExecutionDetailResult) GetJobSource() string {
	if x != nil {
		return x.JobSource
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetStages() []*ExecutionStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetDirectUrl() *DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

type ExecutionStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"` // 阶段名称
	StageDetail []*StageDetail         `protobuf:"bytes,2,rep,name=StageDetail,proto3" json:"StageDetail,omitempty"` // 阶段详情
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`     // 阶段开始时间
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`         // 阶段完成时间
}

func (x *ExecutionStage) Reset() {
	*x = ExecutionStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStage) ProtoMessage() {}

func (x *ExecutionStage) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStage.ProtoReflect.Descriptor instead.
func (*ExecutionStage) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{19}
}

func (x *ExecutionStage) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExecutionStage) GetStageDetail() []*StageDetail {
	if x != nil {
		return x.StageDetail
	}
	return nil
}

func (x *ExecutionStage) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ExecutionStage) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type StageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Type        string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	TemplateId  string                 `protobuf:"bytes,4,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	Status      StageStatus            `protobuf:"varint,5,opt,name=Status,proto3,enum=Volcengine.Vod.Models.Business.StageStatus" json:"Status,omitempty"`
	ErrorCode   int64                  `protobuf:"varint,6,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"` // 错误码
	Message     string                 `protobuf:"bytes,7,opt,name=Message,proto3" json:"Message,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 阶段开始时间
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 阶段结束时间
}

func (x *StageDetail) Reset() {
	*x = StageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageDetail) ProtoMessage() {}

func (x *StageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageDetail.ProtoReflect.Descriptor instead.
func (*StageDetail) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{20}
}

func (x *StageDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StageDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StageDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StageDetail) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *StageDetail) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_Unknown
}

func (x *StageDetail) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StageDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StageDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StageDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type TaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,2,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`                                        // 模板名称
	TemplateId  string                 `protobuf:"bytes,4,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                                          // 模板id
	Status      StageStatus            `protobuf:"varint,5,opt,name=Status,proto3,enum=Volcengine.Vod.Models.Business.StageStatus" json:"Status,omitempty"` // 执行状态：Running|Canceled|Skipped|Completed|Failed
	Progress    int32                  `protobuf:"varint,8,opt,name=Progress,proto3" json:"Progress,omitempty"`                                             // 执行进度
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                                            // 阶段开始时间
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                                               // 阶段结束时间
}

func (x *TaskDetail) Reset() {
	*x = TaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetail) ProtoMessage() {}

func (x *TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetail.ProtoReflect.Descriptor instead.
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *TaskDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TaskDetail) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TaskDetail) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_Unknown
}

func (x *TaskDetail) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TaskDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type SnapshotParamsPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsPoster) Reset() {
	*x = SnapshotParamsPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsPoster) ProtoMessage() {}

func (x *SnapshotParamsPoster) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsPoster.ProtoReflect.Descriptor instead.
func (*SnapshotParamsPoster) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *SnapshotParamsPoster) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsPoster) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsPoster) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsPoster) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsDynpost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsDynpost) Reset() {
	*x = SnapshotParamsDynpost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsDynpost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsDynpost) ProtoMessage() {}

func (x *SnapshotParamsDynpost) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsDynpost.ProtoReflect.Descriptor instead.
func (*SnapshotParamsDynpost) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *SnapshotParamsDynpost) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsDynpost) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsDynpost) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsDynpost) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsAIDynpost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsAIDynpost) Reset() {
	*x = SnapshotParamsAIDynpost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsAIDynpost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsAIDynpost) ProtoMessage() {}

func (x *SnapshotParamsAIDynpost) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsAIDynpost.ProtoReflect.Descriptor instead.
func (*SnapshotParamsAIDynpost) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{24}
}

func (x *SnapshotParamsAIDynpost) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsAIDynpost) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsAIDynpost) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsAIDynpost) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsAnimatedPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsAnimatedPoster) Reset() {
	*x = SnapshotParamsAnimatedPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsAnimatedPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsAnimatedPoster) ProtoMessage() {}

func (x *SnapshotParamsAnimatedPoster) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsAnimatedPoster.ProtoReflect.Descriptor instead.
func (*SnapshotParamsAnimatedPoster) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{25}
}

func (x *SnapshotParamsAnimatedPoster) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsAnimatedPoster) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsAnimatedPoster) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsAnimatedPoster) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsSprite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string   `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUris  []string `protobuf:"bytes,2,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"`
	CellWidth  int32    `protobuf:"varint,3,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`
	CellHeight int32    `protobuf:"varint,4,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"`
	ImgXLen    int32    `protobuf:"varint,5,opt,name=ImgXLen,proto3" json:"ImgXLen,omitempty"`
	ImgYLen    int32    `protobuf:"varint,6,opt,name=ImgYLen,proto3" json:"ImgYLen,omitempty"`
	Interval   float32  `protobuf:"fixed32,7,opt,name=Interval,proto3" json:"Interval,omitempty"`
	CaptureNum int32    `protobuf:"varint,8,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
}

func (x *SnapshotParamsSprite) Reset() {
	*x = SnapshotParamsSprite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsSprite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsSprite) ProtoMessage() {}

func (x *SnapshotParamsSprite) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsSprite.ProtoReflect.Descriptor instead.
func (*SnapshotParamsSprite) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{26}
}

func (x *SnapshotParamsSprite) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsSprite) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

func (x *SnapshotParamsSprite) GetCellWidth() int32 {
	if x != nil {
		return x.CellWidth
	}
	return 0
}

func (x *SnapshotParamsSprite) GetCellHeight() int32 {
	if x != nil {
		return x.CellHeight
	}
	return 0
}

func (x *SnapshotParamsSprite) GetImgXLen() int32 {
	if x != nil {
		return x.ImgXLen
	}
	return 0
}

func (x *SnapshotParamsSprite) GetImgYLen() int32 {
	if x != nil {
		return x.ImgYLen
	}
	return 0
}

func (x *SnapshotParamsSprite) GetInterval() float32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SnapshotParamsSprite) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

type SnapshotParamsSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string   `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUris  []string `protobuf:"bytes,2,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"`
	Width      int32    `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height     int32    `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	Interval   float32  `protobuf:"fixed32,5,opt,name=Interval,proto3" json:"Interval,omitempty"`
	CaptureNum int32    `protobuf:"varint,6,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
	Duration   float32  `protobuf:"fixed32,7,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *SnapshotParamsSample) Reset() {
	*x = SnapshotParamsSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsSample) ProtoMessage() {}

func (x *SnapshotParamsSample) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsSample.ProtoReflect.Descriptor instead.
func (*SnapshotParamsSample) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{27}
}

func (x *SnapshotParamsSample) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsSample) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

func (x *SnapshotParamsSample) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsSample) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SnapshotParamsSample) GetInterval() float32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SnapshotParamsSample) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *SnapshotParamsSample) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SnapshotResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Types that are assignable to SnapshotParams:
	//	*SnapshotResult_Poster
	//	*SnapshotResult_Dynpost
	//	*SnapshotResult_AnimatedPoster
	//	*SnapshotResult_AIDynpost
	//	*SnapshotResult_Sprite
	//	*SnapshotResult_Sample
	SnapshotParams isSnapshotResult_SnapshotParams `protobuf_oneof:"SnapshotParams"`
}

func (x *SnapshotResult) Reset() {
	*x = SnapshotResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResult) ProtoMessage() {}

func (x *SnapshotResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResult.ProtoReflect.Descriptor instead.
func (*SnapshotResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{28}
}

func (x *SnapshotResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *SnapshotResult) GetSnapshotParams() isSnapshotResult_SnapshotParams {
	if m != nil {
		return m.SnapshotParams
	}
	return nil
}

func (x *SnapshotResult) GetPoster() *SnapshotParamsPoster {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Poster); ok {
		return x.Poster
	}
	return nil
}

func (x *SnapshotResult) GetDynpost() *SnapshotParamsDynpost {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Dynpost); ok {
		return x.Dynpost
	}
	return nil
}

func (x *SnapshotResult) GetAnimatedPoster() *SnapshotParamsAnimatedPoster {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_AnimatedPoster); ok {
		return x.AnimatedPoster
	}
	return nil
}

func (x *SnapshotResult) GetAIDynpost() *SnapshotParamsAIDynpost {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_AIDynpost); ok {
		return x.AIDynpost
	}
	return nil
}

func (x *SnapshotResult) GetSprite() *SnapshotParamsSprite {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Sprite); ok {
		return x.Sprite
	}
	return nil
}

func (x *SnapshotResult) GetSample() *SnapshotParamsSample {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Sample); ok {
		return x.Sample
	}
	return nil
}

type isSnapshotResult_SnapshotParams interface {
	isSnapshotResult_SnapshotParams()
}

type SnapshotResult_Poster struct {
	Poster *SnapshotParamsPoster `protobuf:"bytes,2,opt,name=Poster,proto3,oneof"`
}

type SnapshotResult_Dynpost struct {
	Dynpost *SnapshotParamsDynpost `protobuf:"bytes,3,opt,name=Dynpost,proto3,oneof"`
}

type SnapshotResult_AnimatedPoster struct {
	AnimatedPoster *SnapshotParamsAnimatedPoster `protobuf:"bytes,4,opt,name=AnimatedPoster,proto3,oneof"`
}

type SnapshotResult_AIDynpost struct {
	AIDynpost *SnapshotParamsAIDynpost `protobuf:"bytes,5,opt,name=AIDynpost,proto3,oneof"`
}

type SnapshotResult_Sprite struct {
	Sprite *SnapshotParamsSprite `protobuf:"bytes,6,opt,name=Sprite,proto3,oneof"`
}

type SnapshotResult_Sample struct {
	Sample *SnapshotParamsSample `protobuf:"bytes,7,opt,name=Sample,proto3,oneof"`
}

func (*SnapshotResult_Poster) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_Dynpost) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_AnimatedPoster) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_AIDynpost) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_Sprite) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_Sample) isSnapshotResult_SnapshotParams() {}

type VodWorkflowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectUrl      *DirectUrl          `protobuf:"bytes,1,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`
	RunId          string              `protobuf:"bytes,3,opt,name=RunId,proto3" json:"RunId,omitempty"`
	SpaceName      string              `protobuf:"bytes,4,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	TemplateId     string              `protobuf:"bytes,5,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	CallbackArgs   string              `protobuf:"bytes,6,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`
	Status         string              `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	TranscodeInfos []*VodTranscodeInfo `protobuf:"bytes,8,rep,name=TranscodeInfos,proto3" json:"TranscodeInfos,omitempty"`
	Snapshots      []*SnapshotResult   `protobuf:"bytes,9,rep,name=Snapshots,proto3" json:"Snapshots,omitempty"`
}

func (x *VodWorkflowResult) Reset() {
	*x = VodWorkflowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_workflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodWorkflowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodWorkflowResult) ProtoMessage() {}

func (x *VodWorkflowResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_workflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodWorkflowResult.ProtoReflect.Descriptor instead.
func (*VodWorkflowResult) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_workflow_proto_rawDescGZIP(), []int{29}
}

func (x *VodWorkflowResult) GetDirectUrl() *DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

func (x *VodWorkflowResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *VodWorkflowResult) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodWorkflowResult) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodWorkflowResult) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodWorkflowResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodWorkflowResult) GetTranscodeInfos() []*VodTranscodeInfo {
	if x != nil {
		return x.TranscodeInfos
	}
	return nil
}

func (x *VodWorkflowResult) GetSnapshots() []*SnapshotResult {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

var File_vod_business_vod_workflow_proto protoreflect.FileDescriptor

var file_vod_business_vod_workflow_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x6f, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x56, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x22, 0x47, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x56, 0x0a,
	0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x02, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x5e, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x5e, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x4c, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x56, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x56, 0x61, 0x72, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x04,
	0x43, 0x6c, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x43, 0x6c, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a,
	0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12,
	0x4a, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f,
	0x73, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f,
	0x73, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65,
	0x59, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x22, 0xb9,
	0x01, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x51, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x56, 0x51, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x0a, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x75, 0x64,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4c, 0x6f, 0x75, 0x64,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x61, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4d, 0x65,
	0x61, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x78,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x50, 0x72, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0xea, 0x05, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4a, 0x6f, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22,
	0xcc, 0x04, 0x0a, 0x23, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xf1,
	0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x79, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x7b, 0x0a, 0x17,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x49,
	0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfa, 0x01, 0x0a,
	0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53,
	0x70, 0x72, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x65, 0x6c,
	0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43,
	0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67,
	0x58, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x58,
	0x4c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba,
	0x04, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0e, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x57, 0x0a, 0x09, 0x41, 0x49, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x41, 0x49, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x41, 0x49, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x53, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x11,
	0x56, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x2a, 0x7a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x42, 0xcc,
	0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x6f, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x56, 0x6f,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xa0, 0x01,
	0x01, 0xd8, 0x01, 0x01, 0xca, 0x02, 0x20, 0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe2, 0x02, 0x23, 0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vod_business_vod_workflow_proto_rawDescOnce sync.Once
	file_vod_business_vod_workflow_proto_rawDescData = file_vod_business_vod_workflow_proto_rawDesc
)

func file_vod_business_vod_workflow_proto_rawDescGZIP() []byte {
	file_vod_business_vod_workflow_proto_rawDescOnce.Do(func() {
		file_vod_business_vod_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_vod_business_vod_workflow_proto_rawDescData)
	})
	return file_vod_business_vod_workflow_proto_rawDescData
}

var file_vod_business_vod_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vod_business_vod_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_vod_business_vod_workflow_proto_goTypes = []interface{}{
	(StageStatus)(0),                            // 0: Volcengine.Vod.Models.Business.StageStatus
	(*VodStartWorkflowResult)(nil),              // 1: Volcengine.Vod.Models.Business.VodStartWorkflowResult
	(*DirectUrl)(nil),                           // 2: Volcengine.Vod.Models.Business.DirectUrl
	(*WorkflowParams)(nil),                      // 3: Volcengine.Vod.Models.Business.WorkflowParams
	(*OverrideParams)(nil),                      // 4: Volcengine.Vod.Models.Business.OverrideParams
	(*LogoOverride)(nil),                        // 5: Volcengine.Vod.Models.Business.LogoOverride
	(*TranscodeVideoOverride)(nil),              // 6: Volcengine.Vod.Models.Business.TranscodeVideoOverride
	(*Clip)(nil),                                // 7: Volcengine.Vod.Models.Business.Clip
	(*TranscodeAudioOverride)(nil),              // 8: Volcengine.Vod.Models.Business.TranscodeAudioOverride
	(*SnapshotOverride)(nil),                    // 9: Volcengine.Vod.Models.Business.SnapshotOverride
	(*TranscodeResult)(nil),                     // 10: Volcengine.Vod.Models.Business.TranscodeResult
	(*Inspection)(nil),                          // 11: Volcengine.Vod.Models.Business.Inspection
	(*Quality)(nil),                             // 12: Volcengine.Vod.Models.Business.Quality
	(*DeLogoInfo)(nil),                          // 13: Volcengine.Vod.Models.Business.DeLogoInfo
	(*VisualQuality)(nil),                       // 14: Volcengine.Vod.Models.Business.VisualQuality
	(*VolumeInfo)(nil),                          // 15: Volcengine.Vod.Models.Business.VolumeInfo
	(*CategoryTagInfo)(nil),                     // 16: Volcengine.Vod.Models.Business.CategoryTagInfo
	(*VodListWorkflowExecutionResult)(nil),      // 17: Volcengine.Vod.Models.Business.VodListWorkflowExecutionResult
	(*WorkflowExecution)(nil),                   // 18: Volcengine.Vod.Models.Business.WorkflowExecution
	(*VodGetWorkflowExecutionDetailResult)(nil), // 19: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult
	(*ExecutionStage)(nil),                      // 20: Volcengine.Vod.Models.Business.ExecutionStage
	(*StageDetail)(nil),                         // 21: Volcengine.Vod.Models.Business.StageDetail
	(*TaskDetail)(nil),                          // 22: Volcengine.Vod.Models.Business.TaskDetail
	(*SnapshotParamsPoster)(nil),                // 23: Volcengine.Vod.Models.Business.SnapshotParamsPoster
	(*SnapshotParamsDynpost)(nil),               // 24: Volcengine.Vod.Models.Business.SnapshotParamsDynpost
	(*SnapshotParamsAIDynpost)(nil),             // 25: Volcengine.Vod.Models.Business.SnapshotParamsAIDynpost
	(*SnapshotParamsAnimatedPoster)(nil),        // 26: Volcengine.Vod.Models.Business.SnapshotParamsAnimatedPoster
	(*SnapshotParamsSprite)(nil),                // 27: Volcengine.Vod.Models.Business.SnapshotParamsSprite
	(*SnapshotParamsSample)(nil),                // 28: Volcengine.Vod.Models.Business.SnapshotParamsSample
	(*SnapshotResult)(nil),                      // 29: Volcengine.Vod.Models.Business.SnapshotResult
	(*VodWorkflowResult)(nil),                   // 30: Volcengine.Vod.Models.Business.VodWorkflowResult
	nil,                                         // 31: Volcengine.Vod.Models.Business.WorkflowParams.ConditionEntry
	nil,                                         // 32: Volcengine.Vod.Models.Business.LogoOverride.VarsEntry
	nil,                                         // 33: Volcengine.Vod.Models.Business.CategoryTagInfo.ParentInfoEntry
	(*timestamppb.Timestamp)(nil),               // 34: google.protobuf.Timestamp
	(*VodTranscodeInfo)(nil),                    // 35: Volcengine.Vod.Models.Business.VodTranscodeInfo
}
var file_vod_business_vod_workflow_proto_depIdxs = []int32{
	4,  // 0: Volcengine.Vod.Models.Business.WorkflowParams.OverrideParams:type_name -> Volcengine.Vod.Models.Business.OverrideParams
	31, // 1: Volcengine.Vod.Models.Business.WorkflowParams.Condition:type_name -> Volcengine.Vod.Models.Business.WorkflowParams.ConditionEntry
	5,  // 2: Volcengine.Vod.Models.Business.OverrideParams.Logo:type_name -> Volcengine.Vod.Models.Business.LogoOverride
	6,  // 3: Volcengine.Vod.Models.Business.OverrideParams.TranscodeVideo:type_name -> Volcengine.Vod.Models.Business.TranscodeVideoOverride
	8,  // 4: Volcengine.Vod.Models.Business.OverrideParams.TranscodeAudio:type_name -> Volcengine.Vod.Models.Business.TranscodeAudioOverride
	9,  // 5: Volcengine.Vod.Models.Business.OverrideParams.Snapshot:type_name -> Volcengine.Vod.Models.Business.SnapshotOverride
	32, // 6: Volcengine.Vod.Models.Business.LogoOverride.Vars:type_name -> Volcengine.Vod.Models.Business.LogoOverride.VarsEntry
	7,  // 7: Volcengine.Vod.Models.Business.TranscodeVideoOverride.Clip:type_name -> Volcengine.Vod.Models.Business.Clip
	7,  // 8: Volcengine.Vod.Models.Business.TranscodeAudioOverride.Clip:type_name -> Volcengine.Vod.Models.Business.Clip
	11, // 9: Volcengine.Vod.Models.Business.TranscodeResult.Inspection:type_name -> Volcengine.Vod.Models.Business.Inspection
	16, // 10: Volcengine.Vod.Models.Business.TranscodeResult.CategoryTags:type_name -> Volcengine.Vod.Models.Business.CategoryTagInfo
	12, // 11: Volcengine.Vod.Models.Business.Inspection.Quality:type_name -> Volcengine.Vod.Models.Business.Quality
	13, // 12: Volcengine.Vod.Models.Business.Inspection.DeLogo:type_name -> Volcengine.Vod.Models.Business.DeLogoInfo
	14, // 13: Volcengine.Vod.Models.Business.Quality.Visual:type_name -> Volcengine.Vod.Models.Business.VisualQuality
	15, // 14: Volcengine.Vod.Models.Business.Quality.VolumeInfo:type_name -> Volcengine.Vod.Models.Business.VolumeInfo
	33, // 15: Volcengine.Vod.Models.Business.CategoryTagInfo.ParentInfo:type_name -> Volcengine.Vod.Models.Business.CategoryTagInfo.ParentInfoEntry
	18, // 16: Volcengine.Vod.Models.Business.VodListWorkflowExecutionResult.Data:type_name -> Volcengine.Vod.Models.Business.WorkflowExecution
	34, // 17: Volcengine.Vod.Models.Business.WorkflowExecution.CreateTime:type_name -> google.protobuf.Timestamp
	34, // 18: Volcengine.Vod.Models.Business.WorkflowExecution.StartTime:type_name -> google.protobuf.Timestamp
	34, // 19: Volcengine.Vod.Models.Business.WorkflowExecution.EndTime:type_name -> google.protobuf.Timestamp
	3,  // 20: Volcengine.Vod.Models.Business.WorkflowExecution.Input:type_name -> Volcengine.Vod.Models.Business.WorkflowParams
	22, // 21: Volcengine.Vod.Models.Business.WorkflowExecution.TasksDetail:type_name -> Volcengine.Vod.Models.Business.TaskDetail
	2,  // 22: Volcengine.Vod.Models.Business.WorkflowExecution.DirectUrl:type_name -> Volcengine.Vod.Models.Business.DirectUrl
	20, // 23: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.Stages:type_name -> Volcengine.Vod.Models.Business.ExecutionStage
	34, // 24: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.CreateTime:type_name -> google.protobuf.Timestamp
	34, // 25: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.StartTime:type_name -> google.protobuf.Timestamp
	34, // 26: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.EndTime:type_name -> google.protobuf.Timestamp
	2,  // 27: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.DirectUrl:type_name -> Volcengine.Vod.Models.Business.DirectUrl
	21, // 28: Volcengine.Vod.Models.Business.ExecutionStage.StageDetail:type_name -> Volcengine.Vod.Models.Business.StageDetail
	34, // 29: Volcengine.Vod.Models.Business.ExecutionStage.StartTime:type_name -> google.protobuf.Timestamp
	34, // 30: Volcengine.Vod.Models.Business.ExecutionStage.EndTime:type_name -> google.protobuf.Timestamp
	0,  // 31: Volcengine.Vod.Models.Business.StageDetail.Status:type_name -> Volcengine.Vod.Models.Business.StageStatus
	34, // 32: Volcengine.Vod.Models.Business.StageDetail.StartTime:type_name -> google.protobuf.Timestamp
	34, // 33: Volcengine.Vod.Models.Business.StageDetail.EndTime:type_name -> google.protobuf.Timestamp
	0,  // 34: Volcengine.Vod.Models.Business.TaskDetail.Status:type_name -> Volcengine.Vod.Models.Business.StageStatus
	34, // 35: Volcengine.Vod.Models.Business.TaskDetail.StartTime:type_name -> google.protobuf.Timestamp
	34, // 36: Volcengine.Vod.Models.Business.TaskDetail.EndTime:type_name -> google.protobuf.Timestamp
	23, // 37: Volcengine.Vod.Models.Business.SnapshotResult.Poster:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsPoster
	24, // 38: Volcengine.Vod.Models.Business.SnapshotResult.Dynpost:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsDynpost
	26, // 39: Volcengine.Vod.Models.Business.SnapshotResult.AnimatedPoster:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsAnimatedPoster
	25, // 40: Volcengine.Vod.Models.Business.SnapshotResult.AIDynpost:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsAIDynpost
	27, // 41: Volcengine.Vod.Models.Business.SnapshotResult.Sprite:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsSprite
	28, // 42: Volcengine.Vod.Models.Business.SnapshotResult.Sample:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsSample
	2,  // 43: Volcengine.Vod.Models.Business.VodWorkflowResult.DirectUrl:type_name -> Volcengine.Vod.Models.Business.DirectUrl
	35, // 44: Volcengine.Vod.Models.Business.VodWorkflowResult.TranscodeInfos:type_name -> Volcengine.Vod.Models.Business.VodTranscodeInfo
	29, // 45: Volcengine.Vod.Models.Business.VodWorkflowResult.Snapshots:type_name -> Volcengine.Vod.Models.Business.SnapshotResult
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_vod_business_vod_workflow_proto_init() }
func file_vod_business_vod_workflow_proto_init() {
	if File_vod_business_vod_workflow_proto != nil {
		return
	}
	file_vod_business_vod_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vod_business_vod_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStartWorkflowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeVideoOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeAudioOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inspection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeLogoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisualQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListWorkflowExecutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetWorkflowExecutionDetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsDynpost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsAIDynpost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsAnimatedPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsSprite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_workflow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodWorkflowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vod_business_vod_workflow_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*SnapshotResult_Poster)(nil),
		(*SnapshotResult_Dynpost)(nil),
		(*SnapshotResult_AnimatedPoster)(nil),
		(*SnapshotResult_AIDynpost)(nil),
		(*SnapshotResult_Sprite)(nil),
		(*SnapshotResult_Sample)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vod_business_vod_workflow_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vod_business_vod_workflow_proto_goTypes,
		DependencyIndexes: file_vod_business_vod_workflow_proto_depIdxs,
		EnumInfos:         file_vod_business_vod_workflow_proto_enumTypes,
		MessageInfos:      file_vod_business_vod_workflow_proto_msgTypes,
	}.Build()
	File_vod_business_vod_workflow_proto = out.File
	file_vod_business_vod_workflow_proto_rawDesc = nil
	file_vod_business_vod_workflow_proto_goTypes = nil
	file_vod_business_vod_workflow_proto_depIdxs = nil
}
