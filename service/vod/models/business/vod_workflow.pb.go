// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.19.4
// source: volcengine/vod/business/vod_workflow.proto

package business

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StageStatus int32

const (
	StageStatus_Unknown   StageStatus = 0 // 未知
	StageStatus_Scheduled StageStatus = 1 // 等待调度
	StageStatus_Running   StageStatus = 2 // 执行中
	StageStatus_Canceled  StageStatus = 3 // 取消
	StageStatus_TimedOut  StageStatus = 4 // 超时
	StageStatus_Skipped   StageStatus = 5 // 跳过
	StageStatus_Completed StageStatus = 6 // 完成
	StageStatus_Failed    StageStatus = 7 // 失败
)

// Enum value maps for StageStatus.
var (
	StageStatus_name = map[int32]string{
		0: "Unknown",
		1: "Scheduled",
		2: "Running",
		3: "Canceled",
		4: "TimedOut",
		5: "Skipped",
		6: "Completed",
		7: "Failed",
	}
	StageStatus_value = map[string]int32{
		"Unknown":   0,
		"Scheduled": 1,
		"Running":   2,
		"Canceled":  3,
		"TimedOut":  4,
		"Skipped":   5,
		"Completed": 6,
		"Failed":    7,
	}
)

func (x StageStatus) Enum() *StageStatus {
	p := new(StageStatus)
	*p = x
	return p
}

func (x StageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_volcengine_vod_business_vod_workflow_proto_enumTypes[0].Descriptor()
}

func (StageStatus) Type() protoreflect.EnumType {
	return &file_volcengine_vod_business_vod_workflow_proto_enumTypes[0]
}

func (x StageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageStatus.Descriptor instead.
func (StageStatus) EnumDescriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{0}
}

type VodStartWorkflowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"` // 工作流执行Id
}

func (x *VodStartWorkflowResult) Reset() {
	*x = VodStartWorkflowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStartWorkflowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStartWorkflowResult) ProtoMessage() {}

func (x *VodStartWorkflowResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStartWorkflowResult.ProtoReflect.Descriptor instead.
func (*VodStartWorkflowResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *VodStartWorkflowResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type DirectUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`     // 文件名
	BucketName string `protobuf:"bytes,2,opt,name=BucketName,proto3" json:"BucketName,omitempty"` // Bucket名称
	SpaceName  string `protobuf:"bytes,3,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`   // 空间名
}

func (x *DirectUrl) Reset() {
	*x = DirectUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectUrl) ProtoMessage() {}

func (x *DirectUrl) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectUrl.ProtoReflect.Descriptor instead.
func (*DirectUrl) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *DirectUrl) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DirectUrl) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *DirectUrl) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type WorkflowParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverrideParams *OverrideParams `protobuf:"bytes,1,opt,name=OverrideParams,proto3" json:"OverrideParams,omitempty"`                                                                                // 覆盖参数
	Condition      map[string]bool `protobuf:"bytes,2,rep,name=Condition,proto3" json:"Condition,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 条件变量
}

func (x *WorkflowParams) Reset() {
	*x = WorkflowParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowParams) ProtoMessage() {}

func (x *WorkflowParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowParams.ProtoReflect.Descriptor instead.
func (*WorkflowParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowParams) GetOverrideParams() *OverrideParams {
	if x != nil {
		return x.OverrideParams
	}
	return nil
}

func (x *WorkflowParams) GetCondition() map[string]bool {
	if x != nil {
		return x.Condition
	}
	return nil
}

type OverrideParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo           []*LogoOverride           `protobuf:"bytes,1,rep,name=Logo,proto3" json:"Logo,omitempty"`                     // 水印覆盖参数
	TranscodeVideo []*TranscodeVideoOverride `protobuf:"bytes,2,rep,name=TranscodeVideo,proto3" json:"TranscodeVideo,omitempty"` // 视频转码覆盖参数
	TranscodeAudio []*TranscodeAudioOverride `protobuf:"bytes,3,rep,name=TranscodeAudio,proto3" json:"TranscodeAudio,omitempty"` // 音频转码覆盖参数
	Snapshot       []*SnapshotOverride       `protobuf:"bytes,4,rep,name=Snapshot,proto3" json:"Snapshot,omitempty"`             // 截图覆盖参数
	Enhance        *EnhanceOverride          `protobuf:"bytes,5,opt,name=Enhance,proto3" json:"Enhance,omitempty"`               // 增强覆盖参数
}

func (x *OverrideParams) Reset() {
	*x = OverrideParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideParams) ProtoMessage() {}

func (x *OverrideParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideParams.ProtoReflect.Descriptor instead.
func (*OverrideParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *OverrideParams) GetLogo() []*LogoOverride {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *OverrideParams) GetTranscodeVideo() []*TranscodeVideoOverride {
	if x != nil {
		return x.TranscodeVideo
	}
	return nil
}

func (x *OverrideParams) GetTranscodeAudio() []*TranscodeAudioOverride {
	if x != nil {
		return x.TranscodeAudio
	}
	return nil
}

func (x *OverrideParams) GetSnapshot() []*SnapshotOverride {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *OverrideParams) GetEnhance() *EnhanceOverride {
	if x != nil {
		return x.Enhance
	}
	return nil
}

type LogoOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string            `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                                                                             // 被覆盖的水印模板Id, 支持ALL
	Vars       map[string]string `protobuf:"bytes,2,rep,name=Vars,proto3" json:"Vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 自定义水印变量
}

func (x *LogoOverride) Reset() {
	*x = LogoOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoOverride) ProtoMessage() {}

func (x *LogoOverride) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoOverride.ProtoReflect.Descriptor instead.
func (*LogoOverride) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *LogoOverride) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *LogoOverride) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

type TranscodeVideoOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId     []string `protobuf:"bytes,1,rep,name=TemplateId,proto3" json:"TemplateId,omitempty"`           // 被覆盖的视频模板Id, 支持ALL
	Clip           *Clip    `protobuf:"bytes,2,opt,name=Clip,proto3" json:"Clip,omitempty"`                       // 裁剪参数
	OutputIndex    []int32  `protobuf:"varint,3,rep,packed,name=OutputIndex,proto3" json:"OutputIndex,omitempty"` // 模板组下标，仅对模板组生效
	FileName       string   `protobuf:"bytes,4,opt,name=FileName,proto3" json:"FileName,omitempty"`               // 文件名
	LogoTemplateId string   `protobuf:"bytes,5,opt,name=LogoTemplateId,proto3" json:"LogoTemplateId,omitempty"`   // 指定水印模板Id
}

func (x *TranscodeVideoOverride) Reset() {
	*x = TranscodeVideoOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeVideoOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoOverride) ProtoMessage() {}

func (x *TranscodeVideoOverride) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoOverride.ProtoReflect.Descriptor instead.
func (*TranscodeVideoOverride) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *TranscodeVideoOverride) GetTemplateId() []string {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *TranscodeVideoOverride) GetClip() *Clip {
	if x != nil {
		return x.Clip
	}
	return nil
}

func (x *TranscodeVideoOverride) GetOutputIndex() []int32 {
	if x != nil {
		return x.OutputIndex
	}
	return nil
}

func (x *TranscodeVideoOverride) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TranscodeVideoOverride) GetLogoTemplateId() string {
	if x != nil {
		return x.LogoTemplateId
	}
	return ""
}

type Clip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int32 `protobuf:"varint,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 开始时间 ms
	EndTime   int32 `protobuf:"varint,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间 ms
}

func (x *Clip) Reset() {
	*x = Clip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clip) ProtoMessage() {}

func (x *Clip) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clip.ProtoReflect.Descriptor instead.
func (*Clip) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *Clip) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Clip) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TranscodeAudioOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId []string `protobuf:"bytes,1,rep,name=TemplateId,proto3" json:"TemplateId,omitempty"` // 被覆盖的音频模板Id, 支持ALL
	Clip       *Clip    `protobuf:"bytes,2,opt,name=Clip,proto3" json:"Clip,omitempty"`
	FileName   string   `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"` // 文件名
}

func (x *TranscodeAudioOverride) Reset() {
	*x = TranscodeAudioOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeAudioOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeAudioOverride) ProtoMessage() {}

func (x *TranscodeAudioOverride) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeAudioOverride.ProtoReflect.Descriptor instead.
func (*TranscodeAudioOverride) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *TranscodeAudioOverride) GetTemplateId() []string {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *TranscodeAudioOverride) GetClip() *Clip {
	if x != nil {
		return x.Clip
	}
	return nil
}

func (x *TranscodeAudioOverride) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type SnapshotOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId     []string  `protobuf:"bytes,1,rep,name=TemplateId,proto3" json:"TemplateId,omitempty"`                 // 被覆盖的截图模板Id, 支持ALL
	OffsetTime     int32     `protobuf:"varint,2,opt,name=OffsetTime,proto3" json:"OffsetTime,omitempty"`                // 截图时间, 单位ms, AIDynpost和Sprite类型不支持
	OffsetTimeList []int32   `protobuf:"varint,3,rep,packed,name=OffsetTimeList,proto3" json:"OffsetTimeList,omitempty"` // 多Dynpost类型截取时间，单位ms
	FileName       string    `protobuf:"bytes,4,opt,name=FileName,proto3" json:"FileName,omitempty"`                     // 文件名
	FileIndex      string    `protobuf:"bytes,5,opt,name=FileIndex,proto3" json:"FileIndex,omitempty"`                   // index文件自定义路径
	SampleOffsets  []float32 `protobuf:"fixed32,6,rep,packed,name=SampleOffsets,proto3" json:"SampleOffsets,omitempty"`  //采样截图自定义采样时间点
	Width          *int32    `protobuf:"varint,7,opt,name=Width,proto3,oneof" json:"Width,omitempty"`                    // 截图宽度，单位：px；目前仅支持采样截图
	Height         *int32    `protobuf:"varint,8,opt,name=Height,proto3,oneof" json:"Height,omitempty"`                  // 截图高度，单位：px；目前仅支持采样截图
}

func (x *SnapshotOverride) Reset() {
	*x = SnapshotOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotOverride) ProtoMessage() {}

func (x *SnapshotOverride) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotOverride.ProtoReflect.Descriptor instead.
func (*SnapshotOverride) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *SnapshotOverride) GetTemplateId() []string {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *SnapshotOverride) GetOffsetTime() int32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *SnapshotOverride) GetOffsetTimeList() []int32 {
	if x != nil {
		return x.OffsetTimeList
	}
	return nil
}

func (x *SnapshotOverride) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SnapshotOverride) GetFileIndex() string {
	if x != nil {
		return x.FileIndex
	}
	return ""
}

func (x *SnapshotOverride) GetSampleOffsets() []float32 {
	if x != nil {
		return x.SampleOffsets
	}
	return nil
}

func (x *SnapshotOverride) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *SnapshotOverride) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type EnhanceOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageMode string `protobuf:"bytes,1,opt,name=StorageMode,proto3" json:"StorageMode,omitempty"` // 增强存储模式
	FileName    string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`       // 文件名
}

func (x *EnhanceOverride) Reset() {
	*x = EnhanceOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnhanceOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnhanceOverride) ProtoMessage() {}

func (x *EnhanceOverride) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnhanceOverride.ProtoReflect.Descriptor instead.
func (*EnhanceOverride) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *EnhanceOverride) GetStorageMode() string {
	if x != nil {
		return x.StorageMode
	}
	return ""
}

func (x *EnhanceOverride) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type TranscodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid          string             `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                   //视频id，为请求值
	Inspection   *Inspection        `protobuf:"bytes,2,opt,name=Inspection,proto3" json:"Inspection,omitempty"`     // 片源检测结果
	CategoryTags []*CategoryTagInfo `protobuf:"bytes,3,rep,name=CategoryTags,proto3" json:"CategoryTags,omitempty"` // 视频分类结果
}

func (x *TranscodeResult) Reset() {
	*x = TranscodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeResult) ProtoMessage() {}

func (x *TranscodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeResult.ProtoReflect.Descriptor instead.
func (*TranscodeResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *TranscodeResult) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *TranscodeResult) GetInspection() *Inspection {
	if x != nil {
		return x.Inspection
	}
	return nil
}

func (x *TranscodeResult) GetCategoryTags() []*CategoryTagInfo {
	if x != nil {
		return x.CategoryTags
	}
	return nil
}

type Inspection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality *Quality      `protobuf:"bytes,1,opt,name=Quality,proto3" json:"Quality,omitempty"` // 视频检测质量
	DeLogo  []*DeLogoInfo `protobuf:"bytes,2,rep,name=DeLogo,proto3" json:"DeLogo,omitempty"`   // 水印检测结果
}

func (x *Inspection) Reset() {
	*x = Inspection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inspection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inspection) ProtoMessage() {}

func (x *Inspection) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inspection.ProtoReflect.Descriptor instead.
func (*Inspection) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *Inspection) GetQuality() *Quality {
	if x != nil {
		return x.Quality
	}
	return nil
}

func (x *Inspection) GetDeLogo() []*DeLogoInfo {
	if x != nil {
		return x.DeLogo
	}
	return nil
}

type Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visual     *VisualQuality `protobuf:"bytes,1,opt,name=Visual,proto3" json:"Visual,omitempty"`         // 片源检测参数
	VolumeInfo *VolumeInfo    `protobuf:"bytes,2,opt,name=VolumeInfo,proto3" json:"VolumeInfo,omitempty"` // 音量
}

func (x *Quality) Reset() {
	*x = Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quality) ProtoMessage() {}

func (x *Quality) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quality.ProtoReflect.Descriptor instead.
func (*Quality) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *Quality) GetVisual() *VisualQuality {
	if x != nil {
		return x.Visual
	}
	return nil
}

func (x *Quality) GetVolumeInfo() *VolumeInfo {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

type DeLogoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorWidth  int64 `protobuf:"varint,1,opt,name=AnchorWidth,proto3" json:"AnchorWidth,omitempty"`   // Anchor基准宽度
	AnchorHeight int64 `protobuf:"varint,2,opt,name=AnchorHeight,proto3" json:"AnchorHeight,omitempty"` // Anchor基准宽度
	PosX         int64 `protobuf:"varint,3,opt,name=PosX,proto3" json:"PosX,omitempty"`                 // 水印左上角X坐标
	PosY         int64 `protobuf:"varint,4,opt,name=PosY,proto3" json:"PosY,omitempty"`                 // 水印左上角Y坐标
	SizeX        int64 `protobuf:"varint,5,opt,name=SizeX,proto3" json:"SizeX,omitempty"`               // 水印宽度
	SizeY        int64 `protobuf:"varint,6,opt,name=SizeY,proto3" json:"SizeY,omitempty"`               // 水印高度
}

func (x *DeLogoInfo) Reset() {
	*x = DeLogoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeLogoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeLogoInfo) ProtoMessage() {}

func (x *DeLogoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeLogoInfo.ProtoReflect.Descriptor instead.
func (*DeLogoInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *DeLogoInfo) GetAnchorWidth() int64 {
	if x != nil {
		return x.AnchorWidth
	}
	return 0
}

func (x *DeLogoInfo) GetAnchorHeight() int64 {
	if x != nil {
		return x.AnchorHeight
	}
	return 0
}

func (x *DeLogoInfo) GetPosX() int64 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *DeLogoInfo) GetPosY() int64 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *DeLogoInfo) GetSizeX() int64 {
	if x != nil {
		return x.SizeX
	}
	return 0
}

func (x *DeLogoInfo) GetSizeY() int64 {
	if x != nil {
		return x.SizeY
	}
	return 0
}

type VisualQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VQScore      float64 `protobuf:"fixed64,1,opt,name=VQScore,proto3" json:"VQScore,omitempty"`           // 视频质量评分
	Contrast     float64 `protobuf:"fixed64,2,opt,name=Contrast,proto3" json:"Contrast,omitempty"`         // 对比度
	Colorfulness float64 `protobuf:"fixed64,3,opt,name=Colorfulness,proto3" json:"Colorfulness,omitempty"` // 色彩
	Brightness   float64 `protobuf:"fixed64,4,opt,name=Brightness,proto3" json:"Brightness,omitempty"`     // 亮度
	Texture      float64 `protobuf:"fixed64,5,opt,name=Texture,proto3" json:"Texture,omitempty"`           // 纹理
	Noise        float64 `protobuf:"fixed64,6,opt,name=Noise,proto3" json:"Noise,omitempty"`               // 噪声
}

func (x *VisualQuality) Reset() {
	*x = VisualQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisualQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualQuality) ProtoMessage() {}

func (x *VisualQuality) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualQuality.ProtoReflect.Descriptor instead.
func (*VisualQuality) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *VisualQuality) GetVQScore() float64 {
	if x != nil {
		return x.VQScore
	}
	return 0
}

func (x *VisualQuality) GetContrast() float64 {
	if x != nil {
		return x.Contrast
	}
	return 0
}

func (x *VisualQuality) GetColorfulness() float64 {
	if x != nil {
		return x.Colorfulness
	}
	return 0
}

func (x *VisualQuality) GetBrightness() float64 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *VisualQuality) GetTexture() float64 {
	if x != nil {
		return x.Texture
	}
	return 0
}

func (x *VisualQuality) GetNoise() float64 {
	if x != nil {
		return x.Noise
	}
	return 0
}

type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loudness   float64 `protobuf:"fixed64,1,opt,name=Loudness,proto3" json:"Loudness,omitempty"`     // 响度, 单位：LUFS
	Peak       float64 `protobuf:"fixed64,2,opt,name=Peak,proto3" json:"Peak,omitempty"`             // 峰值，范围：（0, 1.0], 峰值归一化
	MeanVolume float64 `protobuf:"fixed64,3,opt,name=MeanVolume,proto3" json:"MeanVolume,omitempty"` // 均值，单位：dB
	MaxVolume  float64 `protobuf:"fixed64,4,opt,name=MaxVolume,proto3" json:"MaxVolume,omitempty"`   // 最大值，单位：dB
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *VolumeInfo) GetLoudness() float64 {
	if x != nil {
		return x.Loudness
	}
	return 0
}

func (x *VolumeInfo) GetPeak() float64 {
	if x != nil {
		return x.Peak
	}
	return 0
}

func (x *VolumeInfo) GetMeanVolume() float64 {
	if x != nil {
		return x.MeanVolume
	}
	return 0
}

func (x *VolumeInfo) GetMaxVolume() float64 {
	if x != nil {
		return x.MaxVolume
	}
	return 0
}

type CategoryTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId      int64             `protobuf:"varint,1,opt,name=TagId,proto3" json:"TagId,omitempty"`                                                                                                  // 标签id
	Prob       float64           `protobuf:"fixed64,2,opt,name=Prob,proto3" json:"Prob,omitempty"`                                                                                                   // 置信度
	TagName    string            `protobuf:"bytes,3,opt,name=TagName,proto3" json:"TagName,omitempty"`                                                                                               // 标签名称
	Level      int64             `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`                                                                                                  // 等级
	ParentInfo map[string]string `protobuf:"bytes,5,rep,name=ParentInfo,proto3" json:"ParentInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 父节点标签信息
}

func (x *CategoryTagInfo) Reset() {
	*x = CategoryTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTagInfo) ProtoMessage() {}

func (x *CategoryTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTagInfo.ProtoReflect.Descriptor instead.
func (*CategoryTagInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *CategoryTagInfo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CategoryTagInfo) GetProb() float64 {
	if x != nil {
		return x.Prob
	}
	return 0
}

func (x *CategoryTagInfo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CategoryTagInfo) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CategoryTagInfo) GetParentInfo() map[string]string {
	if x != nil {
		return x.ParentInfo
	}
	return nil
}

type VodListWorkflowExecutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*WorkflowExecution `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`              // 工作流记录
	TotalCount int32                `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"` // 符合条件的结果总数
	PageSize   int32                `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`     // 分页大小
	Offset     int32                `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`         // 数据偏移量
}

func (x *VodListWorkflowExecutionResult) Reset() {
	*x = VodListWorkflowExecutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListWorkflowExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListWorkflowExecutionResult) ProtoMessage() {}

func (x *VodListWorkflowExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListWorkflowExecutionResult.ProtoReflect.Descriptor instead.
func (*VodListWorkflowExecutionResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *VodListWorkflowExecutionResult) GetData() []*WorkflowExecution {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VodListWorkflowExecutionResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodListWorkflowExecutionResult) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VodListWorkflowExecutionResult) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type WorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId             string                 `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`                          //工作流执行ID
	Vid               string                 `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                              // 视频ID
	TemplateId        string                 `protobuf:"bytes,3,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                //模板ID，即工作流ID
	TemplateName      string                 `protobuf:"bytes,4,opt,name=TemplateName,proto3" json:"TemplateName,omitempty"`            // 工作流名称
	SpaceName         string                 `protobuf:"bytes,5,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`                  // 空间名
	Status            string                 `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`                        //执行状态
	TaskListId        string                 `protobuf:"bytes,7,opt,name=TaskListId,proto3" json:"TaskListId,omitempty"`                //任务队列ID
	EnableLowPriority bool                   `protobuf:"varint,8,opt,name=EnableLowPriority,proto3" json:"EnableLowPriority,omitempty"` //闲时转码
	JobSource         string                 `protobuf:"bytes,9,opt,name=JobSource,proto3" json:"JobSource,omitempty"`                  //任务来源
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`               //任务创建时间，即触发任务的时间，格式：rfc3339。如果不存在则为空
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                 //任务开始执行时间，即任务被调度到的时间戳，可用于计算执行时间，格式：rfc3339。如果不存在则为空
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                     //任务结束时间，可用于排序，格式：格式：rfc3339。如果不存在则为空
	Input             *WorkflowParams        `protobuf:"bytes,13,opt,name=Input,proto3" json:"Input,omitempty"`                         //工作流输入参数
	Priority          int32                  `protobuf:"varint,14,opt,name=Priority,proto3" json:"Priority,omitempty"`                  //转码记录优先级
	CallbackArgs      string                 `protobuf:"bytes,15,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`           //回调透传参数
	TasksDetail       []*TaskDetail          `protobuf:"bytes,16,rep,name=TasksDetail,proto3" json:"TasksDetail,omitempty"`             // 子任务详情
	DirectUrl         *DirectUrl             `protobuf:"bytes,17,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`
}

func (x *WorkflowExecution) Reset() {
	*x = WorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecution) ProtoMessage() {}

func (x *WorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecution.ProtoReflect.Descriptor instead.
func (*WorkflowExecution) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *WorkflowExecution) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowExecution) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *WorkflowExecution) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *WorkflowExecution) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *WorkflowExecution) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *WorkflowExecution) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowExecution) GetTaskListId() string {
	if x != nil {
		return x.TaskListId
	}
	return ""
}

func (x *WorkflowExecution) GetEnableLowPriority() bool {
	if x != nil {
		return x.EnableLowPriority
	}
	return false
}

func (x *WorkflowExecution) GetJobSource() string {
	if x != nil {
		return x.JobSource
	}
	return ""
}

func (x *WorkflowExecution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WorkflowExecution) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WorkflowExecution) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WorkflowExecution) GetInput() *WorkflowParams {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowExecution) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *WorkflowExecution) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *WorkflowExecution) GetTasksDetail() []*TaskDetail {
	if x != nil {
		return x.TasksDetail
	}
	return nil
}

func (x *WorkflowExecution) GetDirectUrl() *DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

type VodGetWorkflowExecutionDetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId             string                 `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Vid               string                 `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`
	TemplateId        string                 `protobuf:"bytes,3,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	SpaceName         string                 `protobuf:"bytes,4,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Status            string                 `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	TaskListId        string                 `protobuf:"bytes,7,opt,name=TaskListId,proto3" json:"TaskListId,omitempty"`
	EnableLowPriority bool                   `protobuf:"varint,8,opt,name=EnableLowPriority,proto3" json:"EnableLowPriority,omitempty"`
	JobSource         string                 `protobuf:"bytes,9,opt,name=JobSource,proto3" json:"JobSource,omitempty"`
	Stages            []*ExecutionStage      `protobuf:"bytes,10,rep,name=Stages,proto3" json:"Stages,omitempty"` // 执行阶段
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	DirectUrl         *DirectUrl             `protobuf:"bytes,14,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`
}

func (x *VodGetWorkflowExecutionDetailResult) Reset() {
	*x = VodGetWorkflowExecutionDetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetWorkflowExecutionDetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetWorkflowExecutionDetailResult) ProtoMessage() {}

func (x *VodGetWorkflowExecutionDetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetWorkflowExecutionDetailResult.ProtoReflect.Descriptor instead.
func (*VodGetWorkflowExecutionDetailResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{19}
}

func (x *VodGetWorkflowExecutionDetailResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetTaskListId() string {
	if x != nil {
		return x.TaskListId
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetEnableLowPriority() bool {
	if x != nil {
		return x.EnableLowPriority
	}
	return false
}

func (x *VodGetWorkflowExecutionDetailResult) GetJobSource() string {
	if x != nil {
		return x.JobSource
	}
	return ""
}

func (x *VodGetWorkflowExecutionDetailResult) GetStages() []*ExecutionStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *VodGetWorkflowExecutionDetailResult) GetDirectUrl() *DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

type ExecutionStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"` // 阶段名称
	StageDetail []*StageDetail         `protobuf:"bytes,2,rep,name=StageDetail,proto3" json:"StageDetail,omitempty"` // 阶段详情
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`     // 阶段开始时间
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`         // 阶段完成时间
}

func (x *ExecutionStage) Reset() {
	*x = ExecutionStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStage) ProtoMessage() {}

func (x *ExecutionStage) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStage.ProtoReflect.Descriptor instead.
func (*ExecutionStage) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{20}
}

func (x *ExecutionStage) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExecutionStage) GetStageDetail() []*StageDetail {
	if x != nil {
		return x.StageDetail
	}
	return nil
}

func (x *ExecutionStage) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ExecutionStage) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type StageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Type        string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	TemplateId  string                 `protobuf:"bytes,4,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	Status      StageStatus            `protobuf:"varint,5,opt,name=Status,proto3,enum=Volcengine.Vod.Models.Business.StageStatus" json:"Status,omitempty"`
	ErrorCode   int64                  `protobuf:"varint,6,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"` // 错误码
	Message     string                 `protobuf:"bytes,7,opt,name=Message,proto3" json:"Message,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 阶段开始时间
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 阶段结束时间
}

func (x *StageDetail) Reset() {
	*x = StageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageDetail) ProtoMessage() {}

func (x *StageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageDetail.ProtoReflect.Descriptor instead.
func (*StageDetail) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *StageDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StageDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StageDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StageDetail) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *StageDetail) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_Unknown
}

func (x *StageDetail) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StageDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StageDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StageDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type TaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,2,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`                                        // 模板名称
	TemplateId  string                 `protobuf:"bytes,4,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                                          // 模板id
	Status      StageStatus            `protobuf:"varint,5,opt,name=Status,proto3,enum=Volcengine.Vod.Models.Business.StageStatus" json:"Status,omitempty"` // 执行状态：Running|Canceled|Skipped|Completed|Failed
	Progress    int32                  `protobuf:"varint,8,opt,name=Progress,proto3" json:"Progress,omitempty"`                                             // 执行进度
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                                            // 阶段开始时间
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                                               // 阶段结束时间
}

func (x *TaskDetail) Reset() {
	*x = TaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetail) ProtoMessage() {}

func (x *TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetail.ProtoReflect.Descriptor instead.
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *TaskDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TaskDetail) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TaskDetail) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_Unknown
}

func (x *TaskDetail) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TaskDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type SnapshotParamsPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsPoster) Reset() {
	*x = SnapshotParamsPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsPoster) ProtoMessage() {}

func (x *SnapshotParamsPoster) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsPoster.ProtoReflect.Descriptor instead.
func (*SnapshotParamsPoster) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *SnapshotParamsPoster) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsPoster) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsPoster) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsPoster) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsDynpost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsDynpost) Reset() {
	*x = SnapshotParamsDynpost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsDynpost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsDynpost) ProtoMessage() {}

func (x *SnapshotParamsDynpost) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsDynpost.ProtoReflect.Descriptor instead.
func (*SnapshotParamsDynpost) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{24}
}

func (x *SnapshotParamsDynpost) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsDynpost) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsDynpost) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsDynpost) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsAIDynpost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsAIDynpost) Reset() {
	*x = SnapshotParamsAIDynpost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsAIDynpost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsAIDynpost) ProtoMessage() {}

func (x *SnapshotParamsAIDynpost) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsAIDynpost.ProtoReflect.Descriptor instead.
func (*SnapshotParamsAIDynpost) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{25}
}

func (x *SnapshotParamsAIDynpost) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsAIDynpost) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsAIDynpost) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsAIDynpost) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsAnimatedPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUri string `protobuf:"bytes,2,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SnapshotParamsAnimatedPoster) Reset() {
	*x = SnapshotParamsAnimatedPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsAnimatedPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsAnimatedPoster) ProtoMessage() {}

func (x *SnapshotParamsAnimatedPoster) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsAnimatedPoster.ProtoReflect.Descriptor instead.
func (*SnapshotParamsAnimatedPoster) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{26}
}

func (x *SnapshotParamsAnimatedPoster) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsAnimatedPoster) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *SnapshotParamsAnimatedPoster) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsAnimatedPoster) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SnapshotParamsSprite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string   `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUris  []string `protobuf:"bytes,2,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"`
	CellWidth  int32    `protobuf:"varint,3,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`
	CellHeight int32    `protobuf:"varint,4,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"`
	ImgXLen    int32    `protobuf:"varint,5,opt,name=ImgXLen,proto3" json:"ImgXLen,omitempty"`
	ImgYLen    int32    `protobuf:"varint,6,opt,name=ImgYLen,proto3" json:"ImgYLen,omitempty"`
	Interval   float32  `protobuf:"fixed32,7,opt,name=Interval,proto3" json:"Interval,omitempty"`
	CaptureNum int32    `protobuf:"varint,8,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
}

func (x *SnapshotParamsSprite) Reset() {
	*x = SnapshotParamsSprite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsSprite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsSprite) ProtoMessage() {}

func (x *SnapshotParamsSprite) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsSprite.ProtoReflect.Descriptor instead.
func (*SnapshotParamsSprite) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{27}
}

func (x *SnapshotParamsSprite) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsSprite) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

func (x *SnapshotParamsSprite) GetCellWidth() int32 {
	if x != nil {
		return x.CellWidth
	}
	return 0
}

func (x *SnapshotParamsSprite) GetCellHeight() int32 {
	if x != nil {
		return x.CellHeight
	}
	return 0
}

func (x *SnapshotParamsSprite) GetImgXLen() int32 {
	if x != nil {
		return x.ImgXLen
	}
	return 0
}

func (x *SnapshotParamsSprite) GetImgYLen() int32 {
	if x != nil {
		return x.ImgYLen
	}
	return 0
}

func (x *SnapshotParamsSprite) GetInterval() float32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SnapshotParamsSprite) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

type SnapshotParamsSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string    `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	StoreUris  []string  `protobuf:"bytes,2,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"`
	Width      int32     `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height     int32     `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	Interval   float32   `protobuf:"fixed32,5,opt,name=Interval,proto3" json:"Interval,omitempty"`
	CaptureNum int32     `protobuf:"varint,6,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
	Duration   float32   `protobuf:"fixed32,7,opt,name=Duration,proto3" json:"Duration,omitempty"`
	IndexUri   string    `protobuf:"bytes,8,opt,name=IndexUri,proto3" json:"IndexUri,omitempty"`
	Offsets    []float32 `protobuf:"fixed32,9,rep,packed,name=Offsets,proto3" json:"Offsets,omitempty"` //采样截图自定义采样时间点
}

func (x *SnapshotParamsSample) Reset() {
	*x = SnapshotParamsSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotParamsSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotParamsSample) ProtoMessage() {}

func (x *SnapshotParamsSample) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotParamsSample.ProtoReflect.Descriptor instead.
func (*SnapshotParamsSample) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{28}
}

func (x *SnapshotParamsSample) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SnapshotParamsSample) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

func (x *SnapshotParamsSample) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SnapshotParamsSample) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SnapshotParamsSample) GetInterval() float32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SnapshotParamsSample) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *SnapshotParamsSample) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SnapshotParamsSample) GetIndexUri() string {
	if x != nil {
		return x.IndexUri
	}
	return ""
}

func (x *SnapshotParamsSample) GetOffsets() []float32 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type SnapshotResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Types that are assignable to SnapshotParams:
	//	*SnapshotResult_Poster
	//	*SnapshotResult_Dynpost
	//	*SnapshotResult_AnimatedPoster
	//	*SnapshotResult_AIDynpost
	//	*SnapshotResult_Sprite
	//	*SnapshotResult_Sample
	SnapshotParams isSnapshotResult_SnapshotParams `protobuf_oneof:"SnapshotParams"`
}

func (x *SnapshotResult) Reset() {
	*x = SnapshotResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResult) ProtoMessage() {}

func (x *SnapshotResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResult.ProtoReflect.Descriptor instead.
func (*SnapshotResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{29}
}

func (x *SnapshotResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *SnapshotResult) GetSnapshotParams() isSnapshotResult_SnapshotParams {
	if m != nil {
		return m.SnapshotParams
	}
	return nil
}

func (x *SnapshotResult) GetPoster() *SnapshotParamsPoster {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Poster); ok {
		return x.Poster
	}
	return nil
}

func (x *SnapshotResult) GetDynpost() *SnapshotParamsDynpost {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Dynpost); ok {
		return x.Dynpost
	}
	return nil
}

func (x *SnapshotResult) GetAnimatedPoster() *SnapshotParamsAnimatedPoster {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_AnimatedPoster); ok {
		return x.AnimatedPoster
	}
	return nil
}

func (x *SnapshotResult) GetAIDynpost() *SnapshotParamsAIDynpost {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_AIDynpost); ok {
		return x.AIDynpost
	}
	return nil
}

func (x *SnapshotResult) GetSprite() *SnapshotParamsSprite {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Sprite); ok {
		return x.Sprite
	}
	return nil
}

func (x *SnapshotResult) GetSample() *SnapshotParamsSample {
	if x, ok := x.GetSnapshotParams().(*SnapshotResult_Sample); ok {
		return x.Sample
	}
	return nil
}

type isSnapshotResult_SnapshotParams interface {
	isSnapshotResult_SnapshotParams()
}

type SnapshotResult_Poster struct {
	Poster *SnapshotParamsPoster `protobuf:"bytes,2,opt,name=Poster,proto3,oneof"`
}

type SnapshotResult_Dynpost struct {
	Dynpost *SnapshotParamsDynpost `protobuf:"bytes,3,opt,name=Dynpost,proto3,oneof"`
}

type SnapshotResult_AnimatedPoster struct {
	AnimatedPoster *SnapshotParamsAnimatedPoster `protobuf:"bytes,4,opt,name=AnimatedPoster,proto3,oneof"`
}

type SnapshotResult_AIDynpost struct {
	AIDynpost *SnapshotParamsAIDynpost `protobuf:"bytes,5,opt,name=AIDynpost,proto3,oneof"`
}

type SnapshotResult_Sprite struct {
	Sprite *SnapshotParamsSprite `protobuf:"bytes,6,opt,name=Sprite,proto3,oneof"`
}

type SnapshotResult_Sample struct {
	Sample *SnapshotParamsSample `protobuf:"bytes,7,opt,name=Sample,proto3,oneof"`
}

func (*SnapshotResult_Poster) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_Dynpost) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_AnimatedPoster) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_AIDynpost) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_Sprite) isSnapshotResult_SnapshotParams() {}

func (*SnapshotResult_Sample) isSnapshotResult_SnapshotParams() {}

type VodWorkflowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectUrl      *DirectUrl          `protobuf:"bytes,1,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`
	Vid            string              `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`
	RunId          string              `protobuf:"bytes,3,opt,name=RunId,proto3" json:"RunId,omitempty"`
	SpaceName      string              `protobuf:"bytes,4,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	TemplateId     string              `protobuf:"bytes,5,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	CallbackArgs   string              `protobuf:"bytes,6,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`
	Status         string              `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	TranscodeInfos []*VodTranscodeInfo `protobuf:"bytes,8,rep,name=TranscodeInfos,proto3" json:"TranscodeInfos,omitempty"`
	Snapshots      []*SnapshotResult   `protobuf:"bytes,9,rep,name=Snapshots,proto3" json:"Snapshots,omitempty"`
	ClientToken    string              `protobuf:"bytes,10,opt,name=ClientToken,proto3" json:"ClientToken,omitempty"`
}

func (x *VodWorkflowResult) Reset() {
	*x = VodWorkflowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodWorkflowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodWorkflowResult) ProtoMessage() {}

func (x *VodWorkflowResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodWorkflowResult.ProtoReflect.Descriptor instead.
func (*VodWorkflowResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{30}
}

func (x *VodWorkflowResult) GetDirectUrl() *DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

func (x *VodWorkflowResult) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodWorkflowResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *VodWorkflowResult) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodWorkflowResult) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodWorkflowResult) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodWorkflowResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodWorkflowResult) GetTranscodeInfos() []*VodTranscodeInfo {
	if x != nil {
		return x.TranscodeInfos
	}
	return nil
}

func (x *VodWorkflowResult) GetSnapshots() []*SnapshotResult {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *VodWorkflowResult) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type TaskTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId               string                    `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"` // 模板Id
	SpaceName                string                    `protobuf:"bytes,2,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`   // 空间名
	Name                     string                    `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`             // 模板名称
	Description              string                    `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Type                     string                    `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`         // 多个值通过 ',' 连接
	CommitId                 string                    `protobuf:"bytes,9,opt,name=CommitId,proto3" json:"CommitId,omitempty"` // 版本Id
	Hash                     string                    `protobuf:"bytes,11,opt,name=Hash,proto3" json:"Hash,omitempty"`
	CreatedAt                *timestamppb.Timestamp    `protobuf:"bytes,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                *timestamppb.Timestamp    `protobuf:"bytes,13,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskType                 string                    `protobuf:"bytes,14,opt,name=TaskType,proto3" json:"TaskType,omitempty"` // TranscodeVideo|ByteHD|TranscodeAudio|Snapshot
	TranscodeVideoTaskParams *TranscodeVideoTaskParams `protobuf:"bytes,15,opt,name=TranscodeVideoTaskParams,proto3" json:"TranscodeVideoTaskParams,omitempty"`
	ByteHDTaskParams         *ByteHDTaskParams         `protobuf:"bytes,18,opt,name=ByteHDTaskParams,proto3" json:"ByteHDTaskParams,omitempty"`
	TranscodeAudioTaskParams *TranscodeAudioTaskParams `protobuf:"bytes,19,opt,name=TranscodeAudioTaskParams,proto3" json:"TranscodeAudioTaskParams,omitempty"`
	SnapshotTaskParams       *SnapshotTaskParams       `protobuf:"bytes,20,opt,name=SnapshotTaskParams,proto3" json:"SnapshotTaskParams,omitempty"`
}

func (x *TaskTemplate) Reset() {
	*x = TaskTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTemplate) ProtoMessage() {}

func (x *TaskTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTemplate.ProtoReflect.Descriptor instead.
func (*TaskTemplate) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{31}
}

func (x *TaskTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TaskTemplate) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *TaskTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskTemplate) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *TaskTemplate) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TaskTemplate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskTemplate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskTemplate) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskTemplate) GetTranscodeVideoTaskParams() *TranscodeVideoTaskParams {
	if x != nil {
		return x.TranscodeVideoTaskParams
	}
	return nil
}

func (x *TaskTemplate) GetByteHDTaskParams() *ByteHDTaskParams {
	if x != nil {
		return x.ByteHDTaskParams
	}
	return nil
}

func (x *TaskTemplate) GetTranscodeAudioTaskParams() *TranscodeAudioTaskParams {
	if x != nil {
		return x.TranscodeAudioTaskParams
	}
	return nil
}

func (x *TaskTemplate) GetSnapshotTaskParams() *SnapshotTaskParams {
	if x != nil {
		return x.SnapshotTaskParams
	}
	return nil
}

type TranscodeVideoTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscodeTemplateType string      `protobuf:"bytes,1,opt,name=TranscodeTemplateType,proto3" json:"TranscodeTemplateType,omitempty"`
	Container             string      `protobuf:"bytes,2,opt,name=Container,proto3" json:"Container,omitempty"`
	Video                 *Video      `protobuf:"bytes,3,opt,name=Video,proto3" json:"Video,omitempty"`
	Audio                 *Audio      `protobuf:"bytes,4,opt,name=Audio,proto3" json:"Audio,omitempty"`
	DisableAudio          bool        `protobuf:"varint,5,opt,name=DisableAudio,proto3" json:"DisableAudio,omitempty"`
	Quality               string      `protobuf:"bytes,6,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Vladder               string      `protobuf:"bytes,7,opt,name=Vladder,proto3" json:"Vladder,omitempty"`
	UserTag               string      `protobuf:"bytes,8,opt,name=UserTag,proto3" json:"UserTag,omitempty"`
	Encrypt               bool        `protobuf:"varint,9,opt,name=Encrypt,proto3" json:"Encrypt,omitempty"`
	Encryption            *Encryption `protobuf:"bytes,10,opt,name=Encryption,proto3" json:"Encryption,omitempty"`
	Segment               *Segment    `protobuf:"bytes,11,opt,name=Segment,proto3" json:"Segment,omitempty"`
	Volume                *Volume     `protobuf:"bytes,12,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *TranscodeVideoTaskParams) Reset() {
	*x = TranscodeVideoTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeVideoTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoTaskParams) ProtoMessage() {}

func (x *TranscodeVideoTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoTaskParams.ProtoReflect.Descriptor instead.
func (*TranscodeVideoTaskParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{32}
}

func (x *TranscodeVideoTaskParams) GetTranscodeTemplateType() string {
	if x != nil {
		return x.TranscodeTemplateType
	}
	return ""
}

func (x *TranscodeVideoTaskParams) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *TranscodeVideoTaskParams) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TranscodeVideoTaskParams) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *TranscodeVideoTaskParams) GetDisableAudio() bool {
	if x != nil {
		return x.DisableAudio
	}
	return false
}

func (x *TranscodeVideoTaskParams) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *TranscodeVideoTaskParams) GetVladder() string {
	if x != nil {
		return x.Vladder
	}
	return ""
}

func (x *TranscodeVideoTaskParams) GetUserTag() string {
	if x != nil {
		return x.UserTag
	}
	return ""
}

func (x *TranscodeVideoTaskParams) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *TranscodeVideoTaskParams) GetEncryption() *Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *TranscodeVideoTaskParams) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *TranscodeVideoTaskParams) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type ByteHDTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container    string      `protobuf:"bytes,1,opt,name=Container,proto3" json:"Container,omitempty"`
	Video        *Video      `protobuf:"bytes,2,opt,name=Video,proto3" json:"Video,omitempty"`
	Audio        *Audio      `protobuf:"bytes,3,opt,name=Audio,proto3" json:"Audio,omitempty"`
	DisableAudio bool        `protobuf:"varint,4,opt,name=DisableAudio,proto3" json:"DisableAudio,omitempty"`
	Quality      string      `protobuf:"bytes,5,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Vladder      string      `protobuf:"bytes,6,opt,name=Vladder,proto3" json:"Vladder,omitempty"`
	UserTag      string      `protobuf:"bytes,7,opt,name=UserTag,proto3" json:"UserTag,omitempty"`
	Encrypt      bool        `protobuf:"varint,8,opt,name=Encrypt,proto3" json:"Encrypt,omitempty"`
	Encryption   *Encryption `protobuf:"bytes,9,opt,name=Encryption,proto3" json:"Encryption,omitempty"`
	Segment      *Segment    `protobuf:"bytes,10,opt,name=Segment,proto3" json:"Segment,omitempty"`
	Volume       *Volume     `protobuf:"bytes,11,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *ByteHDTaskParams) Reset() {
	*x = ByteHDTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteHDTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteHDTaskParams) ProtoMessage() {}

func (x *ByteHDTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteHDTaskParams.ProtoReflect.Descriptor instead.
func (*ByteHDTaskParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{33}
}

func (x *ByteHDTaskParams) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *ByteHDTaskParams) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *ByteHDTaskParams) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *ByteHDTaskParams) GetDisableAudio() bool {
	if x != nil {
		return x.DisableAudio
	}
	return false
}

func (x *ByteHDTaskParams) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *ByteHDTaskParams) GetVladder() string {
	if x != nil {
		return x.Vladder
	}
	return ""
}

func (x *ByteHDTaskParams) GetUserTag() string {
	if x != nil {
		return x.UserTag
	}
	return ""
}

func (x *ByteHDTaskParams) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *ByteHDTaskParams) GetEncryption() *Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *ByteHDTaskParams) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *ByteHDTaskParams) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type TranscodeAudioTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container  string      `protobuf:"bytes,1,opt,name=Container,proto3" json:"Container,omitempty"`
	Audio      *Audio      `protobuf:"bytes,2,opt,name=Audio,proto3" json:"Audio,omitempty"`
	Quality    string      `protobuf:"bytes,3,opt,name=Quality,proto3" json:"Quality,omitempty"`
	UserTag    string      `protobuf:"bytes,4,opt,name=UserTag,proto3" json:"UserTag,omitempty"`
	Encrypt    bool        `protobuf:"varint,5,opt,name=Encrypt,proto3" json:"Encrypt,omitempty"`
	Encryption *Encryption `protobuf:"bytes,6,opt,name=Encryption,proto3" json:"Encryption,omitempty"`
	Segment    *Segment    `protobuf:"bytes,7,opt,name=Segment,proto3" json:"Segment,omitempty"`
	Volume     *Volume     `protobuf:"bytes,8,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *TranscodeAudioTaskParams) Reset() {
	*x = TranscodeAudioTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeAudioTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeAudioTaskParams) ProtoMessage() {}

func (x *TranscodeAudioTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeAudioTaskParams.ProtoReflect.Descriptor instead.
func (*TranscodeAudioTaskParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{34}
}

func (x *TranscodeAudioTaskParams) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *TranscodeAudioTaskParams) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *TranscodeAudioTaskParams) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *TranscodeAudioTaskParams) GetUserTag() string {
	if x != nil {
		return x.UserTag
	}
	return ""
}

func (x *TranscodeAudioTaskParams) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *TranscodeAudioTaskParams) GetEncryption() *Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *TranscodeAudioTaskParams) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *TranscodeAudioTaskParams) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type SnapshotTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                         string                        `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	PosterSnapshotParams         *PosterSnapshotParams         `protobuf:"bytes,2,opt,name=PosterSnapshotParams,proto3" json:"PosterSnapshotParams,omitempty"`
	DynpostSnapshotParams        *DynpostSnapshotParams        `protobuf:"bytes,3,opt,name=DynpostSnapshotParams,proto3" json:"DynpostSnapshotParams,omitempty"`
	AnimatedPosterSnapshotParams *AnimatedPosterSnapshotParams `protobuf:"bytes,4,opt,name=AnimatedPosterSnapshotParams,proto3" json:"AnimatedPosterSnapshotParams,omitempty"`
	SpriteSnapshotParams         *SpriteSnapshotParams         `protobuf:"bytes,5,opt,name=SpriteSnapshotParams,proto3" json:"SpriteSnapshotParams,omitempty"`
	SampleSnapshotParams         *SampleSnapshotParams         `protobuf:"bytes,7,opt,name=SampleSnapshotParams,proto3" json:"SampleSnapshotParams,omitempty"`
}

func (x *SnapshotTaskParams) Reset() {
	*x = SnapshotTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotTaskParams) ProtoMessage() {}

func (x *SnapshotTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotTaskParams.ProtoReflect.Descriptor instead.
func (*SnapshotTaskParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{35}
}

func (x *SnapshotTaskParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SnapshotTaskParams) GetPosterSnapshotParams() *PosterSnapshotParams {
	if x != nil {
		return x.PosterSnapshotParams
	}
	return nil
}

func (x *SnapshotTaskParams) GetDynpostSnapshotParams() *DynpostSnapshotParams {
	if x != nil {
		return x.DynpostSnapshotParams
	}
	return nil
}

func (x *SnapshotTaskParams) GetAnimatedPosterSnapshotParams() *AnimatedPosterSnapshotParams {
	if x != nil {
		return x.AnimatedPosterSnapshotParams
	}
	return nil
}

func (x *SnapshotTaskParams) GetSpriteSnapshotParams() *SpriteSnapshotParams {
	if x != nil {
		return x.SpriteSnapshotParams
	}
	return nil
}

func (x *SnapshotTaskParams) GetSampleSnapshotParams() *SampleSnapshotParams {
	if x != nil {
		return x.SampleSnapshotParams
	}
	return nil
}

type PosterSnapshotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	ResAdapt   bool   `protobuf:"varint,2,opt,name=ResAdapt,proto3" json:"ResAdapt,omitempty"`
	ResLimit   int32  `protobuf:"varint,3,opt,name=ResLimit,proto3" json:"ResLimit,omitempty"`
	Width      int32  `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
	Height     int32  `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	OffsetTime int32  `protobuf:"varint,6,opt,name=OffsetTime,proto3" json:"OffsetTime,omitempty"`
	// 填充类型
	FillType string `protobuf:"bytes,7,opt,name=FillType,proto3" json:"FillType,omitempty"`
}

func (x *PosterSnapshotParams) Reset() {
	*x = PosterSnapshotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterSnapshotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterSnapshotParams) ProtoMessage() {}

func (x *PosterSnapshotParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterSnapshotParams.ProtoReflect.Descriptor instead.
func (*PosterSnapshotParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{36}
}

func (x *PosterSnapshotParams) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PosterSnapshotParams) GetResAdapt() bool {
	if x != nil {
		return x.ResAdapt
	}
	return false
}

func (x *PosterSnapshotParams) GetResLimit() int32 {
	if x != nil {
		return x.ResLimit
	}
	return 0
}

func (x *PosterSnapshotParams) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PosterSnapshotParams) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PosterSnapshotParams) GetOffsetTime() int32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *PosterSnapshotParams) GetFillType() string {
	if x != nil {
		return x.FillType
	}
	return ""
}

type DynpostSnapshotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string  `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	ResAdapt   bool    `protobuf:"varint,2,opt,name=ResAdapt,proto3" json:"ResAdapt,omitempty"`
	ResLimit   int32   `protobuf:"varint,3,opt,name=ResLimit,proto3" json:"ResLimit,omitempty"`
	Width      int32   `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
	Height     int32   `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	OffsetTime int32   `protobuf:"varint,6,opt,name=OffsetTime,proto3" json:"OffsetTime,omitempty"`
	Duration   int32   `protobuf:"varint,7,opt,name=Duration,proto3" json:"Duration,omitempty"`
	CaptureFps float32 `protobuf:"fixed32,8,opt,name=CaptureFps,proto3" json:"CaptureFps,omitempty"`
	Speed      float32 `protobuf:"fixed32,9,opt,name=Speed,proto3" json:"Speed,omitempty"`
	// 填充类型
	FillType string `protobuf:"bytes,10,opt,name=FillType,proto3" json:"FillType,omitempty"`
}

func (x *DynpostSnapshotParams) Reset() {
	*x = DynpostSnapshotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynpostSnapshotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynpostSnapshotParams) ProtoMessage() {}

func (x *DynpostSnapshotParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynpostSnapshotParams.ProtoReflect.Descriptor instead.
func (*DynpostSnapshotParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{37}
}

func (x *DynpostSnapshotParams) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *DynpostSnapshotParams) GetResAdapt() bool {
	if x != nil {
		return x.ResAdapt
	}
	return false
}

func (x *DynpostSnapshotParams) GetResLimit() int32 {
	if x != nil {
		return x.ResLimit
	}
	return 0
}

func (x *DynpostSnapshotParams) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DynpostSnapshotParams) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DynpostSnapshotParams) GetOffsetTime() int32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *DynpostSnapshotParams) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DynpostSnapshotParams) GetCaptureFps() float32 {
	if x != nil {
		return x.CaptureFps
	}
	return 0
}

func (x *DynpostSnapshotParams) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DynpostSnapshotParams) GetFillType() string {
	if x != nil {
		return x.FillType
	}
	return ""
}

type AnimatedPosterSnapshotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string  `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	ResAdapt   bool    `protobuf:"varint,2,opt,name=ResAdapt,proto3" json:"ResAdapt,omitempty"`
	ResLimit   int32   `protobuf:"varint,3,opt,name=ResLimit,proto3" json:"ResLimit,omitempty"`
	Width      int32   `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
	Height     int32   `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	OffsetTime int32   `protobuf:"varint,6,opt,name=OffsetTime,proto3" json:"OffsetTime,omitempty"`
	CaptureFps float32 `protobuf:"fixed32,7,opt,name=CaptureFps,proto3" json:"CaptureFps,omitempty"`
	CaptureNum int32   `protobuf:"varint,8,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
	// 填充类型
	FillType string `protobuf:"bytes,9,opt,name=FillType,proto3" json:"FillType,omitempty"`
}

func (x *AnimatedPosterSnapshotParams) Reset() {
	*x = AnimatedPosterSnapshotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimatedPosterSnapshotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimatedPosterSnapshotParams) ProtoMessage() {}

func (x *AnimatedPosterSnapshotParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimatedPosterSnapshotParams.ProtoReflect.Descriptor instead.
func (*AnimatedPosterSnapshotParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{38}
}

func (x *AnimatedPosterSnapshotParams) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *AnimatedPosterSnapshotParams) GetResAdapt() bool {
	if x != nil {
		return x.ResAdapt
	}
	return false
}

func (x *AnimatedPosterSnapshotParams) GetResLimit() int32 {
	if x != nil {
		return x.ResLimit
	}
	return 0
}

func (x *AnimatedPosterSnapshotParams) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AnimatedPosterSnapshotParams) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AnimatedPosterSnapshotParams) GetOffsetTime() int32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *AnimatedPosterSnapshotParams) GetCaptureFps() float32 {
	if x != nil {
		return x.CaptureFps
	}
	return 0
}

func (x *AnimatedPosterSnapshotParams) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *AnimatedPosterSnapshotParams) GetFillType() string {
	if x != nil {
		return x.FillType
	}
	return ""
}

type SpriteSnapshotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	CellWidth  int32  `protobuf:"varint,2,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`
	CellHeight int32  `protobuf:"varint,3,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"`
	ImgXLen    int32  `protobuf:"varint,4,opt,name=ImgXLen,proto3" json:"ImgXLen,omitempty"`
	ImgYLen    int32  `protobuf:"varint,5,opt,name=ImgYLen,proto3" json:"ImgYLen,omitempty"`
	Interval   int32  `protobuf:"varint,6,opt,name=Interval,proto3" json:"Interval,omitempty"`
	OffsetTime int32  `protobuf:"varint,7,opt,name=OffsetTime,proto3" json:"OffsetTime,omitempty"`
	CaptureNum int32  `protobuf:"varint,8,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
	ResAdapt   bool   `protobuf:"varint,9,opt,name=ResAdapt,proto3" json:"ResAdapt,omitempty"`
	ResLimit   int32  `protobuf:"varint,10,opt,name=ResLimit,proto3" json:"ResLimit,omitempty"`
	// 填充类型
	FillType string `protobuf:"bytes,11,opt,name=FillType,proto3" json:"FillType,omitempty"`
}

func (x *SpriteSnapshotParams) Reset() {
	*x = SpriteSnapshotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpriteSnapshotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpriteSnapshotParams) ProtoMessage() {}

func (x *SpriteSnapshotParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpriteSnapshotParams.ProtoReflect.Descriptor instead.
func (*SpriteSnapshotParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{39}
}

func (x *SpriteSnapshotParams) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SpriteSnapshotParams) GetCellWidth() int32 {
	if x != nil {
		return x.CellWidth
	}
	return 0
}

func (x *SpriteSnapshotParams) GetCellHeight() int32 {
	if x != nil {
		return x.CellHeight
	}
	return 0
}

func (x *SpriteSnapshotParams) GetImgXLen() int32 {
	if x != nil {
		return x.ImgXLen
	}
	return 0
}

func (x *SpriteSnapshotParams) GetImgYLen() int32 {
	if x != nil {
		return x.ImgYLen
	}
	return 0
}

func (x *SpriteSnapshotParams) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SpriteSnapshotParams) GetOffsetTime() int32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *SpriteSnapshotParams) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *SpriteSnapshotParams) GetResAdapt() bool {
	if x != nil {
		return x.ResAdapt
	}
	return false
}

func (x *SpriteSnapshotParams) GetResLimit() int32 {
	if x != nil {
		return x.ResLimit
	}
	return 0
}

func (x *SpriteSnapshotParams) GetFillType() string {
	if x != nil {
		return x.FillType
	}
	return ""
}

type SampleSnapshotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format      string    `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	ResAdapt    bool      `protobuf:"varint,2,opt,name=ResAdapt,proto3" json:"ResAdapt,omitempty"`
	ResLimit    int32     `protobuf:"varint,3,opt,name=ResLimit,proto3" json:"ResLimit,omitempty"`
	Width       int32     `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
	Height      int32     `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	CaptureNum  int32     `protobuf:"varint,6,opt,name=CaptureNum,proto3" json:"CaptureNum,omitempty"`
	CaptureMode int32     `protobuf:"varint,7,opt,name=CaptureMode,proto3" json:"CaptureMode,omitempty"`
	Interval    float64   `protobuf:"fixed64,8,opt,name=Interval,proto3" json:"Interval,omitempty"`
	OutMode     string    `protobuf:"bytes,9,opt,name=OutMode,proto3" json:"OutMode,omitempty"`
	FillType    string    `protobuf:"bytes,10,opt,name=FillType,proto3" json:"FillType,omitempty"`
	Offsets     []float32 `protobuf:"fixed32,11,rep,packed,name=Offsets,proto3" json:"Offsets,omitempty"` //采样截图自定义采样时间点
}

func (x *SampleSnapshotParams) Reset() {
	*x = SampleSnapshotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleSnapshotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleSnapshotParams) ProtoMessage() {}

func (x *SampleSnapshotParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleSnapshotParams.ProtoReflect.Descriptor instead.
func (*SampleSnapshotParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{40}
}

func (x *SampleSnapshotParams) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SampleSnapshotParams) GetResAdapt() bool {
	if x != nil {
		return x.ResAdapt
	}
	return false
}

func (x *SampleSnapshotParams) GetResLimit() int32 {
	if x != nil {
		return x.ResLimit
	}
	return 0
}

func (x *SampleSnapshotParams) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SampleSnapshotParams) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SampleSnapshotParams) GetCaptureNum() int32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *SampleSnapshotParams) GetCaptureMode() int32 {
	if x != nil {
		return x.CaptureMode
	}
	return 0
}

func (x *SampleSnapshotParams) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SampleSnapshotParams) GetOutMode() string {
	if x != nil {
		return x.OutMode
	}
	return ""
}

func (x *SampleSnapshotParams) GetFillType() string {
	if x != nil {
		return x.FillType
	}
	return ""
}

func (x *SampleSnapshotParams) GetOffsets() []float32 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type VodTaskTemplateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskTemplate *TaskTemplate `protobuf:"bytes,2,opt,name=TaskTemplate,proto3" json:"TaskTemplate,omitempty"`
}

func (x *VodTaskTemplateResult) Reset() {
	*x = VodTaskTemplateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodTaskTemplateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodTaskTemplateResult) ProtoMessage() {}

func (x *VodTaskTemplateResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodTaskTemplateResult.ProtoReflect.Descriptor instead.
func (*VodTaskTemplateResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{41}
}

func (x *VodTaskTemplateResult) GetTaskTemplate() *TaskTemplate {
	if x != nil {
		return x.TaskTemplate
	}
	return nil
}

type VodListTaskTemplateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32           `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int32           `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Total  int64           `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Data   []*TaskTemplate `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *VodListTaskTemplateResult) Reset() {
	*x = VodListTaskTemplateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListTaskTemplateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListTaskTemplateResult) ProtoMessage() {}

func (x *VodListTaskTemplateResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListTaskTemplateResult.ProtoReflect.Descriptor instead.
func (*VodListTaskTemplateResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{42}
}

func (x *VodListTaskTemplateResult) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VodListTaskTemplateResult) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodListTaskTemplateResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VodListTaskTemplateResult) GetData() []*TaskTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type WorkflowTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId  string                 `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`   // 模板Id
	SpaceName   string                 `protobuf:"bytes,2,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`     // 空间名
	Name        string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`               // 模板名称
	Description string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"` // 模板描述
	Type        string                 `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`               // 多个值通过 ',' 连接
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CommitId    string                 `protobuf:"bytes,14,opt,name=CommitId,proto3" json:"CommitId,omitempty"`     // 模板版本
	Activities  []*Activity            `protobuf:"bytes,19,rep,name=Activities,proto3" json:"Activities,omitempty"` // 任务集合
}

func (x *WorkflowTemplate) Reset() {
	*x = WorkflowTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplate) ProtoMessage() {}

func (x *WorkflowTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplate.ProtoReflect.Descriptor instead.
func (*WorkflowTemplate) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{43}
}

func (x *WorkflowTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *WorkflowTemplate) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *WorkflowTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WorkflowTemplate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkflowTemplate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WorkflowTemplate) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *WorkflowTemplate) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId        string             `protobuf:"bytes,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`                // 任务Id
	Name              string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                            // 任务名称
	Description       string             `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`              // 任务描述
	Type              string             `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`                            // 任务类型，支持Transcode｜Snapshot｜End
	SnapshotActivity  *SnapshotActivity  `protobuf:"bytes,12,opt,name=SnapshotActivity,proto3" json:"SnapshotActivity,omitempty"`   // 截图任务
	EndActivity       *EndActivity       `protobuf:"bytes,19,opt,name=EndActivity,proto3" json:"EndActivity,omitempty"`             // 自动发布
	TranscodeActivity *TranscodeActivity `protobuf:"bytes,23,opt,name=TranscodeActivity,proto3" json:"TranscodeActivity,omitempty"` // 转码任务
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{44}
}

func (x *Activity) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Activity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Activity) GetSnapshotActivity() *SnapshotActivity {
	if x != nil {
		return x.SnapshotActivity
	}
	return nil
}

func (x *Activity) GetEndActivity() *EndActivity {
	if x != nil {
		return x.EndActivity
	}
	return nil
}

func (x *Activity) GetTranscodeActivity() *TranscodeActivity {
	if x != nil {
		return x.TranscodeActivity
	}
	return nil
}

type TranscodeActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string                           `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	Enhance    *TranscodeActivity_EnhanceParams `protobuf:"bytes,2,opt,name=Enhance,proto3" json:"Enhance,omitempty"`
	Logo       *TranscodeActivity_LogoParams    `protobuf:"bytes,3,opt,name=Logo,proto3" json:"Logo,omitempty"`
	FileName   string                           `protobuf:"bytes,5,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Parallel   *ParallelParams                  `protobuf:"bytes,6,opt,name=Parallel,proto3" json:"Parallel,omitempty"`   // 分片转码配置
	Condition  *Condition                       `protobuf:"bytes,7,opt,name=Condition,proto3" json:"Condition,omitempty"` // 条件转码配置
}

func (x *TranscodeActivity) Reset() {
	*x = TranscodeActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeActivity) ProtoMessage() {}

func (x *TranscodeActivity) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeActivity.ProtoReflect.Descriptor instead.
func (*TranscodeActivity) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{45}
}

func (x *TranscodeActivity) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TranscodeActivity) GetEnhance() *TranscodeActivity_EnhanceParams {
	if x != nil {
		return x.Enhance
	}
	return nil
}

func (x *TranscodeActivity) GetLogo() *TranscodeActivity_LogoParams {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *TranscodeActivity) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TranscodeActivity) GetParallel() *ParallelParams {
	if x != nil {
		return x.Parallel
	}
	return nil
}

func (x *TranscodeActivity) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type SnapshotActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string     `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"` // 任务模板Id
	FileName   string     `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Condition  *Condition `protobuf:"bytes,3,opt,name=Condition,proto3" json:"Condition,omitempty"` // 条件转码配置
}

func (x *SnapshotActivity) Reset() {
	*x = SnapshotActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotActivity) ProtoMessage() {}

func (x *SnapshotActivity) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotActivity.ProtoReflect.Descriptor instead.
func (*SnapshotActivity) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{46}
}

func (x *SnapshotActivity) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *SnapshotActivity) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SnapshotActivity) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type EndActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscodeEvent string `protobuf:"bytes,1,opt,name=TranscodeEvent,proto3" json:"TranscodeEvent,omitempty"` // 转码发布条件 AllSuccess|OneSuccess
}

func (x *EndActivity) Reset() {
	*x = EndActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndActivity) ProtoMessage() {}

func (x *EndActivity) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndActivity.ProtoReflect.Descriptor instead.
func (*EndActivity) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{47}
}

func (x *EndActivity) GetTranscodeEvent() string {
	if x != nil {
		return x.TranscodeEvent
	}
	return ""
}

type VodWorkflowTemplateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplate *WorkflowTemplate `protobuf:"bytes,2,opt,name=WorkflowTemplate,proto3" json:"WorkflowTemplate,omitempty"`
}

func (x *VodWorkflowTemplateResult) Reset() {
	*x = VodWorkflowTemplateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodWorkflowTemplateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodWorkflowTemplateResult) ProtoMessage() {}

func (x *VodWorkflowTemplateResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodWorkflowTemplateResult.ProtoReflect.Descriptor instead.
func (*VodWorkflowTemplateResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{48}
}

func (x *VodWorkflowTemplateResult) GetWorkflowTemplate() *WorkflowTemplate {
	if x != nil {
		return x.WorkflowTemplate
	}
	return nil
}

type VodListWorkflowTemplateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32               `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int32               `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Total  int64               `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Data   []*WorkflowTemplate `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *VodListWorkflowTemplateResult) Reset() {
	*x = VodListWorkflowTemplateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListWorkflowTemplateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListWorkflowTemplateResult) ProtoMessage() {}

func (x *VodListWorkflowTemplateResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListWorkflowTemplateResult.ProtoReflect.Descriptor instead.
func (*VodListWorkflowTemplateResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{49}
}

func (x *VodListWorkflowTemplateResult) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VodListWorkflowTemplateResult) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodListWorkflowTemplateResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VodListWorkflowTemplateResult) GetData() []*WorkflowTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type LogoTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId      string                 `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	SpaceName       string                 `protobuf:"bytes,2,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Description     string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Type            string                 `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Hash            string                 `protobuf:"bytes,11,opt,name=Hash,proto3" json:"Hash,omitempty"`
	LogoType        string                 `protobuf:"bytes,12,opt,name=LogoType,proto3" json:"LogoType,omitempty"`
	Logos           []*AdaptLogo           `protobuf:"bytes,13,rep,name=Logos,proto3" json:"Logos,omitempty"`
	Concats         []*AdaptConcat         `protobuf:"bytes,14,rep,name=Concats,proto3" json:"Concats,omitempty"`
	HiddenWatermark *HiddenWatermarkAdd    `protobuf:"bytes,15,opt,name=HiddenWatermark,proto3" json:"HiddenWatermark,omitempty"`
}

func (x *LogoTemplate) Reset() {
	*x = LogoTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoTemplate) ProtoMessage() {}

func (x *LogoTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoTemplate.ProtoReflect.Descriptor instead.
func (*LogoTemplate) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{50}
}

func (x *LogoTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *LogoTemplate) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *LogoTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogoTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogoTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogoTemplate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LogoTemplate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LogoTemplate) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LogoTemplate) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *LogoTemplate) GetLogos() []*AdaptLogo {
	if x != nil {
		return x.Logos
	}
	return nil
}

func (x *LogoTemplate) GetConcats() []*AdaptConcat {
	if x != nil {
		return x.Concats
	}
	return nil
}

func (x *LogoTemplate) GetHiddenWatermark() *HiddenWatermarkAdd {
	if x != nil {
		return x.HiddenWatermark
	}
	return nil
}

type AdaptLogo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorSize *AnchorSize       `protobuf:"bytes,1,opt,name=AnchorSize,proto3" json:"AnchorSize,omitempty"`
	Logos      []*LogoDefinition `protobuf:"bytes,2,rep,name=Logos,proto3" json:"Logos,omitempty"`
}

func (x *AdaptLogo) Reset() {
	*x = AdaptLogo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptLogo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptLogo) ProtoMessage() {}

func (x *AdaptLogo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptLogo.ProtoReflect.Descriptor instead.
func (*AdaptLogo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{51}
}

func (x *AdaptLogo) GetAnchorSize() *AnchorSize {
	if x != nil {
		return x.AnchorSize
	}
	return nil
}

func (x *AdaptLogo) GetLogos() []*LogoDefinition {
	if x != nil {
		return x.Logos
	}
	return nil
}

type AnchorSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *AnchorSize) Reset() {
	*x = AnchorSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorSize) ProtoMessage() {}

func (x *AnchorSize) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorSize.ProtoReflect.Descriptor instead.
func (*AnchorSize) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{52}
}

func (x *AnchorSize) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AnchorSize) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ImageLogoDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid          string  `protobuf:"bytes,1,opt,name=Mid,proto3" json:"Mid,omitempty"`
	StartTime    int32   `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime      int32   `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Locate       string  `protobuf:"bytes,4,opt,name=Locate,proto3" json:"Locate,omitempty"`
	PosX         int32   `protobuf:"varint,5,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY         int32   `protobuf:"varint,6,opt,name=PosY,proto3" json:"PosY,omitempty"`
	SizeX        int32   `protobuf:"varint,7,opt,name=SizeX,proto3" json:"SizeX,omitempty"`
	SizeY        int32   `protobuf:"varint,8,opt,name=SizeY,proto3" json:"SizeY,omitempty"`
	LoopTimes    int32   `protobuf:"varint,9,opt,name=LoopTimes,proto3" json:"LoopTimes,omitempty"` //循环次数
	RepeatLast   bool    `protobuf:"varint,10,opt,name=RepeatLast,proto3" json:"RepeatLast,omitempty"`
	Transparency int32   `protobuf:"varint,11,opt,name=Transparency,proto3" json:"Transparency,omitempty"` //透明度
	PosRatioX    float64 `protobuf:"fixed64,12,opt,name=PosRatioX,proto3" json:"PosRatioX,omitempty"`
	PosRatioY    float64 `protobuf:"fixed64,13,opt,name=PosRatioY,proto3" json:"PosRatioY,omitempty"`
	SizeRatioX   float64 `protobuf:"fixed64,14,opt,name=SizeRatioX,proto3" json:"SizeRatioX,omitempty"`
	SizeRatioY   float64 `protobuf:"fixed64,15,opt,name=SizeRatioY,proto3" json:"SizeRatioY,omitempty"`
}

func (x *ImageLogoDefinition) Reset() {
	*x = ImageLogoDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageLogoDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageLogoDefinition) ProtoMessage() {}

func (x *ImageLogoDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageLogoDefinition.ProtoReflect.Descriptor instead.
func (*ImageLogoDefinition) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{53}
}

func (x *ImageLogoDefinition) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *ImageLogoDefinition) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ImageLogoDefinition) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ImageLogoDefinition) GetLocate() string {
	if x != nil {
		return x.Locate
	}
	return ""
}

func (x *ImageLogoDefinition) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *ImageLogoDefinition) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *ImageLogoDefinition) GetSizeX() int32 {
	if x != nil {
		return x.SizeX
	}
	return 0
}

func (x *ImageLogoDefinition) GetSizeY() int32 {
	if x != nil {
		return x.SizeY
	}
	return 0
}

func (x *ImageLogoDefinition) GetLoopTimes() int32 {
	if x != nil {
		return x.LoopTimes
	}
	return 0
}

func (x *ImageLogoDefinition) GetRepeatLast() bool {
	if x != nil {
		return x.RepeatLast
	}
	return false
}

func (x *ImageLogoDefinition) GetTransparency() int32 {
	if x != nil {
		return x.Transparency
	}
	return 0
}

func (x *ImageLogoDefinition) GetPosRatioX() float64 {
	if x != nil {
		return x.PosRatioX
	}
	return 0
}

func (x *ImageLogoDefinition) GetPosRatioY() float64 {
	if x != nil {
		return x.PosRatioY
	}
	return 0
}

func (x *ImageLogoDefinition) GetSizeRatioX() float64 {
	if x != nil {
		return x.SizeRatioX
	}
	return 0
}

func (x *ImageLogoDefinition) GetSizeRatioY() float64 {
	if x != nil {
		return x.SizeRatioY
	}
	return 0
}

type VideoLogoDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid          string  `protobuf:"bytes,1,opt,name=Mid,proto3" json:"Mid,omitempty"`
	StartTime    int32   `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime      int32   `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	LoopTimes    int32   `protobuf:"varint,4,opt,name=LoopTimes,proto3" json:"LoopTimes,omitempty"`
	RepeatLast   bool    `protobuf:"varint,5,opt,name=RepeatLast,proto3" json:"RepeatLast,omitempty"`
	Locate       string  `protobuf:"bytes,6,opt,name=Locate,proto3" json:"Locate,omitempty"`
	PosX         int32   `protobuf:"varint,7,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY         int32   `protobuf:"varint,8,opt,name=PosY,proto3" json:"PosY,omitempty"`
	SizeX        int32   `protobuf:"varint,9,opt,name=SizeX,proto3" json:"SizeX,omitempty"`
	SizeY        int32   `protobuf:"varint,10,opt,name=SizeY,proto3" json:"SizeY,omitempty"`
	Transparency int32   `protobuf:"varint,11,opt,name=Transparency,proto3" json:"Transparency,omitempty"`
	PosRatioX    float64 `protobuf:"fixed64,12,opt,name=PosRatioX,proto3" json:"PosRatioX,omitempty"`
	PosRatioY    float64 `protobuf:"fixed64,13,opt,name=PosRatioY,proto3" json:"PosRatioY,omitempty"`
	SizeRatioX   float64 `protobuf:"fixed64,14,opt,name=SizeRatioX,proto3" json:"SizeRatioX,omitempty"`
	SizeRatioY   float64 `protobuf:"fixed64,15,opt,name=SizeRatioY,proto3" json:"SizeRatioY,omitempty"`
}

func (x *VideoLogoDefinition) Reset() {
	*x = VideoLogoDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoLogoDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoLogoDefinition) ProtoMessage() {}

func (x *VideoLogoDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoLogoDefinition.ProtoReflect.Descriptor instead.
func (*VideoLogoDefinition) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{54}
}

func (x *VideoLogoDefinition) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *VideoLogoDefinition) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VideoLogoDefinition) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VideoLogoDefinition) GetLoopTimes() int32 {
	if x != nil {
		return x.LoopTimes
	}
	return 0
}

func (x *VideoLogoDefinition) GetRepeatLast() bool {
	if x != nil {
		return x.RepeatLast
	}
	return false
}

func (x *VideoLogoDefinition) GetLocate() string {
	if x != nil {
		return x.Locate
	}
	return ""
}

func (x *VideoLogoDefinition) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *VideoLogoDefinition) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *VideoLogoDefinition) GetSizeX() int32 {
	if x != nil {
		return x.SizeX
	}
	return 0
}

func (x *VideoLogoDefinition) GetSizeY() int32 {
	if x != nil {
		return x.SizeY
	}
	return 0
}

func (x *VideoLogoDefinition) GetTransparency() int32 {
	if x != nil {
		return x.Transparency
	}
	return 0
}

func (x *VideoLogoDefinition) GetPosRatioX() float64 {
	if x != nil {
		return x.PosRatioX
	}
	return 0
}

func (x *VideoLogoDefinition) GetPosRatioY() float64 {
	if x != nil {
		return x.PosRatioY
	}
	return 0
}

func (x *VideoLogoDefinition) GetSizeRatioX() float64 {
	if x != nil {
		return x.SizeRatioX
	}
	return 0
}

func (x *VideoLogoDefinition) GetSizeRatioY() float64 {
	if x != nil {
		return x.SizeRatioY
	}
	return 0
}

type TextLogoDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string  `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	FontType   string  `protobuf:"bytes,2,opt,name=FontType,proto3" json:"FontType,omitempty"`
	FontSize   int32   `protobuf:"varint,3,opt,name=FontSize,proto3" json:"FontSize,omitempty"`
	FontColor  string  `protobuf:"bytes,4,opt,name=FontColor,proto3" json:"FontColor,omitempty"`
	StartTime  int32   `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime    int32   `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Locate     string  `protobuf:"bytes,7,opt,name=Locate,proto3" json:"Locate,omitempty"`
	PosX       int32   `protobuf:"varint,8,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY       int32   `protobuf:"varint,9,opt,name=PosY,proto3" json:"PosY,omitempty"`
	SizeX      int32   `protobuf:"varint,10,opt,name=SizeX,proto3" json:"SizeX,omitempty"`
	SizeY      int32   `protobuf:"varint,11,opt,name=SizeY,proto3" json:"SizeY,omitempty"`
	PosRatioX  float64 `protobuf:"fixed64,12,opt,name=PosRatioX,proto3" json:"PosRatioX,omitempty"`
	PosRatioY  float64 `protobuf:"fixed64,13,opt,name=PosRatioY,proto3" json:"PosRatioY,omitempty"`
	SizeRatioX float64 `protobuf:"fixed64,14,opt,name=SizeRatioX,proto3" json:"SizeRatioX,omitempty"`
	SizeRatioY float64 `protobuf:"fixed64,15,opt,name=SizeRatioY,proto3" json:"SizeRatioY,omitempty"`
}

func (x *TextLogoDefinition) Reset() {
	*x = TextLogoDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextLogoDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextLogoDefinition) ProtoMessage() {}

func (x *TextLogoDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextLogoDefinition.ProtoReflect.Descriptor instead.
func (*TextLogoDefinition) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{55}
}

func (x *TextLogoDefinition) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TextLogoDefinition) GetFontType() string {
	if x != nil {
		return x.FontType
	}
	return ""
}

func (x *TextLogoDefinition) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *TextLogoDefinition) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *TextLogoDefinition) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TextLogoDefinition) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TextLogoDefinition) GetLocate() string {
	if x != nil {
		return x.Locate
	}
	return ""
}

func (x *TextLogoDefinition) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *TextLogoDefinition) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *TextLogoDefinition) GetSizeX() int32 {
	if x != nil {
		return x.SizeX
	}
	return 0
}

func (x *TextLogoDefinition) GetSizeY() int32 {
	if x != nil {
		return x.SizeY
	}
	return 0
}

func (x *TextLogoDefinition) GetPosRatioX() float64 {
	if x != nil {
		return x.PosRatioX
	}
	return 0
}

func (x *TextLogoDefinition) GetPosRatioY() float64 {
	if x != nil {
		return x.PosRatioY
	}
	return 0
}

func (x *TextLogoDefinition) GetSizeRatioX() float64 {
	if x != nil {
		return x.SizeRatioX
	}
	return 0
}

func (x *TextLogoDefinition) GetSizeRatioY() float64 {
	if x != nil {
		return x.SizeRatioY
	}
	return 0
}

type LogoDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string               `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ImageLogoDefinition *ImageLogoDefinition `protobuf:"bytes,2,opt,name=ImageLogoDefinition,proto3" json:"ImageLogoDefinition,omitempty"`
	VideoLogoDefinition *VideoLogoDefinition `protobuf:"bytes,3,opt,name=VideoLogoDefinition,proto3" json:"VideoLogoDefinition,omitempty"`
	TextLogoDefinition  *TextLogoDefinition  `protobuf:"bytes,4,opt,name=TextLogoDefinition,proto3" json:"TextLogoDefinition,omitempty"`
}

func (x *LogoDefinition) Reset() {
	*x = LogoDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoDefinition) ProtoMessage() {}

func (x *LogoDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoDefinition.ProtoReflect.Descriptor instead.
func (*LogoDefinition) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{56}
}

func (x *LogoDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogoDefinition) GetImageLogoDefinition() *ImageLogoDefinition {
	if x != nil {
		return x.ImageLogoDefinition
	}
	return nil
}

func (x *LogoDefinition) GetVideoLogoDefinition() *VideoLogoDefinition {
	if x != nil {
		return x.VideoLogoDefinition
	}
	return nil
}

func (x *LogoDefinition) GetTextLogoDefinition() *TextLogoDefinition {
	if x != nil {
		return x.TextLogoDefinition
	}
	return nil
}

type FontShadow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color   string `protobuf:"bytes,1,opt,name=Color,proto3" json:"Color,omitempty"`
	OffsetX int32  `protobuf:"varint,2,opt,name=OffsetX,proto3" json:"OffsetX,omitempty"`
	OffsetY int32  `protobuf:"varint,3,opt,name=OffsetY,proto3" json:"OffsetY,omitempty"`
}

func (x *FontShadow) Reset() {
	*x = FontShadow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FontShadow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FontShadow) ProtoMessage() {}

func (x *FontShadow) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FontShadow.ProtoReflect.Descriptor instead.
func (*FontShadow) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{57}
}

func (x *FontShadow) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *FontShadow) GetOffsetX() int32 {
	if x != nil {
		return x.OffsetX
	}
	return 0
}

func (x *FontShadow) GetOffsetY() int32 {
	if x != nil {
		return x.OffsetY
	}
	return 0
}

type AdaptConcat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorSize *AnchorSize         `protobuf:"bytes,1,opt,name=AnchorSize,proto3" json:"AnchorSize,omitempty"`
	Concats    []*ConcatDefinition `protobuf:"bytes,2,rep,name=Concats,proto3" json:"Concats,omitempty"`
}

func (x *AdaptConcat) Reset() {
	*x = AdaptConcat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptConcat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptConcat) ProtoMessage() {}

func (x *AdaptConcat) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptConcat.ProtoReflect.Descriptor instead.
func (*AdaptConcat) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{58}
}

func (x *AdaptConcat) GetAnchorSize() *AnchorSize {
	if x != nil {
		return x.AnchorSize
	}
	return nil
}

func (x *AdaptConcat) GetConcats() []*ConcatDefinition {
	if x != nil {
		return x.Concats
	}
	return nil
}

type ConcatDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Mid      string `protobuf:"bytes,2,opt,name=Mid,proto3" json:"Mid,omitempty"`
	Position string `protobuf:"bytes,4,opt,name=Position,proto3" json:"Position,omitempty"`
}

func (x *ConcatDefinition) Reset() {
	*x = ConcatDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatDefinition) ProtoMessage() {}

func (x *ConcatDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatDefinition.ProtoReflect.Descriptor instead.
func (*ConcatDefinition) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{59}
}

func (x *ConcatDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConcatDefinition) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *ConcatDefinition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type HiddenWatermarkAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *HiddenWatermarkAdd) Reset() {
	*x = HiddenWatermarkAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenWatermarkAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenWatermarkAdd) ProtoMessage() {}

func (x *HiddenWatermarkAdd) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenWatermarkAdd.ProtoReflect.Descriptor instead.
func (*HiddenWatermarkAdd) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{60}
}

func (x *HiddenWatermarkAdd) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HiddenWatermarkAdd) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type VodListWatermarkResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32           `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int32           `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Total  int64           `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Data   []*LogoTemplate `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *VodListWatermarkResponseResult) Reset() {
	*x = VodListWatermarkResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListWatermarkResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListWatermarkResponseResult) ProtoMessage() {}

func (x *VodListWatermarkResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListWatermarkResponseResult.ProtoReflect.Descriptor instead.
func (*VodListWatermarkResponseResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{61}
}

func (x *VodListWatermarkResponseResult) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VodListWatermarkResponseResult) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodListWatermarkResponseResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VodListWatermarkResponseResult) GetData() []*LogoTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res             string  `protobuf:"bytes,1,opt,name=Res,proto3" json:"Res,omitempty"`
	ScaleType       int32   `protobuf:"varint,4,opt,name=ScaleType,proto3" json:"ScaleType,omitempty"`
	ScaleMode       int32   `protobuf:"varint,22,opt,name=ScaleMode,proto3" json:"ScaleMode,omitempty"`
	ScaleWidth      int32   `protobuf:"varint,5,opt,name=ScaleWidth,proto3" json:"ScaleWidth,omitempty"`
	ScaleHeight     int32   `protobuf:"varint,6,opt,name=ScaleHeight,proto3" json:"ScaleHeight,omitempty"`
	ScaleShort      int32   `protobuf:"varint,7,opt,name=ScaleShort,proto3" json:"ScaleShort,omitempty"`
	ScaleLong       int32   `protobuf:"varint,8,opt,name=ScaleLong,proto3" json:"ScaleLong,omitempty"`
	Codec           string  `protobuf:"bytes,9,opt,name=Codec,proto3" json:"Codec,omitempty"`
	RateControlMode string  `protobuf:"bytes,10,opt,name=RateControlMode,proto3" json:"RateControlMode,omitempty"`
	MaxBitrate      int32   `protobuf:"varint,11,opt,name=MaxBitrate,proto3" json:"MaxBitrate,omitempty"`
	Bitrate         int32   `protobuf:"varint,12,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`
	Crf             float32 `protobuf:"fixed32,13,opt,name=Crf,proto3" json:"Crf,omitempty"`
	MaxFps          int32   `protobuf:"varint,15,opt,name=MaxFps,proto3" json:"MaxFps,omitempty"`
	Vsync           string  `protobuf:"bytes,16,opt,name=Vsync,proto3" json:"Vsync,omitempty"`
	Fps             float32 `protobuf:"fixed32,17,opt,name=Fps,proto3" json:"Fps,omitempty"`
	HDRMode         int32   `protobuf:"varint,21,opt,name=HDRMode,proto3" json:"HDRMode,omitempty"`
	GopSize         int32   `protobuf:"varint,24,opt,name=GopSize,proto3" json:"GopSize,omitempty"`
	DisableBFrame   bool    `protobuf:"varint,25,opt,name=DisableBFrame,proto3" json:"DisableBFrame,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{62}
}

func (x *Video) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

func (x *Video) GetScaleType() int32 {
	if x != nil {
		return x.ScaleType
	}
	return 0
}

func (x *Video) GetScaleMode() int32 {
	if x != nil {
		return x.ScaleMode
	}
	return 0
}

func (x *Video) GetScaleWidth() int32 {
	if x != nil {
		return x.ScaleWidth
	}
	return 0
}

func (x *Video) GetScaleHeight() int32 {
	if x != nil {
		return x.ScaleHeight
	}
	return 0
}

func (x *Video) GetScaleShort() int32 {
	if x != nil {
		return x.ScaleShort
	}
	return 0
}

func (x *Video) GetScaleLong() int32 {
	if x != nil {
		return x.ScaleLong
	}
	return 0
}

func (x *Video) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Video) GetRateControlMode() string {
	if x != nil {
		return x.RateControlMode
	}
	return ""
}

func (x *Video) GetMaxBitrate() int32 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *Video) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Video) GetCrf() float32 {
	if x != nil {
		return x.Crf
	}
	return 0
}

func (x *Video) GetMaxFps() int32 {
	if x != nil {
		return x.MaxFps
	}
	return 0
}

func (x *Video) GetVsync() string {
	if x != nil {
		return x.Vsync
	}
	return ""
}

func (x *Video) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *Video) GetHDRMode() int32 {
	if x != nil {
		return x.HDRMode
	}
	return 0
}

func (x *Video) GetGopSize() int32 {
	if x != nil {
		return x.GopSize
	}
	return 0
}

func (x *Video) GetDisableBFrame() bool {
	if x != nil {
		return x.DisableBFrame
	}
	return false
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec           string `protobuf:"bytes,1,opt,name=Codec,proto3" json:"Codec,omitempty"`
	SampleRate      int32  `protobuf:"varint,2,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"`
	RateControlMode string `protobuf:"bytes,3,opt,name=RateControlMode,proto3" json:"RateControlMode,omitempty"`
	Bitrate         int32  `protobuf:"varint,4,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`
	MinRate         int32  `protobuf:"varint,5,opt,name=MinRate,proto3" json:"MinRate,omitempty"`
	MaxRate         int32  `protobuf:"varint,6,opt,name=MaxRate,proto3" json:"MaxRate,omitempty"`
	Channels        int32  `protobuf:"varint,7,opt,name=Channels,proto3" json:"Channels,omitempty"`
	Profile         string `protobuf:"bytes,8,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{63}
}

func (x *Audio) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Audio) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *Audio) GetRateControlMode() string {
	if x != nil {
		return x.RateControlMode
	}
	return ""
}

func (x *Audio) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Audio) GetMinRate() int32 {
	if x != nil {
		return x.MinRate
	}
	return 0
}

func (x *Audio) GetMaxRate() int32 {
	if x != nil {
		return x.MaxRate
	}
	return 0
}

func (x *Audio) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *Audio) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Duration int32  `protobuf:"varint,3,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{64}
}

func (x *Segment) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Segment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Segment) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResRange           string `protobuf:"bytes,1,opt,name=ResRange,proto3" json:"ResRange,omitempty"`
	LongResRange       string `protobuf:"bytes,2,opt,name=LongResRange,proto3" json:"LongResRange,omitempty"`
	DurationRange      string `protobuf:"bytes,3,opt,name=DurationRange,proto3" json:"DurationRange,omitempty"`
	FpsRange           string `protobuf:"bytes,4,opt,name=FpsRange,proto3" json:"FpsRange,omitempty"`
	BitrateRange       string `protobuf:"bytes,5,opt,name=BitrateRange,proto3" json:"BitrateRange,omitempty"`
	AudioBitrateRange  string `protobuf:"bytes,6,opt,name=AudioBitrateRange,proto3" json:"AudioBitrateRange,omitempty"`
	FileType           string `protobuf:"bytes,7,opt,name=FileType,proto3" json:"FileType,omitempty"`
	VQScoreRange       string `protobuf:"bytes,8,opt,name=VQScoreRange,proto3" json:"VQScoreRange,omitempty"`
	VideoDurationRange string `protobuf:"bytes,9,opt,name=VideoDurationRange,proto3" json:"VideoDurationRange,omitempty"`
	AudioDurationRange string `protobuf:"bytes,10,opt,name=AudioDurationRange,proto3" json:"AudioDurationRange,omitempty"`
	UserCondition      string `protobuf:"bytes,11,opt,name=UserCondition,proto3" json:"UserCondition,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{65}
}

func (x *Condition) GetResRange() string {
	if x != nil {
		return x.ResRange
	}
	return ""
}

func (x *Condition) GetLongResRange() string {
	if x != nil {
		return x.LongResRange
	}
	return ""
}

func (x *Condition) GetDurationRange() string {
	if x != nil {
		return x.DurationRange
	}
	return ""
}

func (x *Condition) GetFpsRange() string {
	if x != nil {
		return x.FpsRange
	}
	return ""
}

func (x *Condition) GetBitrateRange() string {
	if x != nil {
		return x.BitrateRange
	}
	return ""
}

func (x *Condition) GetAudioBitrateRange() string {
	if x != nil {
		return x.AudioBitrateRange
	}
	return ""
}

func (x *Condition) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *Condition) GetVQScoreRange() string {
	if x != nil {
		return x.VQScoreRange
	}
	return ""
}

func (x *Condition) GetVideoDurationRange() string {
	if x != nil {
		return x.VideoDurationRange
	}
	return ""
}

func (x *Condition) GetAudioDurationRange() string {
	if x != nil {
		return x.AudioDurationRange
	}
	return ""
}

func (x *Condition) GetUserCondition() string {
	if x != nil {
		return x.UserCondition
	}
	return ""
}

type ParallelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *ParallelParams) Reset() {
	*x = ParallelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelParams) ProtoMessage() {}

func (x *ParallelParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelParams.ProtoReflect.Descriptor instead.
func (*ParallelParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{66}
}

func (x *ParallelParams) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Encryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor string `protobuf:"bytes,1,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
}

func (x *Encryption) Reset() {
	*x = Encryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encryption) ProtoMessage() {}

func (x *Encryption) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encryption.ProtoReflect.Descriptor instead.
func (*Encryption) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{67}
}

func (x *Encryption) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method             string  `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	IntegratedLoudness float64 `protobuf:"fixed64,2,opt,name=IntegratedLoudness,proto3" json:"IntegratedLoudness,omitempty"`
	TruePeak           float64 `protobuf:"fixed64,3,opt,name=TruePeak,proto3" json:"TruePeak,omitempty"`
	Volume             float64 `protobuf:"fixed64,4,opt,name=Volume,proto3" json:"Volume,omitempty"`
	VolumeTime         float64 `protobuf:"fixed64,5,opt,name=VolumeTime,proto3" json:"VolumeTime,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{68}
}

func (x *Volume) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Volume) GetIntegratedLoudness() float64 {
	if x != nil {
		return x.IntegratedLoudness
	}
	return 0
}

func (x *Volume) GetTruePeak() float64 {
	if x != nil {
		return x.TruePeak
	}
	return 0
}

func (x *Volume) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Volume) GetVolumeTime() float64 {
	if x != nil {
		return x.VolumeTime
	}
	return 0
}

type TranscodeActivity_EnhanceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"` // 任务模板Id
	Version    string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`       // 版本，当前为volc
}

func (x *TranscodeActivity_EnhanceParams) Reset() {
	*x = TranscodeActivity_EnhanceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeActivity_EnhanceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeActivity_EnhanceParams) ProtoMessage() {}

func (x *TranscodeActivity_EnhanceParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeActivity_EnhanceParams.ProtoReflect.Descriptor instead.
func (*TranscodeActivity_EnhanceParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{45, 0}
}

func (x *TranscodeActivity_EnhanceParams) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TranscodeActivity_EnhanceParams) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TranscodeActivity_LogoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string `protobuf:"bytes,1,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"` // 水印模板Id
}

func (x *TranscodeActivity_LogoParams) Reset() {
	*x = TranscodeActivity_LogoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeActivity_LogoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeActivity_LogoParams) ProtoMessage() {}

func (x *TranscodeActivity_LogoParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeActivity_LogoParams.ProtoReflect.Descriptor instead.
func (*TranscodeActivity_LogoParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{45, 1}
}

func (x *TranscodeActivity_LogoParams) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type TranscodeActivity_SubtitleParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=Language,proto3" json:"Language,omitempty"`
	FontType string `protobuf:"bytes,2,opt,name=FontType,proto3" json:"FontType,omitempty"`
}

func (x *TranscodeActivity_SubtitleParams) Reset() {
	*x = TranscodeActivity_SubtitleParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeActivity_SubtitleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeActivity_SubtitleParams) ProtoMessage() {}

func (x *TranscodeActivity_SubtitleParams) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_workflow_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeActivity_SubtitleParams.ProtoReflect.Descriptor instead.
func (*TranscodeActivity_SubtitleParams) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP(), []int{45, 2}
}

func (x *TranscodeActivity_SubtitleParams) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TranscodeActivity_SubtitleParams) GetFontType() string {
	if x != nil {
		return x.FontType
	}
	return ""
}

var File_volcengine_vod_business_vod_workflow_proto protoreflect.FileDescriptor

var file_volcengine_vod_business_vod_workflow_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x64,
	0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x76,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x56, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83,
	0x02, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x56, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x03, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x5e, 0x0a, 0x0e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x5e, 0x0a, 0x0e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x4c, 0x0a, 0x08, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x08, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x07, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x56, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x56, 0x61, 0x72, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c,
	0x6f, 0x67, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x70, 0x52, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4f,
	0x0a, 0x0f, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x61, 0x67, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x44, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x9c, 0x01, 0x0a,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x06, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12,
	0x4a, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x0a,
	0x44, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x50, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65,
	0x58, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53,
	0x69, 0x7a, 0x65, 0x59, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x51, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x56, 0x51, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x69, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x4e, 0x6f, 0x69, 0x73, 0x65,
	0x22, 0x7a, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x4c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x65,
	0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x65, 0x61, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x4d, 0x65, 0x61, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a,
	0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x56,
	0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xea, 0x05, 0x0a, 0x11, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12, 0x4c,
	0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xcc, 0x04, 0x0a, 0x23, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4a, 0x6f, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4a, 0x6f,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a,
	0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x79, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x41, 0x49, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72,
	0x69, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x1c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x58, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x49, 0x6d, 0x67, 0x58, 0x4c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67,
	0x59, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x59,
	0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x22,
	0x88, 0x02, 0x0a, 0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x72, 0x69,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x72, 0x69,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22, 0xba, 0x04, 0x0a, 0x0e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x44, 0x79, 0x6e,
	0x70, 0x6f, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x09,
	0x41, 0x49, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41,
	0x49, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x41, 0x49, 0x44, 0x79,
	0x6e, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x53,
	0x70, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x11, 0x56, 0x6f, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x84, 0x06, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x5c, 0x0a, 0x10, 0x42, 0x79, 0x74, 0x65, 0x48, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x48, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x42,
	0x79, 0x74, 0x65, 0x48, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x74, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x62, 0x0a, 0x12, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x12, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc3, 0x04, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3b, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x85, 0x04, 0x0a, 0x10, 0x42, 0x79, 0x74, 0x65, 0x48, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x3b, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x6c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4a, 0x0a,
	0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x56, 0x6f, 0x6c,
	0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xd6, 0x04, 0x0a,
	0x12, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x14, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x6b, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x15, 0x44, 0x79, 0x6e, 0x70, 0x6f, 0x73, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x80,
	0x01, 0x0a, 0x1c, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x1c, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x68, 0x0a, 0x14, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x14, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x73, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x15, 0x44, 0x79, 0x6e,
	0x70, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98,
	0x02, 0x0a, 0x1c, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x73, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x70, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x14, 0x53, 0x70,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x65,
	0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x65,
	0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x58,
	0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x58, 0x4c,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x73, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x02, 0x0a,
	0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x22, 0x69, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x19, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xf4, 0x02, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c,
	0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x10, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0b,
	0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xd4, 0x04, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x07, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x07, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a,
	0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4c,
	0x6f, 0x67, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c,
	0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x49, 0x0a, 0x0d, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2c, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x48, 0x0a, 0x0e, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a,
	0x0b, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5c, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x04, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x6f,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x6f, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c,
	0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x73,
	0x12, 0x5c, 0x0a, 0x0f, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x0f, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9d,
	0x01, 0x0a, 0x09, 0x41, 0x64, 0x61, 0x70, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x4a, 0x0a, 0x0a,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x6f, 0x73, 0x22, 0x3a,
	0x0a, 0x0a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x13, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x69, 0x7a, 0x65, 0x58, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x7a,
	0x65, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50,
	0x6f, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x59, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x6f, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x58, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x59, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x59, 0x22, 0xa9, 0x03, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f,
	0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x69, 0x7a, 0x65, 0x59, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x7a,
	0x65, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x58, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x59, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x58, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x59,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x59, 0x22, 0xa4, 0x03, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73,
	0x58, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x73, 0x59, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73,
	0x59, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x59,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x50, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x6f, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x59, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x50, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x58, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x59, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x59, 0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x4c, 0x6f,
	0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x65, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x67, 0x6f, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c,
	0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x0a, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x59, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x61,
	0x74, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x12, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x1e, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x03, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x52, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x72, 0x66, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x72, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78,
	0x46, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x46, 0x70,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x70, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x44, 0x52,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x44, 0x52, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x51, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x70, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x70, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x51, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x51, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x24, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xa4,
	0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x75, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x72, 0x75, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x7a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x07, 0x42, 0xcc, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x6f, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x0b, 0x56, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x01, 0x5a, 0x41,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x6f,
	0x64, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0xa0, 0x01, 0x01, 0xd8, 0x01, 0x01, 0xca, 0x02, 0x20, 0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x5c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe2, 0x02, 0x23, 0x56, 0x6f, 0x6c,
	0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_volcengine_vod_business_vod_workflow_proto_rawDescOnce sync.Once
	file_volcengine_vod_business_vod_workflow_proto_rawDescData = file_volcengine_vod_business_vod_workflow_proto_rawDesc
)

func file_volcengine_vod_business_vod_workflow_proto_rawDescGZIP() []byte {
	file_volcengine_vod_business_vod_workflow_proto_rawDescOnce.Do(func() {
		file_volcengine_vod_business_vod_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_volcengine_vod_business_vod_workflow_proto_rawDescData)
	})
	return file_volcengine_vod_business_vod_workflow_proto_rawDescData
}

var file_volcengine_vod_business_vod_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_volcengine_vod_business_vod_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_volcengine_vod_business_vod_workflow_proto_goTypes = []interface{}{
	(StageStatus)(0),                            // 0: Volcengine.Vod.Models.Business.StageStatus
	(*VodStartWorkflowResult)(nil),              // 1: Volcengine.Vod.Models.Business.VodStartWorkflowResult
	(*DirectUrl)(nil),                           // 2: Volcengine.Vod.Models.Business.DirectUrl
	(*WorkflowParams)(nil),                      // 3: Volcengine.Vod.Models.Business.WorkflowParams
	(*OverrideParams)(nil),                      // 4: Volcengine.Vod.Models.Business.OverrideParams
	(*LogoOverride)(nil),                        // 5: Volcengine.Vod.Models.Business.LogoOverride
	(*TranscodeVideoOverride)(nil),              // 6: Volcengine.Vod.Models.Business.TranscodeVideoOverride
	(*Clip)(nil),                                // 7: Volcengine.Vod.Models.Business.Clip
	(*TranscodeAudioOverride)(nil),              // 8: Volcengine.Vod.Models.Business.TranscodeAudioOverride
	(*SnapshotOverride)(nil),                    // 9: Volcengine.Vod.Models.Business.SnapshotOverride
	(*EnhanceOverride)(nil),                     // 10: Volcengine.Vod.Models.Business.EnhanceOverride
	(*TranscodeResult)(nil),                     // 11: Volcengine.Vod.Models.Business.TranscodeResult
	(*Inspection)(nil),                          // 12: Volcengine.Vod.Models.Business.Inspection
	(*Quality)(nil),                             // 13: Volcengine.Vod.Models.Business.Quality
	(*DeLogoInfo)(nil),                          // 14: Volcengine.Vod.Models.Business.DeLogoInfo
	(*VisualQuality)(nil),                       // 15: Volcengine.Vod.Models.Business.VisualQuality
	(*VolumeInfo)(nil),                          // 16: Volcengine.Vod.Models.Business.VolumeInfo
	(*CategoryTagInfo)(nil),                     // 17: Volcengine.Vod.Models.Business.CategoryTagInfo
	(*VodListWorkflowExecutionResult)(nil),      // 18: Volcengine.Vod.Models.Business.VodListWorkflowExecutionResult
	(*WorkflowExecution)(nil),                   // 19: Volcengine.Vod.Models.Business.WorkflowExecution
	(*VodGetWorkflowExecutionDetailResult)(nil), // 20: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult
	(*ExecutionStage)(nil),                      // 21: Volcengine.Vod.Models.Business.ExecutionStage
	(*StageDetail)(nil),                         // 22: Volcengine.Vod.Models.Business.StageDetail
	(*TaskDetail)(nil),                          // 23: Volcengine.Vod.Models.Business.TaskDetail
	(*SnapshotParamsPoster)(nil),                // 24: Volcengine.Vod.Models.Business.SnapshotParamsPoster
	(*SnapshotParamsDynpost)(nil),               // 25: Volcengine.Vod.Models.Business.SnapshotParamsDynpost
	(*SnapshotParamsAIDynpost)(nil),             // 26: Volcengine.Vod.Models.Business.SnapshotParamsAIDynpost
	(*SnapshotParamsAnimatedPoster)(nil),        // 27: Volcengine.Vod.Models.Business.SnapshotParamsAnimatedPoster
	(*SnapshotParamsSprite)(nil),                // 28: Volcengine.Vod.Models.Business.SnapshotParamsSprite
	(*SnapshotParamsSample)(nil),                // 29: Volcengine.Vod.Models.Business.SnapshotParamsSample
	(*SnapshotResult)(nil),                      // 30: Volcengine.Vod.Models.Business.SnapshotResult
	(*VodWorkflowResult)(nil),                   // 31: Volcengine.Vod.Models.Business.VodWorkflowResult
	(*TaskTemplate)(nil),                        // 32: Volcengine.Vod.Models.Business.TaskTemplate
	(*TranscodeVideoTaskParams)(nil),            // 33: Volcengine.Vod.Models.Business.TranscodeVideoTaskParams
	(*ByteHDTaskParams)(nil),                    // 34: Volcengine.Vod.Models.Business.ByteHDTaskParams
	(*TranscodeAudioTaskParams)(nil),            // 35: Volcengine.Vod.Models.Business.TranscodeAudioTaskParams
	(*SnapshotTaskParams)(nil),                  // 36: Volcengine.Vod.Models.Business.SnapshotTaskParams
	(*PosterSnapshotParams)(nil),                // 37: Volcengine.Vod.Models.Business.PosterSnapshotParams
	(*DynpostSnapshotParams)(nil),               // 38: Volcengine.Vod.Models.Business.DynpostSnapshotParams
	(*AnimatedPosterSnapshotParams)(nil),        // 39: Volcengine.Vod.Models.Business.AnimatedPosterSnapshotParams
	(*SpriteSnapshotParams)(nil),                // 40: Volcengine.Vod.Models.Business.SpriteSnapshotParams
	(*SampleSnapshotParams)(nil),                // 41: Volcengine.Vod.Models.Business.SampleSnapshotParams
	(*VodTaskTemplateResult)(nil),               // 42: Volcengine.Vod.Models.Business.VodTaskTemplateResult
	(*VodListTaskTemplateResult)(nil),           // 43: Volcengine.Vod.Models.Business.VodListTaskTemplateResult
	(*WorkflowTemplate)(nil),                    // 44: Volcengine.Vod.Models.Business.WorkflowTemplate
	(*Activity)(nil),                            // 45: Volcengine.Vod.Models.Business.Activity
	(*TranscodeActivity)(nil),                   // 46: Volcengine.Vod.Models.Business.TranscodeActivity
	(*SnapshotActivity)(nil),                    // 47: Volcengine.Vod.Models.Business.SnapshotActivity
	(*EndActivity)(nil),                         // 48: Volcengine.Vod.Models.Business.EndActivity
	(*VodWorkflowTemplateResult)(nil),           // 49: Volcengine.Vod.Models.Business.VodWorkflowTemplateResult
	(*VodListWorkflowTemplateResult)(nil),       // 50: Volcengine.Vod.Models.Business.VodListWorkflowTemplateResult
	(*LogoTemplate)(nil),                        // 51: Volcengine.Vod.Models.Business.LogoTemplate
	(*AdaptLogo)(nil),                           // 52: Volcengine.Vod.Models.Business.AdaptLogo
	(*AnchorSize)(nil),                          // 53: Volcengine.Vod.Models.Business.AnchorSize
	(*ImageLogoDefinition)(nil),                 // 54: Volcengine.Vod.Models.Business.ImageLogoDefinition
	(*VideoLogoDefinition)(nil),                 // 55: Volcengine.Vod.Models.Business.VideoLogoDefinition
	(*TextLogoDefinition)(nil),                  // 56: Volcengine.Vod.Models.Business.TextLogoDefinition
	(*LogoDefinition)(nil),                      // 57: Volcengine.Vod.Models.Business.LogoDefinition
	(*FontShadow)(nil),                          // 58: Volcengine.Vod.Models.Business.FontShadow
	(*AdaptConcat)(nil),                         // 59: Volcengine.Vod.Models.Business.AdaptConcat
	(*ConcatDefinition)(nil),                    // 60: Volcengine.Vod.Models.Business.ConcatDefinition
	(*HiddenWatermarkAdd)(nil),                  // 61: Volcengine.Vod.Models.Business.HiddenWatermarkAdd
	(*VodListWatermarkResponseResult)(nil),      // 62: Volcengine.Vod.Models.Business.VodListWatermarkResponseResult
	(*Video)(nil),                               // 63: Volcengine.Vod.Models.Business.Video
	(*Audio)(nil),                               // 64: Volcengine.Vod.Models.Business.Audio
	(*Segment)(nil),                             // 65: Volcengine.Vod.Models.Business.Segment
	(*Condition)(nil),                           // 66: Volcengine.Vod.Models.Business.Condition
	(*ParallelParams)(nil),                      // 67: Volcengine.Vod.Models.Business.ParallelParams
	(*Encryption)(nil),                          // 68: Volcengine.Vod.Models.Business.Encryption
	(*Volume)(nil),                              // 69: Volcengine.Vod.Models.Business.Volume
	nil,                                         // 70: Volcengine.Vod.Models.Business.WorkflowParams.ConditionEntry
	nil,                                         // 71: Volcengine.Vod.Models.Business.LogoOverride.VarsEntry
	nil,                                         // 72: Volcengine.Vod.Models.Business.CategoryTagInfo.ParentInfoEntry
	(*TranscodeActivity_EnhanceParams)(nil),     // 73: Volcengine.Vod.Models.Business.TranscodeActivity.EnhanceParams
	(*TranscodeActivity_LogoParams)(nil),        // 74: Volcengine.Vod.Models.Business.TranscodeActivity.LogoParams
	(*TranscodeActivity_SubtitleParams)(nil),    // 75: Volcengine.Vod.Models.Business.TranscodeActivity.SubtitleParams
	(*timestamppb.Timestamp)(nil),               // 76: google.protobuf.Timestamp
	(*VodTranscodeInfo)(nil),                    // 77: Volcengine.Vod.Models.Business.VodTranscodeInfo
}
var file_volcengine_vod_business_vod_workflow_proto_depIdxs = []int32{
	4,   // 0: Volcengine.Vod.Models.Business.WorkflowParams.OverrideParams:type_name -> Volcengine.Vod.Models.Business.OverrideParams
	70,  // 1: Volcengine.Vod.Models.Business.WorkflowParams.Condition:type_name -> Volcengine.Vod.Models.Business.WorkflowParams.ConditionEntry
	5,   // 2: Volcengine.Vod.Models.Business.OverrideParams.Logo:type_name -> Volcengine.Vod.Models.Business.LogoOverride
	6,   // 3: Volcengine.Vod.Models.Business.OverrideParams.TranscodeVideo:type_name -> Volcengine.Vod.Models.Business.TranscodeVideoOverride
	8,   // 4: Volcengine.Vod.Models.Business.OverrideParams.TranscodeAudio:type_name -> Volcengine.Vod.Models.Business.TranscodeAudioOverride
	9,   // 5: Volcengine.Vod.Models.Business.OverrideParams.Snapshot:type_name -> Volcengine.Vod.Models.Business.SnapshotOverride
	10,  // 6: Volcengine.Vod.Models.Business.OverrideParams.Enhance:type_name -> Volcengine.Vod.Models.Business.EnhanceOverride
	71,  // 7: Volcengine.Vod.Models.Business.LogoOverride.Vars:type_name -> Volcengine.Vod.Models.Business.LogoOverride.VarsEntry
	7,   // 8: Volcengine.Vod.Models.Business.TranscodeVideoOverride.Clip:type_name -> Volcengine.Vod.Models.Business.Clip
	7,   // 9: Volcengine.Vod.Models.Business.TranscodeAudioOverride.Clip:type_name -> Volcengine.Vod.Models.Business.Clip
	12,  // 10: Volcengine.Vod.Models.Business.TranscodeResult.Inspection:type_name -> Volcengine.Vod.Models.Business.Inspection
	17,  // 11: Volcengine.Vod.Models.Business.TranscodeResult.CategoryTags:type_name -> Volcengine.Vod.Models.Business.CategoryTagInfo
	13,  // 12: Volcengine.Vod.Models.Business.Inspection.Quality:type_name -> Volcengine.Vod.Models.Business.Quality
	14,  // 13: Volcengine.Vod.Models.Business.Inspection.DeLogo:type_name -> Volcengine.Vod.Models.Business.DeLogoInfo
	15,  // 14: Volcengine.Vod.Models.Business.Quality.Visual:type_name -> Volcengine.Vod.Models.Business.VisualQuality
	16,  // 15: Volcengine.Vod.Models.Business.Quality.VolumeInfo:type_name -> Volcengine.Vod.Models.Business.VolumeInfo
	72,  // 16: Volcengine.Vod.Models.Business.CategoryTagInfo.ParentInfo:type_name -> Volcengine.Vod.Models.Business.CategoryTagInfo.ParentInfoEntry
	19,  // 17: Volcengine.Vod.Models.Business.VodListWorkflowExecutionResult.Data:type_name -> Volcengine.Vod.Models.Business.WorkflowExecution
	76,  // 18: Volcengine.Vod.Models.Business.WorkflowExecution.CreateTime:type_name -> google.protobuf.Timestamp
	76,  // 19: Volcengine.Vod.Models.Business.WorkflowExecution.StartTime:type_name -> google.protobuf.Timestamp
	76,  // 20: Volcengine.Vod.Models.Business.WorkflowExecution.EndTime:type_name -> google.protobuf.Timestamp
	3,   // 21: Volcengine.Vod.Models.Business.WorkflowExecution.Input:type_name -> Volcengine.Vod.Models.Business.WorkflowParams
	23,  // 22: Volcengine.Vod.Models.Business.WorkflowExecution.TasksDetail:type_name -> Volcengine.Vod.Models.Business.TaskDetail
	2,   // 23: Volcengine.Vod.Models.Business.WorkflowExecution.DirectUrl:type_name -> Volcengine.Vod.Models.Business.DirectUrl
	21,  // 24: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.Stages:type_name -> Volcengine.Vod.Models.Business.ExecutionStage
	76,  // 25: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.CreateTime:type_name -> google.protobuf.Timestamp
	76,  // 26: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.StartTime:type_name -> google.protobuf.Timestamp
	76,  // 27: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.EndTime:type_name -> google.protobuf.Timestamp
	2,   // 28: Volcengine.Vod.Models.Business.VodGetWorkflowExecutionDetailResult.DirectUrl:type_name -> Volcengine.Vod.Models.Business.DirectUrl
	22,  // 29: Volcengine.Vod.Models.Business.ExecutionStage.StageDetail:type_name -> Volcengine.Vod.Models.Business.StageDetail
	76,  // 30: Volcengine.Vod.Models.Business.ExecutionStage.StartTime:type_name -> google.protobuf.Timestamp
	76,  // 31: Volcengine.Vod.Models.Business.ExecutionStage.EndTime:type_name -> google.protobuf.Timestamp
	0,   // 32: Volcengine.Vod.Models.Business.StageDetail.Status:type_name -> Volcengine.Vod.Models.Business.StageStatus
	76,  // 33: Volcengine.Vod.Models.Business.StageDetail.StartTime:type_name -> google.protobuf.Timestamp
	76,  // 34: Volcengine.Vod.Models.Business.StageDetail.EndTime:type_name -> google.protobuf.Timestamp
	0,   // 35: Volcengine.Vod.Models.Business.TaskDetail.Status:type_name -> Volcengine.Vod.Models.Business.StageStatus
	76,  // 36: Volcengine.Vod.Models.Business.TaskDetail.StartTime:type_name -> google.protobuf.Timestamp
	76,  // 37: Volcengine.Vod.Models.Business.TaskDetail.EndTime:type_name -> google.protobuf.Timestamp
	24,  // 38: Volcengine.Vod.Models.Business.SnapshotResult.Poster:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsPoster
	25,  // 39: Volcengine.Vod.Models.Business.SnapshotResult.Dynpost:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsDynpost
	27,  // 40: Volcengine.Vod.Models.Business.SnapshotResult.AnimatedPoster:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsAnimatedPoster
	26,  // 41: Volcengine.Vod.Models.Business.SnapshotResult.AIDynpost:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsAIDynpost
	28,  // 42: Volcengine.Vod.Models.Business.SnapshotResult.Sprite:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsSprite
	29,  // 43: Volcengine.Vod.Models.Business.SnapshotResult.Sample:type_name -> Volcengine.Vod.Models.Business.SnapshotParamsSample
	2,   // 44: Volcengine.Vod.Models.Business.VodWorkflowResult.DirectUrl:type_name -> Volcengine.Vod.Models.Business.DirectUrl
	77,  // 45: Volcengine.Vod.Models.Business.VodWorkflowResult.TranscodeInfos:type_name -> Volcengine.Vod.Models.Business.VodTranscodeInfo
	30,  // 46: Volcengine.Vod.Models.Business.VodWorkflowResult.Snapshots:type_name -> Volcengine.Vod.Models.Business.SnapshotResult
	76,  // 47: Volcengine.Vod.Models.Business.TaskTemplate.CreatedAt:type_name -> google.protobuf.Timestamp
	76,  // 48: Volcengine.Vod.Models.Business.TaskTemplate.UpdatedAt:type_name -> google.protobuf.Timestamp
	33,  // 49: Volcengine.Vod.Models.Business.TaskTemplate.TranscodeVideoTaskParams:type_name -> Volcengine.Vod.Models.Business.TranscodeVideoTaskParams
	34,  // 50: Volcengine.Vod.Models.Business.TaskTemplate.ByteHDTaskParams:type_name -> Volcengine.Vod.Models.Business.ByteHDTaskParams
	35,  // 51: Volcengine.Vod.Models.Business.TaskTemplate.TranscodeAudioTaskParams:type_name -> Volcengine.Vod.Models.Business.TranscodeAudioTaskParams
	36,  // 52: Volcengine.Vod.Models.Business.TaskTemplate.SnapshotTaskParams:type_name -> Volcengine.Vod.Models.Business.SnapshotTaskParams
	63,  // 53: Volcengine.Vod.Models.Business.TranscodeVideoTaskParams.Video:type_name -> Volcengine.Vod.Models.Business.Video
	64,  // 54: Volcengine.Vod.Models.Business.TranscodeVideoTaskParams.Audio:type_name -> Volcengine.Vod.Models.Business.Audio
	68,  // 55: Volcengine.Vod.Models.Business.TranscodeVideoTaskParams.Encryption:type_name -> Volcengine.Vod.Models.Business.Encryption
	65,  // 56: Volcengine.Vod.Models.Business.TranscodeVideoTaskParams.Segment:type_name -> Volcengine.Vod.Models.Business.Segment
	69,  // 57: Volcengine.Vod.Models.Business.TranscodeVideoTaskParams.Volume:type_name -> Volcengine.Vod.Models.Business.Volume
	63,  // 58: Volcengine.Vod.Models.Business.ByteHDTaskParams.Video:type_name -> Volcengine.Vod.Models.Business.Video
	64,  // 59: Volcengine.Vod.Models.Business.ByteHDTaskParams.Audio:type_name -> Volcengine.Vod.Models.Business.Audio
	68,  // 60: Volcengine.Vod.Models.Business.ByteHDTaskParams.Encryption:type_name -> Volcengine.Vod.Models.Business.Encryption
	65,  // 61: Volcengine.Vod.Models.Business.ByteHDTaskParams.Segment:type_name -> Volcengine.Vod.Models.Business.Segment
	69,  // 62: Volcengine.Vod.Models.Business.ByteHDTaskParams.Volume:type_name -> Volcengine.Vod.Models.Business.Volume
	64,  // 63: Volcengine.Vod.Models.Business.TranscodeAudioTaskParams.Audio:type_name -> Volcengine.Vod.Models.Business.Audio
	68,  // 64: Volcengine.Vod.Models.Business.TranscodeAudioTaskParams.Encryption:type_name -> Volcengine.Vod.Models.Business.Encryption
	65,  // 65: Volcengine.Vod.Models.Business.TranscodeAudioTaskParams.Segment:type_name -> Volcengine.Vod.Models.Business.Segment
	69,  // 66: Volcengine.Vod.Models.Business.TranscodeAudioTaskParams.Volume:type_name -> Volcengine.Vod.Models.Business.Volume
	37,  // 67: Volcengine.Vod.Models.Business.SnapshotTaskParams.PosterSnapshotParams:type_name -> Volcengine.Vod.Models.Business.PosterSnapshotParams
	38,  // 68: Volcengine.Vod.Models.Business.SnapshotTaskParams.DynpostSnapshotParams:type_name -> Volcengine.Vod.Models.Business.DynpostSnapshotParams
	39,  // 69: Volcengine.Vod.Models.Business.SnapshotTaskParams.AnimatedPosterSnapshotParams:type_name -> Volcengine.Vod.Models.Business.AnimatedPosterSnapshotParams
	40,  // 70: Volcengine.Vod.Models.Business.SnapshotTaskParams.SpriteSnapshotParams:type_name -> Volcengine.Vod.Models.Business.SpriteSnapshotParams
	41,  // 71: Volcengine.Vod.Models.Business.SnapshotTaskParams.SampleSnapshotParams:type_name -> Volcengine.Vod.Models.Business.SampleSnapshotParams
	32,  // 72: Volcengine.Vod.Models.Business.VodTaskTemplateResult.TaskTemplate:type_name -> Volcengine.Vod.Models.Business.TaskTemplate
	32,  // 73: Volcengine.Vod.Models.Business.VodListTaskTemplateResult.Data:type_name -> Volcengine.Vod.Models.Business.TaskTemplate
	76,  // 74: Volcengine.Vod.Models.Business.WorkflowTemplate.CreatedAt:type_name -> google.protobuf.Timestamp
	76,  // 75: Volcengine.Vod.Models.Business.WorkflowTemplate.UpdatedAt:type_name -> google.protobuf.Timestamp
	45,  // 76: Volcengine.Vod.Models.Business.WorkflowTemplate.Activities:type_name -> Volcengine.Vod.Models.Business.Activity
	47,  // 77: Volcengine.Vod.Models.Business.Activity.SnapshotActivity:type_name -> Volcengine.Vod.Models.Business.SnapshotActivity
	48,  // 78: Volcengine.Vod.Models.Business.Activity.EndActivity:type_name -> Volcengine.Vod.Models.Business.EndActivity
	46,  // 79: Volcengine.Vod.Models.Business.Activity.TranscodeActivity:type_name -> Volcengine.Vod.Models.Business.TranscodeActivity
	73,  // 80: Volcengine.Vod.Models.Business.TranscodeActivity.Enhance:type_name -> Volcengine.Vod.Models.Business.TranscodeActivity.EnhanceParams
	74,  // 81: Volcengine.Vod.Models.Business.TranscodeActivity.Logo:type_name -> Volcengine.Vod.Models.Business.TranscodeActivity.LogoParams
	67,  // 82: Volcengine.Vod.Models.Business.TranscodeActivity.Parallel:type_name -> Volcengine.Vod.Models.Business.ParallelParams
	66,  // 83: Volcengine.Vod.Models.Business.TranscodeActivity.Condition:type_name -> Volcengine.Vod.Models.Business.Condition
	66,  // 84: Volcengine.Vod.Models.Business.SnapshotActivity.Condition:type_name -> Volcengine.Vod.Models.Business.Condition
	44,  // 85: Volcengine.Vod.Models.Business.VodWorkflowTemplateResult.WorkflowTemplate:type_name -> Volcengine.Vod.Models.Business.WorkflowTemplate
	44,  // 86: Volcengine.Vod.Models.Business.VodListWorkflowTemplateResult.Data:type_name -> Volcengine.Vod.Models.Business.WorkflowTemplate
	76,  // 87: Volcengine.Vod.Models.Business.LogoTemplate.CreatedAt:type_name -> google.protobuf.Timestamp
	76,  // 88: Volcengine.Vod.Models.Business.LogoTemplate.UpdatedAt:type_name -> google.protobuf.Timestamp
	52,  // 89: Volcengine.Vod.Models.Business.LogoTemplate.Logos:type_name -> Volcengine.Vod.Models.Business.AdaptLogo
	59,  // 90: Volcengine.Vod.Models.Business.LogoTemplate.Concats:type_name -> Volcengine.Vod.Models.Business.AdaptConcat
	61,  // 91: Volcengine.Vod.Models.Business.LogoTemplate.HiddenWatermark:type_name -> Volcengine.Vod.Models.Business.HiddenWatermarkAdd
	53,  // 92: Volcengine.Vod.Models.Business.AdaptLogo.AnchorSize:type_name -> Volcengine.Vod.Models.Business.AnchorSize
	57,  // 93: Volcengine.Vod.Models.Business.AdaptLogo.Logos:type_name -> Volcengine.Vod.Models.Business.LogoDefinition
	54,  // 94: Volcengine.Vod.Models.Business.LogoDefinition.ImageLogoDefinition:type_name -> Volcengine.Vod.Models.Business.ImageLogoDefinition
	55,  // 95: Volcengine.Vod.Models.Business.LogoDefinition.VideoLogoDefinition:type_name -> Volcengine.Vod.Models.Business.VideoLogoDefinition
	56,  // 96: Volcengine.Vod.Models.Business.LogoDefinition.TextLogoDefinition:type_name -> Volcengine.Vod.Models.Business.TextLogoDefinition
	53,  // 97: Volcengine.Vod.Models.Business.AdaptConcat.AnchorSize:type_name -> Volcengine.Vod.Models.Business.AnchorSize
	60,  // 98: Volcengine.Vod.Models.Business.AdaptConcat.Concats:type_name -> Volcengine.Vod.Models.Business.ConcatDefinition
	51,  // 99: Volcengine.Vod.Models.Business.VodListWatermarkResponseResult.Data:type_name -> Volcengine.Vod.Models.Business.LogoTemplate
	100, // [100:100] is the sub-list for method output_type
	100, // [100:100] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_volcengine_vod_business_vod_workflow_proto_init() }
func file_volcengine_vod_business_vod_workflow_proto_init() {
	if File_volcengine_vod_business_vod_workflow_proto != nil {
		return
	}
	file_volcengine_vod_business_vod_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStartWorkflowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeVideoOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeAudioOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnhanceOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inspection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeLogoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisualQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListWorkflowExecutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetWorkflowExecutionDetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsDynpost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsAIDynpost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsAnimatedPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsSprite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotParamsSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodWorkflowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeVideoTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteHDTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeAudioTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterSnapshotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynpostSnapshotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimatedPosterSnapshotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpriteSnapshotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleSnapshotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodTaskTemplateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListTaskTemplateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodWorkflowTemplateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListWorkflowTemplateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptLogo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageLogoDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoLogoDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextLogoDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FontShadow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptConcat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenWatermarkAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListWatermarkResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeActivity_EnhanceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeActivity_LogoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_workflow_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeActivity_SubtitleParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_volcengine_vod_business_vod_workflow_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_volcengine_vod_business_vod_workflow_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*SnapshotResult_Poster)(nil),
		(*SnapshotResult_Dynpost)(nil),
		(*SnapshotResult_AnimatedPoster)(nil),
		(*SnapshotResult_AIDynpost)(nil),
		(*SnapshotResult_Sprite)(nil),
		(*SnapshotResult_Sample)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_volcengine_vod_business_vod_workflow_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_volcengine_vod_business_vod_workflow_proto_goTypes,
		DependencyIndexes: file_volcengine_vod_business_vod_workflow_proto_depIdxs,
		EnumInfos:         file_volcengine_vod_business_vod_workflow_proto_enumTypes,
		MessageInfos:      file_volcengine_vod_business_vod_workflow_proto_msgTypes,
	}.Build()
	File_volcengine_vod_business_vod_workflow_proto = out.File
	file_volcengine_vod_business_vod_workflow_proto_rawDesc = nil
	file_volcengine_vod_business_vod_workflow_proto_goTypes = nil
	file_volcengine_vod_business_vod_workflow_proto_depIdxs = nil
}
